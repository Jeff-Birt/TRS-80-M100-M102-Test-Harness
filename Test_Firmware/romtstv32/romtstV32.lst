0001   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002   0000             ; $Id: ROMTST.asm $
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;
0005   0000             ;  ROM Test firmware for use with the ROM board V2.x.
0006   0000             ;  Uses the connection test board to complete the test harness.
0007   0000             ;  The use of an LCD dongle test board and keyboard loop back
0008   0000             ;  board can assist with debugging however they are not required.
0009   0000             ;
0010   0000             ;  Uses parts of the M100_dis_2013 data. The disassembly of the
0011   0000             ;  M100 ROM was invaluable in producing the test firmware. The 16-bit
0012   0000             ;  HEX number next to some routines can be used to reference into 
0013   0000             ;  the disassembly to help understanding of the reduced routines.
0014   0000             ;
0015   0000             ;  Created by IS on 12 Feb 2020.
0016   0000             ;  Updated: 
0017   0000             ;			10 Dec 2020 - V3.1. Added LCD Dongle and keyboard
0018   0000             ;			              Loopback board tests.
0019   0000             ;			22 Dec 2020 - V3.2. Improved fault detection on A14-A8 
0020   0000             ;						  RAM addresses.  
0021   0000             ;
0022   0000             ;  Copyright Â© 2020 Stardust. 
0023   0000             ;  All rights reserved.
0024   0000             ;  Commercial use prohibited
0025   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026   0000             ; TASM 
0027   0000             ; Processor: 8080/8085
0028   0000             ;
0029   0000             #DEFINE VERSION .text "V3.2" ; Change this value to update version
0030   0000             
0031   0000             ;===========================================================
0032   0000             ; Defined locations and constants
0033   0000             ; ==========================================================
0034   0000             ;Test Board Diagnostic LCD Settings
0035   0000             lcddata  .equ   0001H ;Display DATA shares ROM Address space
0036   0000             lcdins   .equ   0000H ;Display Control Register
0037   0000             lcdwake  .equ   30H   ;Wake up LCD
0038   0000             lcdfunc  .equ   38H   ;Set LCD 2 lines,0 5x7 Dots
0039   0000             ;lcdon    .equ   0FH   ;Set LCD on+Cursor+Blink
0040   0000             lcdon    .equ   0CH   ;Set LCD on no cursor
0041   0000             lcdmode  .equ   06H   ;LCD Mode
0042   0000             lcdclr   .equ   01H   ;Clear LCD
0043   0000             
0044   0000             ;RAM Location settings
0045   0000             ramstart .equ	08000H 
0046   0000             ramend	 .equ   0FFFFH
0047   0000             ram0   	 .equ   0E000H ; E7FFH, EFFFH, F7FFH ;E800H, F000H, F800H
0048   0000             ram1     .equ   0C000H ; C7FFH, CFFFH, D7FFH ;C800H, D000H, D800H
0049   0000             ram2	 .equ   0A000H ; A7FFH, AFFFH, B7FFH ;A800H, B000H, B800H
0050   0000             ram3     .equ 	08000H ; 87FFH, 8FFFH, 97FFH ;8800H, 9000H, 9800H
0051   0000             
0052   0000             ;I/O Port addresses
0053   0000             sysreg	 .equ   080H   ; Y0 System bus Sysreg
0054   0000             setreg	 .equ   081H   ; Y0 System bus ctlreg
0055   0000             lptreg	 .equ   082H   ; Y0 System bus lptreg
0056   0000             
0057   0000             teleIO   .equ   090H   ; Y1 Answering Telephone
0058   0000             modemIO	 .equ   0A0H   ; Y2 Modem control
0059   0000             
0060   0000             ;PIO registers
0061   0000             PIOCR	 .equ   0B0H   ; Y3 PIO Control Register B8H
0062   0000             PIOA	 .equ   0B1H   ; Y3 PIO Port A Register  B9H
0063   0000             PIOB	 .equ   0B2H   ; Y3 PIO Port B Register  BAH
0064   0000             PIOC	 .equ   0B3H   ; Y3 PIO Port C Register  BBH
0065   0000             PIOT1	 .equ   0B4H   ; Y3 PIO LSB Timer        BCH
0066   0000             PIOT2	 .equ   0B5H   ; Y3 PIO MSB Timer	    BDH
0067   0000             
0068   0000             UARTctrl .equ	0C0H   ; Y4 => 0xC0 - 0xCF  = UART Control
0069   0000             UARTread .equ	0C8H   ; Serial RX 
0070   0000             UARTsend .equ   0C8H   ; Serial TX
0071   0000             UARTmode .equ	0D8H   ; Y5 => 0xD0 - 0xDF  = Mode setting on UART
0072   0000             CtrlReg  .equ	0E8H   ; Y6 => 0xE0 - 0xEF  = Write to enable STROM and REMOTE, printer strobe and clock
0073   0000             readkbd  .equ	0E8H   ; Y6 => 0xE0 - 0xEF  = Read from Keyboard
0074   0000             scrins   .equ	0FEH   ; Y7 => 0xF0 - 0xFF  = Enable for LCD instructions, this is active HIGH
0075   0000             scrdata  .equ	0FFH   ; Y7 => 0xF0 - 0xFF  = Enable for LCD data, this is active HIGH
0076   0000             
0077   0000             		.org 0
0078   0000             ;===========================================================
0079   0000             ; Reset Vector
0080   0000             ; ==========================================================
0081   0000 C3 00 10    		JMP start      ; Start of test code
0082   0003             
0083   0003             ; ==========================================================
0084   0003             ; TRAP entry point
0085   0003             ; ==========================================================
0086   0024             		.org 24H
0087   0024 C3 79 23    		JMP trap      ; RAM vector for TRAP interrupt
0088   0027 00          		NOP
0089   0028             
0090   0028             ; ==========================================================
0091   0028             ; RST 5.5 -- Bar Code Reader
0092   0028             ; ==========================================================
0093   002C             		.org 2CH
0094   002C F3          		DI
0095   002D C3 E4 1D    		JMP bcrint    ; RST 5.5 RAM Vector	
0096   0030             	
0097   0030             ; ==========================================================
0098   0030             ; RST 6.5 -- RS232 character pending
0099   0030             ; ==========================================================
0100   0034             		.org 34H
0101   0034 F3          		DI
0102   0035 C3 E3 1B    		JMP serint    ; RST 6.5 routine (RS232 receive interrupt)
0103   0038             
0104   0038             ; ==========================================================
0105   0038             ; RST 7.5 -- Timer background task
0106   0038             ; ==========================================================
0107   003C             		.org 3CH
0108   003C F3          		DI
0109   003D C3 72 1A    		JMP timint      ; RST 7.5 interrupt routine
0110   0040             	
0111   0040             ; ==========================================================
0112   0040             ; Used to detect when the ROM switches. 
0113   0040             ; ==========================================================
0114   0040             		.org 040H
0115   0040             optromtext:
0116   0040 4E 6F 20 4F 		.text "No Optrom"
0116   0044 70 74 72 6F 
0116   0048 6D 
0117   0049 00          		.db 0
0118   004A             
0119   004A             ; ==========================================================
0120   004A             ; Copyright notices 
0121   004A             ; ==========================================================
0122   0F38                     .org 1000H - 200
0123   0F38             ;		.text "0123456789012345678901"
0124   0F38             ;		.text "0123456789ABCDEF"
0125   0F38             ;copyright notice
0126   0F38             copynotice:
0127   0F38             ;		.text "0123456789ABCDEF"
0128   0F38 20 20 52 4F 		.text "  ROM Test "
0128   0F3C 4D 20 54 65 
0128   0F40 73 74 20 
0129   0F43 56 33 2E 32 		VERSION
0130   0F47 00          		.db 0
0131   0F48 28 63 29 20 		.text "(c) IS  Dec 2020"
0131   0F4C 49 53 20 20 
0131   0F50 44 65 63 20 
0131   0F54 32 30 32 30 
0132   0F58 00          		.db 0
0133   0F59 4D 31 30 30 		.text "M100/102 ROM Test "
0133   0F5D 2F 31 30 32 
0133   0F61 20 52 4F 4D 
0133   0F65 20 54 65 73 
0133   0F69 74 20 
0134   0F6B 56 33 2E 32 		VERSION
0135   0F6F 00          		.db 0
0136   0F70 43 6F 70 79 		.text "Copyright IS Dec 2020"
0136   0F74 72 69 67 68 
0136   0F78 74 20 49 53 
0136   0F7C 20 44 65 63 
0136   0F80 20 32 30 32 
0136   0F84 30 
0137   0F85 00          		.db 0
0138   0F86             		
0139   0F86             ; **********************************************************
0140   0F86             ; Start of test code
0141   0F86             ; **********************************************************
0142   1000                     .org 1000h
0143   1000             start:
0144   1000 F3          		DI
0145   1001             		
0146   1001 3E 1F       		MVI A, 01FH   ; disable all interrupts
0147   1003 30          		SIM
0148   1004             
0149   1004 31 00 E0    		LXI SP,ram0   ; Set the SP = E000 just in case
0150   1007             		
0151   1007             		;Startup delay loop, taken from M100 ROM
0152   1007 21 10 27    		LXI H,2710H   ; Load 16-bit delay counter
0153   100A             wait1:
0154   100A 2B          		DCX H         ; Decrement delay counter: 6
0155   100B 7C          		MOV A,H       ; Test count for 0: 4
0156   100C B5          		ORA L         ; Test lower byte: 4
0157   100D C2 0A 10    		JNZ wait1     ; wait for zero count: 7 = 21cycles = 8.54us * 10000 = 86ms
0158   1010             
0159   1010             ; ==========================================================
0160   1010             ; Set up PIO just in case, use M100 ROM settings to configure
0161   1010             ; ==========================================================
0162   1010 3E 43       		MVI A,43H      ; Load configuration for PIO (A=OUT, B=OUT, C=IN, Stop Timer counter)
0163   1012 D3 B0       		OUT PIOCR      ; Set PIO chip configuration
0164   1014 3E EC       		MVI A,0ECH     ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=Modem, Keyscan col 9 enable)
0165   1016 D3 B2       		OUT PIOB       ; Set PIO chip port B configuration
0166   1018 3E FF       		MVI A,0FFH     ; PIO A configuration (Used for Key scan, LCD data, etc.)
0167   101A D3 B1       		OUT PIOA       ; Initialize PIO chip port A
0168   101C             
0169   101C 06 03       		MVI B, 3      ; Wake UP LCD 3 times	
0170   101E             
0171   101E             ; ==========================================================
0172   101E             ; Configure the diagnostic screen
0173   101E             ; 	Assumes no RAM is available until tested
0174   101E             ; ==========================================================
0175   101E             		; INIT diagnostic screen
0176   101E 21 00 00    		LXI H,lcdins  ; Load diagnostic LCD Instruction location
0177   1021             
0178   1021             lcdwakeup:
0179   1021             		;diagnostic LCD WAKEUP
0180   1021 36 30       		MVI M,lcdwake ; Wake up diagnostic LCD
0181   1023             		
0182   1023             		; Wait 1.1ms
0183   1023 0E FF       		MVI C,0FFH     ; Counter 255 	
0184   1025             delay1:
0185   1025 0D          		DCR C          ; Decrement C: 4
0186   1026 C2 25 10    		JNZ delay1     ; Loop until C = 0: 7 = 11 = 4.45us
0187   1029             
0188   1029 05          		DCR B
0189   102A C2 21 10    		JNZ lcdwakeup
0190   102D             
0191   102D             		;diagnostic LCD FUNCTION SET
0192   102D 36 38       		MVI M,lcdfunc   ; Function Set
0193   102F             
0194   102F             		; Wait 40us
0195   102F 0E 0A       		MVI C,10       ; Counter 10 	
0196   1031             delay2:
0197   1031 0D          		DCR C          ; Decrement C: 4
0198   1032 C2 31 10    		JNZ delay2     ; Loop until C = 0: 7 = 11 = 4.45us	
0199   1035             		
0200   1035             		;diagnostic LCD ON
0201   1035 36 0C       		MVI M,lcdon    ; LCD ON			
0202   1037             	
0203   1037             		; Wait 40us		
0204   1037 0E 0A       		MVI C,10       ; Counter 10 	
0205   1039             delay3:
0206   1039 0D          		DCR C          ; Decrement C: 4
0207   103A C2 39 10    		JNZ delay3     ; Loop until C = 0: 7 = 11 = 4.45us
0208   103D             
0209   103D             		;diagnostic LCD MODE
0210   103D 36 06       		MVI M,lcdmode  ; Set LCD mode
0211   103F             		
0212   103F             		; Wait 40us		
0213   103F 0E 0A       		MVI C,10      ; Counter 10 	
0214   1041             delay4:
0215   1041 0D          		DCR C          ; Decrement C: 4
0216   1042 C2 41 10    		JNZ delay4     ; Loop until C = 0: 7 = 11 = 4.45us
0217   1045             
0218   1045             
0219   1045             		;diagnostic LCD CLEAR
0220   1045 36 01       		MVI M,lcdclr   ; LCD Clear
0221   1047             	
0222   1047             		; Wait 1.64ms		
0223   1047             		; Wait 800us
0224   1047 06 02       		MVI B,2
0225   1049             delay5s
0226   1049 0E BE       		MVI C,190      ; Counter 190 	
0227   104B             delay5:
0228   104B 0D          		DCR C          ; Decrement C: 4
0229   104C C2 4B 10    		JNZ delay5     ; Loop until C = 0: 7 = 11 = 4.45us		
0230   104F             		
0231   104F 05          		DCR B
0232   1050 C2 49 10    		JNZ delay5s
0233   1053             
0234   1053             ; ==========================================================
0235   1053             ; Write 'CPU ' text to Diagnostic LCD
0236   1053             ; ==========================================================
0237   1053 3E 8D       		MVI A,08DH      ; Set Cursor to top RH corner
0238   1055 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
0239   1058             		; Wait 40us		
0240   1058 0E 0A       		MVI C,10        ; Counter 10 	
0241   105A             delay5a:
0242   105A 0D          		DCR C          ; Decrement C: 4
0243   105B C2 5A 10    		JNZ delay5a    ; Loop until C = 0: 7 = 11 = 4.45us
0244   105E             		
0245   105E 21 01 00    		LXI H,lcddata  ; Load LCD Data location
0246   1061 36 43       		MVI M,'C'      ; Load C to screen
0247   1063             		
0248   1063             		; Wait 40us		
0249   1063 0E 0A       		MVI C,10      ; Counter 10 	
0250   1065             delay6:
0251   1065 0D          		DCR C          ; Decrement C: 4
0252   1066 C2 65 10    		JNZ delay6    ; Loop until C = 0: 7 = 11 = 4.45us	
0253   1069             		
0254   1069 36 50       		MVI M,'P'      ; Load P to screen
0255   106B             		
0256   106B             		; Wait 40us		
0257   106B 0E 0A       		MVI C,10      ; Counter 10 	
0258   106D             delay7:
0259   106D 0D          		DCR C          ; Decrement C: 4
0260   106E C2 6D 10    		JNZ delay7    ; Loop until C = 0: 7 = 11 = 4.45us	
0261   1071             
0262   1071 36 55       		MVI M,'U'      ; Load P to screen
0263   1073             		
0264   1073             		; Wait 40us		
0265   1073 0E 0A       		MVI C,10      ; Counter 10 	
0266   1075             delay8:
0267   1075 0D          		DCR C          ; Decrement C: 4
0268   1076 C2 75 10    		JNZ delay8    ; Loop until C = 0: 7 = 11 = 4.45us			
0269   1079             
0270   1079 36 20       		MVI M,' '      ; Load space to screen
0271   107B             		
0272   107B             		; Wait 40us		
0273   107B 0E 0A       		MVI C,10      ; Counter 10 	
0274   107D             delay9:
0275   107D 0D          		DCR C          ; Decrement C: 4
0276   107E C2 7D 10    		JNZ delay9    ; Loop until C = 0: 7 = 11 = 4.45us	
0277   1081             		
0278   1081             
0279   1081             ; ==========================================================
0280   1081             ; Write 'RAM ?' text to Diagnostic LCD
0281   1081             ; ==========================================================
0282   1081 3E CC       		MVI A,0CCH      ; Set Cursor to bottom RH corner
0283   1083 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
0284   1086             		; Wait 40us		
0285   1086 0E 0A       		MVI C,10        ; Counter 10 	
0286   1088             delay9a:
0287   1088 0D          		DCR C          ; Decrement C: 4
0288   1089 C2 88 10    		JNZ delay9a    ; Loop until C = 0: 7 = 11 = 4.45us
0289   108C             		
0290   108C 21 01 00    		LXI H,lcddata  ; Load diagnostic LCD Data location
0291   108F 36 52       		MVI M,'R'      ; Load R to diagnostic screen
0292   1091             		
0293   1091             		; Wait 40us		
0294   1091 0E 0A       		MVI C,10      ; Counter 10 	
0295   1093             delay10:
0296   1093 0D          		DCR C          ; Decrement C: 4
0297   1094 C2 93 10    		JNZ delay10    ; Loop until C = 0: 7 = 11 = 4.45us	
0298   1097             		
0299   1097 36 41       		MVI M,'A'      ; Load A to diagnostic screen
0300   1099             		
0301   1099             		; Wait 40us		
0302   1099 0E 0A       		MVI C,10      ; Counter 10 	
0303   109B             delay11:
0304   109B 0D          		DCR C          ; Decrement C: 4
0305   109C C2 9B 10    		JNZ delay11    ; Loop until C = 0: 7 = 11 = 4.45us	
0306   109F             
0307   109F 36 4D       		MVI M,'M'      ; Load M to diagnostic screen
0308   10A1             		
0309   10A1             		; Wait 40us		
0310   10A1 0E 0A       		MVI C,10      ; Counter 10 	
0311   10A3             delay12:
0312   10A3 0D          		DCR C          ; Decrement C: 4
0313   10A4 C2 A3 10    		JNZ delay12    ; Loop until C = 0: 7 = 11 = 4.45us			
0314   10A7             
0315   10A7 36 3F       		MVI M,'?'      ; Load space to diagnostic screen
0316   10A9             		
0317   10A9             		; Wait 40us		
0318   10A9 0E 0A       		MVI C,10      ; Counter 10 	
0319   10AB             delay13:
0320   10AB 0D          		DCR C          ; Decrement C: 4
0321   10AC C2 AB 10    		JNZ delay13   ; Loop until C = 0: 7 = 11 = 4.45us
0322   10AF             
0323   10AF             ; ##########################################################
0324   10AF             ; ##########################################################		
0325   10AF             ; **********************************************************
0326   10AF             ; RAM TESTS
0327   10AF             ; 	Check each RAM bank
0328   10AF             ; 	Indicate which banks are present
0329   10AF             ; 	Test banks that exist by writing each byte.
0330   10AF             ; 	Indicate any failures
0331   10AF             ; 	Once tested use the stack as part of the testing 
0332   10AF             ;	if required
0333   10AF             ; **********************************************************
0334   10AF             ; Used in settings for the RAM tests
0335   10AF             goodmemch	.equ 'm' ; LC to make it more obvious
0336   10AF             badmemch  	.equ 'F' ; UC to make it stand out
0337   10AF             badpagech  	.equ 'H' ; UC to make it stand out
0338   10AF             backupch	.equ 'B'
0339   10AF             nobackupch	.equ '.'
0340   10AF             goodblock	.equ 'g'
0341   10AF             backupbyte	.equ 0AAH   ; Needs to be set to the last ram test byte
0342   10AF             
0343   10AF             ; ==============================================================
0344   10AF             ; Set up the cursor positions
0345   10AF             ; ==============================================================
0346   10AF 3E 80       		MVI A,080H      ; Set Cursor to top LH corner
0347   10B1 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
0348   10B4             		; Wait 40us				
0349   10B4 0E 0A       		MVI C,10        ; Counter 10 	
0350   10B6             delay14:
0351   10B6 0D          		DCR C          ; Decrement C: 4
0352   10B7 C2 B6 10    		JNZ delay14    ; Loop until C = 0: 7 = 11 = 4.45us
0353   10BA             		
0354   10BA             ; =============================================================
0355   10BA             ; TEST Set 1:
0356   10BA             ;   Is made up of 3 tests:
0357   10BA             ;   - Attempt to check the battery backup works.  Only works
0358   10BA             ;     on second attempt.
0359   10BA             ; 	- Test each memory location. Make sure it is OK.
0360   10BA             ;   - Test the first 256 bytes of the RAM to check A7-A0 address
0361   10BA             ;     lines for stuck faults.
0362   10BA             ; ==============================================================
0363   10BA             ; Example diagnostic screen layout
0364   10BA             ;		.text "0123456789ABCDEF"
0365   10BA             ;		.text ".mgg.mgg.mgg.Fgg" ; 080H
0366   10BA             ;		.text "mmmmmmmmmmmm1mmm" ; 0C0H
0367   10BA             
0368   10BA             ;33333333333333333333333333333
0369   10BA             ;*****************************
0370   10BA             ;*** Test RAM3	
0371   10BA             ;*****************************
0372   10BA             ;*** Test Battery Backup 3 ***
0373   10BA             ;*****************************
0374   10BA             ; Check for data retention from last run should contain 0AAH
0375   10BA 21 2C 81    		LXI H,ram3+300	 ; Standard RAM location 08064H	
0376   10BD             		
0377   10BD 7E          		MOV A,M
0378   10BE FE AA       		CPI backupbyte
0379   10C0 3E 2E       		MVI A,nobackupch
0380   10C2 C2 C7 10    		JNZ ramblktop3
0381   10C5 3E 42       		MVI A,backupch
0382   10C7             				
0383   10C7             ; Set HL to start of first RAM block location
0384   10C7             ramblktop3:
0385   10C7 32 01 00    		STA lcddata	
0386   10CA             
0387   10CA             ;*****************************
0388   10CA             ;*** Complete memory test 3 **	
0389   10CA             ;*****************************
0390   10CA 21 00 80    		LXI H,ram3		 ; Standard RAM location 08000H		
0391   10CD             								
0392   10CD             ramblktst3:
0393   10CD 11 57 29    		LXI D,ramtstdata ; Load the RAM byte test data table
0394   10D0             tstloc3:
0395   10D0 1A          		LDAX D   		 ; D = Current RAM byte test data
0396   10D1 FE FE       		CPI eotramtests  ; 0FEH Check end of table
0397   10D3 CA E0 10    		JZ nextloc3       
0398   10D6 77          		MOV M,A			 ; Write RAM location to table entry
0399   10D7 4E          		MOV C,M          ; Read RAM location
0400   10D8 B9          		CMP C		     ; Compare locations
0401   10D9 C2 F3 10    		JNZ tstfail3     ; Not equal RAM location failed
0402   10DC 13          		INX D            ; Get next RAM test byte
0403   10DD C3 D0 10    		JMP tstloc3      
0404   10E0             nextloc3:                ; Move to next RAM location to test
0405   10E0 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0406   10E1 7C          		MOV A,H          ; Check HL == 0
0407   10E2 FE A0       		CPI 0A0H         ; Compare next block
0408   10E4 CA EA 10    		JZ tstfin3       ; Finished testing
0409   10E7 C2 CD 10    		JNZ ramblktst3
0410   10EA             		
0411   10EA             tstfin3:
0412   10EA 3E 6D       		MVI A,goodmemch   ; Test OK
0413   10EC 31 00 90    		LXI SP,ram3+1000H ; Memory Block + 1000H
0414   10EF F5          		PUSH PSW          ; Put the goodmemch on the stack
0415   10F0 C3 F5 10    		JMP exitblk3
0416   10F3             tstfail3:
0417   10F3 3E 46       		MVI A,badmemch    ; Test Fail
0418   10F5             
0419   10F5             exitblk3:
0420   10F5 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0421   10F8             									
0422   10F8             ;*****************************
0423   10F8             ;*** First page RAM test 3 ***
0424   10F8             ;*****************************
0425   10F8 21 00 80    		LXI H,ram3	; Standard RAM location 08000H
0426   10FB AF          		XRA A
0427   10FC             
0428   10FC             ; Set up the first page
0429   10FC             fpramtst3init:
0430   10FC 3C          		INR A
0431   10FD 77          		MOV M,A		; Read the value
0432   10FE 2C          		INR L		; Next one in the list
0433   10FF C2 FC 10    		JNZ fpramtst3init   ; Keep going until done
0434   1102             
0435   1102             		; Wait see if memory retains contents
0436   1102 0E C8       		MVI C,200	
0437   1104             delayfp3:
0438   1104 0D          		DCR C          ; Decrement C: 4
0439   1105 C2 04 11    		JNZ delayfp3   ; Loop until C = 0: 7 = 11 = 4.45us
0440   1108             
0441   1108 21 00 80    		LXI H,ram3     ; Standard RAM location 08000H
0442   110B AF          		XRA A
0443   110C             
0444   110C             fpramtst3:		
0445   110C 3C          		INR A
0446   110D BE          		CMP M		; Compare with memory
0447   110E C2 1A 11    		JNZ fpramtst3fail 
0448   1111             
0449   1111 2C          		INR L		; Next one in the list
0450   1112 C2 0C 11    		JNZ fpramtst3   ; Keep going until done
0451   1115 3E 67       		MVI A,goodblock
0452   1117 C3 1C 11    		JMP fpramtst3exit ; Test complete
0453   111A             
0454   111A             fpramtst3fail:
0455   111A 3E 48       		MVI A,badpagech  
0456   111C             	
0457   111C             fpramtst3exit:
0458   111C 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0459   111F             		
0460   111F             ;*****************************
0461   111F             ;****** 256byte test 3 *******	
0462   111F             ;*****************************
0463   111F             ramloopstart3:
0464   111F 21 00 80    		LXI H,ram3		 ; Standard RAM location 08000H		
0465   1122             
0466   1122             ;Write test data to boundaries to check for SA Address lines
0467   1122 36 08       		MVI M,8         ; Set 1st Location to 8
0468   1124             				
0469   1124 23          		INX H           ; Address 1
0470   1125 36 07       		MVI M,7
0471   1127             				
0472   1127 21 02 80    		LXI H,ram3+002H ; Address 2
0473   112A 36 06       		MVI M,6
0474   112C             		
0475   112C 21 04 80    		LXI H,ram3+004H ; Address 4
0476   112F 36 05       		MVI M,5
0477   1131             		
0478   1131 21 08 80    		LXI H,ram3+008H ; Address 8
0479   1134 36 04       		MVI M,4
0480   1136             		
0481   1136 21 10 80    		LXI H,ram3+010H ; Address 16
0482   1139 36 03       		MVI M,3
0483   113B             		
0484   113B 21 20 80    		LXI H,ram3+020H ; Address 32
0485   113E 36 02       		MVI M,2
0486   1140             		
0487   1140 21 40 80    		LXI H,ram3+040H	; Address 64
0488   1143 36 01       		MVI M,1
0489   1145             		
0490   1145 21 80 80    		LXI H,ram3+080H ; Address 128
0491   1148 36 00       		MVI M,0
0492   114A             
0493   114A             ;Check the contents of the tested RAM		
0494   114A 21 00 80    		LXI H,ram3	; Standard RAM location 08000H		
0495   114D 3E 08       		MVI A,8
0496   114F             		
0497   114F BE          		CMP M       ; Compare first locations				
0498   1150 C2 96 11    		JNZ ramloop3testfail ; Test failed
0499   1153             
0500   1153 23          		INX H       ; Address 1		
0501   1154 3D          		DCR A
0502   1155 BE          		CMP M       ; Compare Address 1			
0503   1156 C2 96 11    		JNZ ramloop3testfail ; Test failed
0504   1159             
0505   1159 3D          		DCR A				
0506   115A 21 02 80    		LXI H,ram3+002H ; Address 2
0507   115D BE          		CMP M           ; Compare Address 2		
0508   115E C2 96 11    		JNZ ramloop3testfail ; Test failed
0509   1161             
0510   1161 3D          		DCR A				
0511   1162 21 04 80    		LXI H,ram3+004H ; Address 4
0512   1165 BE          		CMP M           ; Compare Address 4		
0513   1166 C2 96 11    		JNZ ramloop3testfail ; Test failed
0514   1169             		
0515   1169 3D          		DCR A				
0516   116A 21 08 80    		LXI H,ram3+008H ; Address 8
0517   116D BE          		CMP M           ; Compare Address 8	
0518   116E C2 96 11    		JNZ ramloop3testfail ; Test failed
0519   1171             		
0520   1171 3D          		DCR A				
0521   1172 21 10 80    		LXI H,ram3+010H ; Address 16
0522   1175 BE          		CMP M           ; Compare Address 16		
0523   1176 C2 96 11    		JNZ ramloop3testfail ; Test failed
0524   1179             		
0525   1179 3D          		DCR A				
0526   117A 21 20 80    		LXI H,ram3+020H ; Address 32
0527   117D BE          		CMP M           ; Compare Address 32		
0528   117E C2 96 11    		JNZ ramloop3testfail ; Test failed
0529   1181             		
0530   1181 3D          		DCR A				
0531   1182 21 40 80    		LXI H,ram3+040H ; Address 64
0532   1185 BE          		CMP M           ; Compare Address 64		
0533   1186 C2 96 11    		JNZ ramloop3testfail ; Test failed
0534   1189             		
0535   1189 3D          		DCR A				
0536   118A 21 80 80    		LXI H,ram3+080H ; Address 128
0537   118D BE          		CMP M           ; Compare Address 128		
0538   118E C2 96 11    		JNZ ramloop3testfail ; Test failed		
0539   1191             
0540   1191             		;Test successful
0541   1191 3E 67       		MVI A,goodblock		
0542   1193 C3 9C 11    		JMP ramloop3testend		
0543   1196             		
0544   1196             ramloop3testfail:
0545   1196 4F          		MOV C,A
0546   1197 3E 08       		MVI A,8
0547   1199 91          		SUB C
0548   119A C6 30       		ADI '0'  		
0549   119C             
0550   119C             ramloop3testend:
0551   119C 32 01 00    		STA lcddata
0552   119F             
0553   119F             
0554   119F             		; Wait 40us				
0555   119F 0E 0A       		MVI C,10        ; Counter 10 	
0556   11A1             delayr3:
0557   11A1 0D          		DCR C          ; Decrement C: 4
0558   11A2 C2 A1 11    		JNZ delayr3    ; Loop until C = 0: 7 = 11 = 4.45us	
0559   11A5             
0560   11A5             ;22222222222222222222222222222
0561   11A5             ;*****************************
0562   11A5             ;*** Test RAM2	
0563   11A5             ;*****************************
0564   11A5             ;*** Test Battery Backup 2 ***
0565   11A5             ;*****************************
0566   11A5             ; Check for data retention from last run should contain 0AAH
0567   11A5 21 2C A1    		LXI H,ram2+300	 ; Standard RAM location 0A064H	
0568   11A8             		
0569   11A8 7E          		MOV A,M
0570   11A9 FE AA       		CPI backupbyte
0571   11AB 3E 2E       		MVI A,nobackupch
0572   11AD C2 B2 11    		JNZ ramblktop2
0573   11B0 3E 42       		MVI A,backupch
0574   11B2             					
0575   11B2             ; Set HL to start of highest memory location
0576   11B2             ramblktop2:
0577   11B2 32 01 00    		STA lcddata	
0578   11B5             
0579   11B5             ;*****************************
0580   11B5             ;*** Complete memory test 2 **	
0581   11B5             ;*****************************
0582   11B5 21 00 A0    		LXI H,ram2		 ; Standard RAM location 0A000H
0583   11B8             ramblktst2:
0584   11B8 11 57 29    		LXI D,ramtstdata ; Load the RAM byte test data table
0585   11BB             tstloc2:
0586   11BB 1A          		LDAX D   		 ; D = Current RAM byte test data
0587   11BC FE FE       		CPI eotramtests  ; 0FEH Check end of table
0588   11BE CA CB 11    		JZ nextloc2       
0589   11C1 77          		MOV M,A		 ; Write RAM location to table entry
0590   11C2 4E          		MOV C,M          ; Read RAM location
0591   11C3 B9          		CMP C		 ; Compare locations
0592   11C4 C2 DE 11    		JNZ tstfail2   	 ; Not equal RAM location failed
0593   11C7 13          		INX D            ; Get next RAM test byte
0594   11C8 C3 BB 11    		JMP tstloc2       
0595   11CB             nextloc2:                ; Move to next RAM location to test
0596   11CB 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0597   11CC 7C          		MOV A,H          ; Check HL == 0
0598   11CD FE C0       		CPI 0C0H         ; Compare next block
0599   11CF CA D5 11    		JZ tstfin2       ; Finished testing
0600   11D2 C2 B8 11    		JNZ ramblktst2
0601   11D5             		
0602   11D5             tstfin2:
0603   11D5 3E 6D       		MVI A,goodmemch  ; Test OK
0604   11D7 31 00 B0    		LXI SP,ram2+1000H; Top Memory Block + 10
0605   11DA F5          		PUSH PSW         ; Put the 'M' on the stack
0606   11DB C3 E0 11    		JMP exitblk2
0607   11DE             tstfail2:
0608   11DE 3E 46       		MVI A,badmemch   ; Test Fail
0609   11E0             
0610   11E0             exitblk2:
0611   11E0 32 01 00    		STA lcddata    	 ; Load RAM # to screen	
0612   11E3             
0613   11E3             ;*****************************
0614   11E3             ;*** First page RAM test 2 ***
0615   11E3             ;*****************************
0616   11E3 21 00 A0    		LXI H,ram2	; Standard RAM location 0A000H
0617   11E6 AF          		XRA A
0618   11E7             
0619   11E7             ; Set up the first page
0620   11E7             fpramtst2init:
0621   11E7 3C          		INR A
0622   11E8 77          		MOV M,A		; Read the value
0623   11E9 2C          		INR L		; Next one in the list
0624   11EA C2 E7 11    		JNZ fpramtst2init   ; Keep going until done
0625   11ED             
0626   11ED 0E C8       		MVI C,200	
0627   11EF             delayfp2:
0628   11EF 0D          		DCR C          ; Decrement C: 4
0629   11F0 C2 EF 11    		JNZ delayfp2   ; Loop until C = 0: 7 = 11 = 4.45us
0630   11F3             
0631   11F3 21 00 A0    		LXI H,ram2    ; Standard RAM location 0A000H
0632   11F6 AF          		XRA A
0633   11F7             
0634   11F7             fpramtst2:		
0635   11F7 3C          		INR A
0636   11F8 BE          		CMP M		; Compare with memory
0637   11F9 C2 05 12    		JNZ fpramtst2fail 
0638   11FC             
0639   11FC 2C          		INR L		; Next one in the list
0640   11FD C2 F7 11    		JNZ fpramtst2   ; Keep going until done
0641   1200 3E 67       		MVI A,goodblock
0642   1202 C3 07 12    		JMP fpramtst2exit ; Test complete
0643   1205             
0644   1205             fpramtst2fail:
0645   1205 3E 48       		MVI A,badpagech  
0646   1207             	
0647   1207             fpramtst2exit:
0648   1207 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0649   120A             						    
0650   120A             ;*****************************
0651   120A             ;******* 256byte test 2 ******	
0652   120A             ;*****************************
0653   120A 21 00 A0    		LXI H,ram2	; Standard RAM location 0A000H		
0654   120D             
0655   120D             ;Write test data to boundaries to check for SA Address lines
0656   120D 36 08       		MVI M,8     ; Clear first location
0657   120F             				
0658   120F 23          		INX H           ; Address 1
0659   1210 36 07       		MVI M,7
0660   1212             				
0661   1212 21 02 A0    		LXI H,ram2+002H ; Address 2
0662   1215 36 06       		MVI M,6
0663   1217             		
0664   1217 21 04 A0    		LXI H,ram2+004H ; Address 4
0665   121A 36 05       		MVI M,5
0666   121C             		
0667   121C 21 08 A0    		LXI H,ram2+008H ; Address 8
0668   121F 36 04       		MVI M,4
0669   1221             		
0670   1221 21 10 A0    		LXI H,ram2+010H ; Address 16
0671   1224 36 03       		MVI M,3
0672   1226             		
0673   1226 21 20 A0    		LXI H,ram2+020H ; Address 32
0674   1229 36 02       		MVI M,2
0675   122B             		
0676   122B 21 40 A0    		LXI H,ram2+040H	; Address 64
0677   122E 36 01       		MVI M,1
0678   1230             		
0679   1230 21 80 A0    		LXI H,ram2+080H ; Address 128
0680   1233 36 00       		MVI M,0
0681   1235             
0682   1235             ;Check the contents of the tested RAM		
0683   1235 21 00 A0    		LXI H,ram2	; Standard RAM location 0A000H		
0684   1238 3E 08       		MVI A,8
0685   123A             		
0686   123A BE          		CMP M       ; Compare first locations				
0687   123B C2 81 12    		JNZ ramloop2testfail ; Test failed
0688   123E             
0689   123E 23          		INX H       ; Address 1		
0690   123F 3D          		DCR A
0691   1240 BE          		CMP M       ; Compare Address 1			
0692   1241 C2 81 12    		JNZ ramloop2testfail ; Test failed
0693   1244             
0694   1244 3D          		DCR A				
0695   1245 21 02 A0    		LXI H,ram2+002H ; Address 2
0696   1248 BE          		CMP M           ; Compare Address 2		
0697   1249 C2 81 12    		JNZ ramloop2testfail ; Test failed
0698   124C             
0699   124C 3D          		DCR A				
0700   124D 21 04 A0    		LXI H,ram2+004H ; Address 4
0701   1250 BE          		CMP M           ; Compare Address 4		
0702   1251 C2 81 12    		JNZ ramloop2testfail ; Test failed
0703   1254             		
0704   1254 3D          		DCR A				
0705   1255 21 08 A0    		LXI H,ram2+008H ; Address 8
0706   1258 BE          		CMP M           ; Compare Address 8	
0707   1259 C2 81 12    		JNZ ramloop2testfail ; Test failed
0708   125C             		
0709   125C 3D          		DCR A				
0710   125D 21 10 A0    		LXI H,ram2+010H ; Address 16
0711   1260 BE          		CMP M           ; Compare Address 16		
0712   1261 C2 81 12    		JNZ ramloop2testfail ; Test failed
0713   1264             		
0714   1264 3D          		DCR A				
0715   1265 21 20 A0    		LXI H,ram2+020H ; Address 32
0716   1268 BE          		CMP M           ; Compare Address 32		
0717   1269 C2 81 12    		JNZ ramloop2testfail ; Test failed
0718   126C             		
0719   126C 3D          		DCR A				
0720   126D 21 40 A0    		LXI H,ram2+040H ; Address 64
0721   1270 BE          		CMP M           ; Compare Address 64		
0722   1271 C2 81 12    		JNZ ramloop2testfail ; Test failed
0723   1274             		
0724   1274 3D          		DCR A				
0725   1275 21 80 A0    		LXI H,ram2+080H ; Address 128
0726   1278 BE          		CMP M           ; Compare Address 128		
0727   1279 C2 81 12    		JNZ ramloop2testfail ; Test failed		
0728   127C             
0729   127C             		;Test successful
0730   127C 3E 67       		MVI A,goodblock		
0731   127E C3 87 12    		JMP ramloop2testend		
0732   1281             		
0733   1281             ramloop2testfail:
0734   1281 4F          		MOV C,A
0735   1282 3E 08       		MVI A,8
0736   1284 91          		SUB C
0737   1285 C6 30       		ADI '0'  		
0738   1287             
0739   1287             ramloop2testend:
0740   1287 32 01 00    		STA lcddata	
0741   128A             
0742   128A             		; Wait 40us				
0743   128A 0E 0A       		MVI C,10        ; Counter 10 	
0744   128C             delayr2:
0745   128C 0D          		DCR C          ; Decrement C: 4
0746   128D C2 8C 12    		JNZ delayr2    ; Loop until C = 0: 7 = 11 = 4.45us
0747   1290             
0748   1290             ;11111111111111111111111111111
0749   1290             ;*****************************
0750   1290             ;*** Test RAM1
0751   1290             ;*****************************
0752   1290             ;*** Test Battery Backup 1 ***
0753   1290             ;*****************************
0754   1290             ; Check for data retention from last run should contain 0AAH
0755   1290 21 2C C1    		LXI H,ram1+300	 ; Standard RAM location 0C064H	
0756   1293             		
0757   1293 7E          		MOV A,M
0758   1294 FE AA       		CPI backupbyte
0759   1296 3E 2E       		MVI A,nobackupch
0760   1298 C2 9D 12    		JNZ ramblktop1
0761   129B 3E 42       		MVI A,backupch
0762   129D             					
0763   129D             ; Set HL to start of highest memory location
0764   129D             ramblktop1:
0765   129D 32 01 00    		STA lcddata	
0766   12A0             		
0767   12A0             ;*****************************
0768   12A0             ;*** Complete memory test 1 **	
0769   12A0             ;*****************************
0770   12A0 21 00 C0    		LXI H,ram1		 ; Standard RAM location 0C000H
0771   12A3             		
0772   12A3             ramblktst1:
0773   12A3 11 57 29    		LXI D,ramtstdata ; Load the RAM byte test data table
0774   12A6             tstloc1:
0775   12A6 1A          		LDAX D   		 ; D = Current RAM byte test data
0776   12A7 FE FE       		CPI eotramtests  ; 0FEH Check end of table
0777   12A9 CA B6 12    		JZ nextloc1       
0778   12AC 77          		MOV M,A			 ; Write RAM location to table entry
0779   12AD 4E          		MOV C,M          ; Read RAM location
0780   12AE B9          		CMP C			 ; Compare locations
0781   12AF C2 C9 12    		JNZ tstfail1   	 ; Not equal RAM location failed
0782   12B2 13          		INX D            ; Get next RAM test byte
0783   12B3 C3 A6 12    		JMP tstloc1       
0784   12B6             nextloc1:                ; Move to next RAM location to test
0785   12B6 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0786   12B7 7C          		MOV A,H          ; Check HL == 0
0787   12B8 FE E0       		CPI 0E0H         ; Compare next block
0788   12BA CA C0 12    		JZ tstfin1       ; Finished testing
0789   12BD C2 A3 12    		JNZ ramblktst1
0790   12C0             		
0791   12C0             tstfin1:
0792   12C0 3E 6D       		MVI A,goodmemch  	; Test OK
0793   12C2 31 00 D0    		LXI SP,ram1+1000H	; Top Memory Block + 10
0794   12C5 F5          		PUSH PSW         	; Put the 'X' on the stack
0795   12C6 C3 CB 12    		JMP exitblk1
0796   12C9             tstfail1:
0797   12C9 3E 46       		MVI A,badmemch   ; Test Fail
0798   12CB             
0799   12CB             exitblk1:
0800   12CB 32 01 00    		STA lcddata    	 ; Load RAM # to screen		
0801   12CE 0E 0A       		MVI C,10         ; Counter 10 	
0802   12D0             delaybl11:
0803   12D0 0D          		DCR C            ; Decrement C: 4
0804   12D1 C2 D0 12    		JNZ delaybl11    ; Loop until C = 0: 7 = 11 = 4.45us	
0805   12D4             
0806   12D4             ;*****************************
0807   12D4             ;*** First page RAM test 1 ***
0808   12D4             ;*****************************
0809   12D4 21 00 C0    		LXI H,ram1	; Standard RAM location 0C000H
0810   12D7 AF          		XRA A
0811   12D8             
0812   12D8             ; Set up the first page
0813   12D8             fpramtst1init:
0814   12D8 3C          		INR A
0815   12D9 77          		MOV M,A		; Read the value
0816   12DA 2C          		INR L		; Next one in the list
0817   12DB C2 D8 12    		JNZ fpramtst1init   ; Keep going until done
0818   12DE             
0819   12DE 0E C8       		MVI C,200	
0820   12E0             delayfp1:
0821   12E0 0D          		DCR C          ; Decrement C: 4
0822   12E1 C2 E0 12    		JNZ delayfp1   ; Loop until C = 0: 7 = 11 = 4.45us
0823   12E4             
0824   12E4 21 00 C0    		LXI H,ram1    ; Standard RAM location 0C000H
0825   12E7 AF          		XRA A
0826   12E8             
0827   12E8             fpramtst1:		
0828   12E8 3C          		INR A
0829   12E9 BE          		CMP M		; Compare with memory
0830   12EA C2 F6 12    		JNZ fpramtst1fail 
0831   12ED             
0832   12ED 2C          		INR L		    ; Next one in the list
0833   12EE C2 E8 12    		JNZ fpramtst1   ; Keep going until done
0834   12F1 3E 67       		MVI A,goodblock
0835   12F3 C3 F8 12    		JMP fpramtst1exit ; Test complete
0836   12F6             
0837   12F6             fpramtst1fail:
0838   12F6 3E 48       		MVI A,badpagech  
0839   12F8             	
0840   12F8             fpramtst1exit:
0841   12F8 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0842   12FB             		
0843   12FB             ;*****************************
0844   12FB             ;****** 256byte test 1 *******	
0845   12FB             ;*****************************
0846   12FB 21 00 C0    		LXI H,ram1		 ; Standard RAM location 0C000H		
0847   12FE             
0848   12FE             ;Write test data to boundaries to check for SA Address lines
0849   12FE 36 08       		MVI M,8     ; Clear first location
0850   1300             				
0851   1300 23          		INX H           ; Address 1
0852   1301 36 07       		MVI M,7
0853   1303             				
0854   1303 21 02 C0    		LXI H,ram1+002H ; Address 2
0855   1306 36 06       		MVI M,6
0856   1308             		
0857   1308 21 04 C0    		LXI H,ram1+004H ; Address 4
0858   130B 36 05       		MVI M,5
0859   130D             		
0860   130D 21 08 C0    		LXI H,ram1+008H ; Address 8
0861   1310 36 04       		MVI M,4
0862   1312             		
0863   1312 21 10 C0    		LXI H,ram1+010H ; Address 16
0864   1315 36 03       		MVI M,3
0865   1317             		
0866   1317 21 20 C0    		LXI H,ram1+020H ; Address 32
0867   131A 36 02       		MVI M,2
0868   131C             		
0869   131C 21 40 C0    		LXI H,ram1+040H	; Address 64
0870   131F 36 01       		MVI M,1
0871   1321             		
0872   1321 21 80 C0    		LXI H,ram1+080H ; Address 128
0873   1324 36 00       		MVI M,0
0874   1326             
0875   1326             ;Check the contents of the tested RAM		
0876   1326 21 00 C0    		LXI H,ram1	; Standard RAM location 0C000H		
0877   1329 3E 08       		MVI A,8
0878   132B             		
0879   132B BE          		CMP M       ; Compare first locations				
0880   132C C2 72 13    		JNZ ramloop1testfail ; Test failed
0881   132F             
0882   132F 23          		INX H       ; Address 1		
0883   1330 3D          		DCR A
0884   1331 BE          		CMP M       ; Compare Address 1			
0885   1332 C2 72 13    		JNZ ramloop1testfail ; Test failed
0886   1335             
0887   1335 3D          		DCR A				
0888   1336 21 02 C0    		LXI H,ram1+002H ; Address 2
0889   1339 BE          		CMP M           ; Compare Address 2		
0890   133A C2 72 13    		JNZ ramloop1testfail ; Test failed
0891   133D             
0892   133D 3D          		DCR A				
0893   133E 21 04 C0    		LXI H,ram1+004H ; Address 4
0894   1341 BE          		CMP M           ; Compare Address 4		
0895   1342 C2 72 13    		JNZ ramloop1testfail ; Test failed
0896   1345             		
0897   1345 3D          		DCR A				
0898   1346 21 08 C0    		LXI H,ram1+008H ; Address 8
0899   1349 BE          		CMP M           ; Compare Address 8	
0900   134A C2 72 13    		JNZ ramloop1testfail ; Test failed
0901   134D             		
0902   134D 3D          		DCR A				
0903   134E 21 10 C0    		LXI H,ram1+010H ; Address 16
0904   1351 BE          		CMP M           ; Compare Address 16		
0905   1352 C2 72 13    		JNZ ramloop1testfail ; Test failed
0906   1355             		
0907   1355 3D          		DCR A				
0908   1356 21 20 C0    		LXI H,ram1+020H ; Address 32
0909   1359 BE          		CMP M           ; Compare Address 32		
0910   135A C2 72 13    		JNZ ramloop1testfail ; Test failed
0911   135D             		
0912   135D 3D          		DCR A				
0913   135E 21 40 C0    		LXI H,ram1+040H ; Address 64
0914   1361 BE          		CMP M           ; Compare Address 64		
0915   1362 C2 72 13    		JNZ ramloop1testfail ; Test failed
0916   1365             		
0917   1365 3D          		DCR A				
0918   1366 21 80 C0    		LXI H,ram1+080H ; Address 128
0919   1369 BE          		CMP M           ; Compare Address 128		
0920   136A C2 72 13    		JNZ ramloop1testfail ; Test failed		
0921   136D             
0922   136D             		;Test successful
0923   136D 3E 67       		MVI A,goodblock		
0924   136F C3 78 13    		JMP ramloop1testend		
0925   1372             		
0926   1372             ramloop1testfail:
0927   1372 4F          		MOV C,A
0928   1373 3E 08       		MVI A,8
0929   1375 91          		SUB C
0930   1376 C6 30       		ADI '0'  		
0931   1378             
0932   1378             ramloop1testend:
0933   1378 32 01 00    		STA lcddata	
0934   137B             
0935   137B             		; Wait 40us				
0936   137B 0E 0A       		MVI C,10        ; Counter 10 	
0937   137D             delayr1:
0938   137D 0D          		DCR C          ; Decrement C: 4
0939   137E C2 7D 13    		JNZ delayr1    ; Loop until C = 0: 7 = 11 = 4.45us
0940   1381             
0941   1381             ;00000000000000000000000000000
0942   1381             ;*****************************
0943   1381             ;*** RAM 0
0944   1381             ;*****************************
0945   1381             ;*** Test Battery Backup 0 ***
0946   1381             ;*****************************
0947   1381             ; Check for data retention from last run should contain 0AAH		
0948   1381 21 2C E1    		LXI H,ram0+300	 ; Standard RAM location 0E064H	
0949   1384             		
0950   1384 7E          		MOV A,M
0951   1385 FE AA       		CPI backupbyte
0952   1387 3E 2E       		MVI A,nobackupch
0953   1389 C2 8E 13    		JNZ ramblktop
0954   138C 3E 42       		MVI A,backupch
0955   138E             
0956   138E             ; Set HL to start of highest memory location
0957   138E             ramblktop:
0958   138E 32 01 00    		STA lcddata
0959   1391             
0960   1391             ;*****************************
0961   1391             ;*** Complete memory test 0 **
0962   1391             ;*****************************
0963   1391 21 00 E0    		LXI H,ram0   ; Standard RAM location 0E000H	
0964   1394             ramblktst:
0965   1394 11 57 29    		LXI D,ramtstdata ; Load the RAM byte test data table
0966   1397             tstloc:
0967   1397 1A          		LDAX D   	     ; D = Current RAM byte test data
0968   1398 FE FE       		CPI eotramtests  ;0FEH Check end of table
0969   139A CA A7 13    		JZ nextloc       
0970   139D 77          		MOV M,A			 ; Write RAM location to table entry
0971   139E 4E          		MOV C,M          ; Read RAM location
0972   139F B9          		CMP C			 ; Compare locations
0973   13A0 C2 BA 13    		JNZ tstfail   	 ; Not equal RAM location failed
0974   13A3 13          		INX D            ; Get next RAM test byte
0975   13A4 C3 97 13    		JMP tstloc       
0976   13A7             nextloc:                 ; Move to next RAM location to test
0977   13A7 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0978   13A8 7C          		MOV A,H          ; Check HL == 0
0979   13A9 FE 00       		CPI 0H
0980   13AB CA B1 13    		JZ tstfin        ; Finished testing if HL == 0
0981   13AE C2 94 13    		JNZ ramblktst
0982   13B1             		
0983   13B1             tstfin:
0984   13B1 3E 6D       		MVI A,goodmemch   ; Test OK
0985   13B3 31 00 F0    		LXI SP,ram0+1000H ; Top Memory Block + 1000H
0986   13B6 F5          		PUSH PSW          ; Put the char on the stack
0987   13B7 C3 BC 13    		JMP exitblk
0988   13BA             tstfail:
0989   13BA 3E 46       		MVI A,badmemch    ; Test Fail
0990   13BC             
0991   13BC             exitblk:
0992   13BC 32 01 00    		STA lcddata    	 ; Load RAM # to screen	
0993   13BF             	
0994   13BF             ;*****************************
0995   13BF             ;*** First page RAM test 0 ***
0996   13BF             ;*****************************
0997   13BF 21 00 E0    		LXI H,ram0	; Standard RAM location 0E000H
0998   13C2 AF          		XRA A
0999   13C3             
1000   13C3             ; Set up the first page
1001   13C3             fpramtst0init:
1002   13C3 3C          		INR A
1003   13C4 77          		MOV M,A		; Read the value
1004   13C5 2C          		INR L		; Next one in the list
1005   13C6 C2 C3 13    		JNZ fpramtst0init   ; Keep going until done
1006   13C9             
1007   13C9 0E C8       		MVI C,200	
1008   13CB             delayfp0:
1009   13CB 0D          		DCR C          ; Decrement C: 4
1010   13CC C2 CB 13    		JNZ delayfp0   ; Loop until C = 0: 7 = 11 = 4.45us
1011   13CF             
1012   13CF 21 00 E0    		LXI H,ram0    ; Standard RAM location 0E000H
1013   13D2 AF          		XRA A
1014   13D3             
1015   13D3             fpramtst0:		
1016   13D3 3C          		INR A
1017   13D4 BE          		CMP M		; Compare with memory
1018   13D5 C2 E1 13    		JNZ fpramtst0fail 
1019   13D8             
1020   13D8 2C          		INR L			; Next one in the list
1021   13D9 C2 D3 13    		JNZ fpramtst0   ; Keep going until done
1022   13DC 3E 67       		MVI A,goodblock
1023   13DE C3 E3 13    		JMP fpramtst0exit ; Test complete
1024   13E1             
1025   13E1             fpramtst0fail:
1026   13E1 3E 48       		MVI A,badpagech  
1027   13E3             	
1028   13E3             fpramtst0exit:
1029   13E3 32 01 00    		STA lcddata    	 ; Load RAM # to screen
1030   13E6             
1031   13E6             ;*****************************
1032   13E6             ;******* 256byte test 0 ******	
1033   13E6             ;*****************************
1034   13E6 21 00 E0    		LXI H,ram0		 ; Standard RAM location 0E000H		
1035   13E9             
1036   13E9             ;Write test data to boundaries to check for SA Address lines
1037   13E9 36 08       		MVI M,8         ; Clear first location
1038   13EB             				
1039   13EB 23          		INX H           ; Address 1
1040   13EC 36 07       		MVI M,7
1041   13EE             				
1042   13EE 21 02 E0    		LXI H,ram0+002H ; Address 2
1043   13F1 36 06       		MVI M,6
1044   13F3             		
1045   13F3 21 04 E0    		LXI H,ram0+004H ; Address 4
1046   13F6 36 05       		MVI M,5
1047   13F8             		
1048   13F8 21 08 E0    		LXI H,ram0+008H ; Address 8
1049   13FB 36 04       		MVI M,4
1050   13FD             		
1051   13FD 21 10 E0    		LXI H,ram0+010H ; Address 16
1052   1400 36 03       		MVI M,3
1053   1402             		
1054   1402 21 20 E0    		LXI H,ram0+020H ; Address 32
1055   1405 36 02       		MVI M,2
1056   1407             		
1057   1407 21 40 E0    		LXI H,ram0+040H	; Address 64
1058   140A 36 01       		MVI M,1
1059   140C             		
1060   140C 21 80 E0    		LXI H,ram0+080H ; Address 128
1061   140F 36 00       		MVI M,0
1062   1411             
1063   1411             ;Check the contents of the tested RAM		
1064   1411 21 00 E0    		LXI H,ram0	; Standard RAM location 0E000H		
1065   1414 3E 08       		MVI A,8
1066   1416             		
1067   1416 BE          		CMP M       ; Compare first locations				
1068   1417 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1069   141A             
1070   141A 23          		INX H       ; Address 1		
1071   141B 3D          		DCR A
1072   141C BE          		CMP M       ; Compare Address 1			
1073   141D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1074   1420             
1075   1420 3D          		DCR A				
1076   1421 21 02 E0    		LXI H,ram0+002H ; Address 2
1077   1424 BE          		CMP M           ; Compare Address 2		
1078   1425 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1079   1428             
1080   1428 3D          		DCR A				
1081   1429 21 04 E0    		LXI H,ram0+004H ; Address 4
1082   142C BE          		CMP M           ; Compare Address 4		
1083   142D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1084   1430             		
1085   1430 3D          		DCR A				
1086   1431 21 08 E0    		LXI H,ram0+008H ; Address 8
1087   1434 BE          		CMP M           ; Compare Address 8	
1088   1435 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1089   1438             		
1090   1438 3D          		DCR A				
1091   1439 21 10 E0    		LXI H,ram0+010H ; Address 16
1092   143C BE          		CMP M           ; Compare Address 16		
1093   143D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1094   1440             		
1095   1440 3D          		DCR A				
1096   1441 21 20 E0    		LXI H,ram0+020H ; Address 32
1097   1444 BE          		CMP M           ; Compare Address 32		
1098   1445 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1099   1448             		
1100   1448 3D          		DCR A				
1101   1449 21 40 E0    		LXI H,ram0+040H ; Address 64
1102   144C BE          		CMP M           ; Compare Address 64		
1103   144D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1104   1450             		
1105   1450 3D          		DCR A				
1106   1451 21 80 E0    		LXI H,ram0+080H ; Address 128
1107   1454 BE          		CMP M           ; Compare Address 128		
1108   1455 C2 5D 14    		JNZ ramloop0testfail ; Test failed		
1109   1458             
1110   1458             		;Test successful
1111   1458 3E 67       		MVI A,goodblock		
1112   145A C3 63 14    		JMP ramloop0testend		
1113   145D             		
1114   145D             ramloop0testfail:
1115   145D 4F          		MOV C,A
1116   145E 3E 08       		MVI A,8
1117   1460 91          		SUB C
1118   1461 C6 30       		ADI '0'  		
1119   1463             
1120   1463             ramloop0testend:
1121   1463 32 01 00    		STA lcddata	
1122   1466             
1123   1466 0E 0A       		MVI C,10       ; Counter 10 	
1124   1468             delayr0:
1125   1468 0D          		DCR C          ; Decrement C: 4
1126   1469 C2 68 14    		JNZ delayr0    ; Loop until C = 0: 7 = 11 = 4.45us
1127   146C             
1128   146C             ; ==============================================================
1129   146C             ; TEST 2:
1130   146C             ;  Write to each individual 256 block, make sure the block
1131   146C             ;  is correctly selected.  May also show the RAM is bad.
1132   146C             ;  This will test address lines A14-A8 = 128 blocks.
1133   146C             ;  The Address lines A10-A8 are directly attached to the chip
1134   146C             ;  and can be identified as to the part they are identified as
1135   146C             ;  LKJ when failing.  
1136   146C             ;  The Address lines A14-A11 are  indirectly used to access the RAMs 
1137   146C             ;  via decoders.  Consequently if these lines fail they are limited
1138   146C             ;  to the failed CE.
1139   146C             ;  The char 'm' is used to indicate a passing block.
1140   146C             ;  The test will stop on the first block to fail in the 2K RAM
1141   146C             ;  block.
1142   146C             ; ==============================================================	
1143   146C 3E C0       		MVI A,0C0H      ; Set Cursor to bottom LH corner
1144   146E 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
1145   1471             
1146   1471 0E 0A       		MVI C,10       ; Counter 10 	
1147   1473             delay14a:
1148   1473 0D          		DCR C          ; Decrement C: 4
1149   1474 C2 73 14    		JNZ delay14a   ; Loop until C = 0: 7 = 11 = 4.45us
1150   1477             							
1151   1477 21 00 80    		LXI H,ramstart  ; Start of RAM
1152   147A             ;		LXI SP,800H     ; 2K Blocks
1153   147A             ;		MVI D,16        ; Number of banks to test 16 for 2K blocks
1154   147A 31 00 01    		LXI SP,100H     ; 256byte Blocks this will store 128 numbers in the RAM
1155   147D 16 80       		MVI D,128       ; Number of banks to test = 128 * 256 = 32K
1156   147F             						; 
1157   147F AF          		XRA A           ; Clear A
1158   1480             		
1159   1480             ; Set up the RAM banks with unique numbers to check indvidual CS- lines
1160   1480             ramloop:
1161   1480 3C          		INR A           ; 
1162   1481 77          		MOV M,A
1163   1482 39          		DAD SP          ; Add on preset block size to get the next block
1164   1483 15          		DCR D
1165   1484 C2 80 14    		JNZ ramloop     ; 
1166   1487             
1167   1487 21 00 80    		LXI H,ramstart  ; Start of RAM
1168   148A             ;		MVI D,16        ; Number of banks to test
1169   148A             ;		MVI D,128       ; Number of banks to test
1170   148A AF          		XRA A           ; Clear A
1171   148B             	
1172   148B             ; Test the ram banks CS- lines are working correctly
1173   148B             ; Print M if correct or the numeric location of the failing
1174   148B             ; RAM chip Address line.
1175   148B             	
1176   148B             ramloop128:
1177   148B 3C          		INR A           ; Increment A
1178   148C 5F          		MOV E,A         ; Move RAM byte to E
1179   148D BE          		CMP M
1180   148E C2 A2 14    		JNZ ramfail
1181   1491 E6 07       		ANI 007H        ; See if this is the end of the 2K RAM block
1182   1493 FE 07       		CPI 007H        ;
1183   1495 7B          		MOV A,E
1184   1496 C2 F1 14    		JNZ contloop    ; Next location
1185   1499 3E 6D       		MVI A,goodmemch  ; Char for diag LCD to indicate 2K RAM block is OK
1186   149B 32 01 00    		STA lcddata
1187   149E 7B          		MOV A,E
1188   149F C3 EB 14    		JMP prtdelay
1189   14A2             
1190   14A2             ramfail:
1191   14A2 E6 07       		ANI 7          ; Get the Address that failed
1192   14A4             		
1193   14A4             ;IF 2,3 or 5 then A8, A9, A10 = JKL
1194   14A4             ;IF 1 then need to SUB 1 /8 and add 1 to give CE line		
1195   14A4 FE 01       		CPI 1
1196   14A6 CA CC 14    		JZ idchipenable  ; Check if CE- Failure.
1197   14A9 FE 02       		CPI 2            ; Check for A8
1198   14AB C2 B3 14    		JNZ nextaddr
1199   14AE 3E 4A       		MVI A,'J'   
1200   14B0 C3 DF 14    		JMP sendtodiag
1201   14B3             		
1202   14B3             nextaddr:
1203   14B3 FE 03       		CPI 3            ; Check for A9
1204   14B5 C2 BD 14    		JNZ nextaddr1
1205   14B8 3E 4B       		MVI A,'K'   
1206   14BA C3 DF 14    		JMP sendtodiag
1207   14BD             		
1208   14BD             nextaddr1:
1209   14BD FE 05       		CPI 5            ; Check for A10
1210   14BF C2 C7 14    		JNZ nextaddr2
1211   14C2 3E 4C       		MVI A,'L'   
1212   14C4 C3 DF 14    		JMP sendtodiag
1213   14C7             
1214   14C7             nextaddr2:		
1215   14C7 3E 3F       		MVI A,'?'        ; Unkown memory fault could be dual failure
1216   14C9 C3 DF 14    		JMP sendtodiag
1217   14CC             				
1218   14CC             ;ID the failed chip enable:1 - F
1219   14CC             idchipenable:
1220   14CC 7B          		MOV A,E        ; Retrieve the failing address ID
1221   14CD DE 01       		SBI 1          ; Subtract 1
1222   14CF 1F          		RAR
1223   14D0 1F          		RAR
1224   14D1 1F          		RAR            ; Divide by 8
1225   14D2 C6 01       		ADI 1          ; Add 1 to give CEx value
1226   14D4             
1227   14D4             ;Print out HEX value of Chip Enable
1228   14D4 E6 0F       		ANI 00FH 		; Get Bottom Digit
1229   14D6 FE 0A       		CPI 0AH 		; A > 10
1230   14D8 DA DD 14    		JC  hexdigit 	
1231   14DB C6 07       		ADI 07H 	    ; Add 7 as this is A-F
1232   14DD             hexdigit: 
1233   14DD C6 30       		ADI 30H
1234   14DF             
1235   14DF             sendtodiag:
1236   14DF 32 01 00    		STA lcddata    ; Print character
1237   14E2 7C          		MOV A,H        ; Skip the 2K RAM block as it failed
1238   14E3 F6 07       		ORI 007H       
1239   14E5 67          		MOV H,A
1240   14E6 7B          		MOV A,E        ; Restore test number
1241   14E7 E6 F8       		ANI 0F8H       ; Increment to next 2K RAM block
1242   14E9 C6 08       		ADI 008H
1243   14EB             
1244   14EB             prtdelay:
1245   14EB 0E 0A       		MVI C,10       ; Counter 10 	
1246   14ED             delay15:
1247   14ED 0D          		DCR C          ; Decrement C: 4
1248   14EE C2 ED 14    		JNZ delay15    ; Loop until C = 0: 7 = 11 = 4.45us	
1249   14F1             
1250   14F1             contloop:	
1251   14F1 39          		DAD SP
1252   14F2 FE 80       		CPI 128
1253   14F4 C2 8B 14    		JNZ ramloop128
1254   14F7             
1255   14F7             ; ==============================================================				
1256   14F7             ; Now pick a RAM module to use for the next set of tests. 
1257   14F7             ; ==============================================================
1258   14F7             ramcheck:
1259   14F7 31 FE EF    		LXI SP,ram0+1000H - 2 ; Module 0				
1260   14FA F1          		POP PSW	
1261   14FB FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1262   14FD 3E 30       		MVI A,'0'
1263   14FF 11 D7 30    		LXI D,optram0load
1264   1502 CA 32 15    		JZ ramfnd
1265   1505             
1266   1505 31 FE CF    		LXI SP,ram1+1000H - 2 ; Module 1				
1267   1508 F1          		POP PSW			
1268   1509 FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1269   150B 3E 31       		MVI A,'1'
1270   150D 11 C0 30    		LXI D,optram1load
1271   1510 CA 32 15    		JZ ramfnd
1272   1513             						
1273   1513 31 FE AF    		LXI SP,ram2+1000H - 2; Module 2				
1274   1516 F1          		POP PSW			
1275   1517 FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1276   1519 3E 32       		MVI A,'2'
1277   151B 11 A9 30    		LXI D,optram2load
1278   151E CA 32 15    		JZ ramfnd		
1279   1521             
1280   1521 31 FE 8F    		LXI SP,ram3+1000H -2 ; Module 3				
1281   1524 F1          		POP PSW			
1282   1525 FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1283   1527 3E 33       		MVI A,'3'		
1284   1529 11 D7 30    		LXI D,optram0load
1285   152C CA 32 15    		JZ ramfnd
1286   152F             
1287   152F C3 3D 23    		JMP cpuhlt      ; No useful RAM
1288   1532             
1289   1532             ; SP is now set up with valid RAM location	
1290   1532             ramfnd:
1291   1532 CD B6 23    		CALL stromlocation ; Temp use this location to store A for later use
1292   1535 77          		MOV M,A
1293   1536             		
1294   1536             ;Insert OPTROM Detect Code into selected RAM Block	
1295   1536 21 00 00    		LXI H,0
1296   1539 39          		DAD SP
1297   153A 01 00 01    		LXI B,100H
1298   153D 2E 00       		MVI L,0
1299   153F 09          		DAD B           ; HL points to Free RAM
1300   1540 EB          		XCHG            ; DE = Free RAM, HL = Code to load	
1301   1541 06 19       		MVI B,25        ; Number of bytes to move
1302   1543 CD 24 24    		CALL movemem    ; B bytes to (DE) from (HL)
1303   1546             	
1304   1546             		;Finish the ram tests		
1305   1546 CD E1 24    		CALL diagscreenpause	
1306   1549 CD C0 24    		CALL clrscreen
1307   154C             
1308   154C 3E 80       		MVI A,080H     ; Set diag screen cursor to home
1309   154E CD 63 24    		CALL putins    ; Send to the diag screen			
1310   1551             
1311   1551             ; Set the STROM Resgister Location = 0	
1312   1551 CD B6 23    		CALL stromlocation
1313   1554             		
1314   1554 7E          		MOV A,M        ; Recover A
1315   1555 CD 58 24    		CALL putch     ; Print out the selected RAM block
1316   1558             		
1317   1558 3E 20       		MVI A,' '
1318   155A CD 58 24    		CALL putch
1319   155D             		
1320   155D             		; Reset location to 0
1321   155D AF          		XRA A
1322   155E 77          		MOV M,A
1323   155F D3 E8       		OUT CtrlReg
1324   1561             
1325   1561             ; Set the countdown timer for the RST 7.5 interrupt					
1326   1561 CD A9 23    		CALL getcountdown
1327   1564 36 D7       		MVI M,0D7H
1328   1566             		
1329   1566             		;JMP lcdtest   ; Next test, used for debugging test code
1330   1566 C3 69 15    		JMP piotest   ; Next test
1331   1569             
1332   1569             ; ##########################################################
1333   1569             ; ##########################################################
1334   1569             ; **********************************************************
1335   1569             ; Test PIO 81C55
1336   1569             ;	Write to the PIO registers and read back. 
1337   1569             ;	
1338   1569             ; **********************************************************
1339   1569             piotest:
1340   1569 21 1B 25    		LXI H,piostr   ; Output test name
1341   156C CD 6E 24    		CALL putstr
1342   156F             
1343   156F             		; Setup the Control Register
1344   156F             ;		MVI A,43H      ; Load configuration for PIO (A=OUT, B=OUT, C=IN, Stop Timer counter)
1345   156F             ;		OUT PIOCR      ; Set PIO chip configuration
1346   156F             
1347   156F             ; ==========================================================
1348   156F             ; Test Port A write RAM test data
1349   156F             ; ==========================================================
1350   156F 21 57 29    		LXI H,piotstdata ; Reuse RAM byte test data table
1351   1572             tstpioa:
1352   1572 7E          		MOV A,M          ; H = Current RAM byte test data
1353   1573 FE FE       		CPI 0FEH         ; Check end of table
1354   1575 CA 84 15    		JZ tstpioaok       
1355   1578 D3 B1       		OUT PIOA	     ; Write to PIOA Register
1356   157A DB B1       		IN  PIOA         ; Read PIOA location
1357   157C BE          		CMP M		     ; Compare locations
1358   157D C2 89 15    		JNZ tstpioafail  ; Not equal RAM location failed
1359   1580 23          		INX H            ; Get next RAM test byte
1360   1581 C3 72 15    		JMP tstpioa       
1361   1584             		
1362   1584             tstpioaok:
1363   1584 3E 41       		MVI A,'A'  	 ; Test OK
1364   1586 C3 8B 15    		JMP exitpioa
1365   1589             tstpioafail:
1366   1589 3E 46       		MVI A,'F'        ; Test Fail
1367   158B             exitpioa:
1368   158B 57          		MOV D,A          ; Save status of test
1369   158C CD 58 24    		CALL putch
1370   158F             
1371   158F             		;Set the LPT test register it might work
1372   158F 3E 83       		MVI A,083H       ;Set the BCR, BUSY and BUSY- bits high
1373   1591 D3 B1       		OUT PIOA
1374   1593             
1375   1593 AF          		XRA A
1376   1594 F6 02       		ORI 02H
1377   1596 D3 E8       		OUT CtrlReg 	 ; E8H
1378   1598 AF          		XRA A
1379   1599 D3 E8       		OUT CtrlReg 	 ; E8H		
1380   159B             	
1381   159B             ; ==========================================================
1382   159B             ; Test Port B write RAM test data do not test power off
1383   159B             ; ==========================================================
1384   159B 21 57 29    		LXI H,piotstdata ; Reuse the RAM byte test data table
1385   159E             tstpiob:
1386   159E 7E          		MOV A,M   	     ; H = Current RAM test byte  data
1387   159F FE FE       		CPI 0FEH         ; Check end of table
1388   15A1 CA B3 15    		JZ tstpiobok 
1389   15A4 E6 EF       		ANI 0EFH         ; No power off  
1390   15A6 5F          		MOV E,A        
1391   15A7 D3 B2       		OUT PIOB         ; Write to PIOB Register
1392   15A9 DB B2       		IN  PIOB         ; Read PIOB location		
1393   15AB BB          		CMP E		     ; Compare locations
1394   15AC C2 B8 15    		JNZ tstpiobfail  ; Not equal RAM location failed
1395   15AF 23          		INX H            ; Get next RAM test byte
1396   15B0 C3 9E 15    		JMP tstpiob       
1397   15B3             		
1398   15B3             tstpiobok:
1399   15B3 3E 42       		MVI A,'B'  	 ; Test OK
1400   15B5 C3 BA 15    		JMP exitpiob
1401   15B8             tstpiobfail:
1402   15B8 3E 46       		MVI A,'F'        ; Test Fail
1403   15BA             exitpiob:
1404   15BA CD 58 24    		CALL putch		
1405   15BD             
1406   15BD 3E E4       		MVI A,0E4H       ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=RS232, Keyscan col 9 enable)
1407   15BF D3 B2       		OUT PIOB         ; Set PIO chip port B configuration	
1408   15C1             
1409   15C1             ; ==========================================================
1410   15C1             ; Check for Port A or B Failure. 
1411   15C1             ; Jump to REMOTE test on failure.
1412   15C1             ; ==========================================================
1413   15C1             		;Check for failure of PIO B		
1414   15C1 FE 46       		CPI 'F'
1415   15C3 CA EA 15    		JZ piofail
1416   15C6             		
1417   15C6             		;Check for failure of PIO A	
1418   15C6 7A          		MOV A,D
1419   15C7 FE 46       		CPI 'F'
1420   15C9 CA EA 15    		JZ piofail
1421   15CC             		
1422   15CC 3E FF       		MVI A,0FFH      ; PIO A configuration (Used for Key scan, LCD data, etc.)
1423   15CE D3 B1       		OUT PIOA        ; Initialize PIO chip port A			        
1424   15D0              
1425   15D0             ; ==========================================================
1426   15D0             ; Check PIO C
1427   15D0             ; Ignore modem bits and serial port bits - tested in serial test
1428   15D0             ; ==========================================================      
1429   15D0             tstpioc:        
1430   15D0 DB B3       		IN PIOC     	; Check PIO chip port C
1431   15D2 E6 06       		ANI 006H        ; Ignore top bits they will be tested with the serial port. Modem will not be tested.
1432   15D4 FE 06       		CPI 006H        ; 0x06 magic port C read
1433   15D6 C2 EA 15    		JNZ piofail
1434   15D9 3E 43       		MVI A,'C'  	; Test OK
1435   15DB CD 58 24    		CALL putch
1436   15DE             	
1437   15DE             ;		MVI A,'L'
1438   15DE             ;		OUT PIOT1
1439   15DE             ;		IN  PIOT1
1440   15DE             ;	CALL putch
1441   15DE             ;		CPI 'L'
1442   15DE             ;		JNZ piofail
1443   15DE             ;		MVI A,'1'  		; Test OK
1444   15DE             ;		CALL putch
1445   15DE             ;
1446   15DE             ;		MVI A,'H'
1447   15DE             ;		OUT PIOT2
1448   15DE             ;		IN  PIOT2
1449   15DE             ;	CALL putch
1450   15DE             ;		CPI 'H'
1451   15DE             ;		JNZ piofail
1452   15DE             ;		MVI A,'2'  		; Test OK
1453   15DE             ;		CALL putch
1454   15DE             
1455   15DE             piotestdone:	
1456   15DE 21 03 25    		LXI H,passstr
1457   15E1 CD 6E 24    		CALL putstr
1458   15E4             
1459   15E4 CD E1 24    		CALL diagscreenpause
1460   15E7             	
1461   15E7 C3 2C 16    		JMP chklcd     ; Test the M100/102 main LCD
1462   15EA             	
1463   15EA             ; ==========================================================
1464   15EA             ; PIO Fail
1465   15EA             ; If either PIO registers fail test flow needs to change
1466   15EA             ; ========================================================== 		
1467   15EA             piofail:		
1468   15EA 21 09 25    		LXI H,piofailstr
1469   15ED CD 6E 24    		CALL putstr	
1470   15F0             		
1471   15F0             ;Write and read the A & B locations
1472   15F0             ;Print to the bottom of the screen
1473   15F0 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1474   15F2 CD 63 24    		CALL putins
1475   15F5             
1476   15F5             ; Test the PIO A register		
1477   15F5 AF          		XRA A
1478   15F6 CD 8E 24    		CALL prthex
1479   15F9             		
1480   15F9 D3 B1       		OUT PIOA
1481   15FB DB B1       		IN PIOA
1482   15FD             		
1483   15FD CD 8E 24    		CALL prthex
1484   1600             		
1485   1600 3E FF       		MVI A,0FFH
1486   1602             		
1487   1602 CD 8E 24    		CALL prthex
1488   1605             		
1489   1605 D3 B1       		OUT PIOA
1490   1607 DB B1       		IN PIOA
1491   1609             		
1492   1609 CD 8E 24    		CALL prthex		
1493   160C             
1494   160C             ; Test the PIO B register	
1495   160C             
1496   160C AF          		XRA A	
1497   160D CD 8E 24    		CALL prthex
1498   1610             		
1499   1610 D3 B2       		OUT PIOB
1500   1612 DB B2       		IN PIOB
1501   1614             		
1502   1614 CD 8E 24    		CALL prthex
1503   1617             		
1504   1617 3E EF       		MVI A,0EFH  ; Might accidentally power off the board!!!
1505   1619             		
1506   1619 CD 8E 24    		CALL prthex
1507   161C             		
1508   161C D3 B2       		OUT PIOB
1509   161E DB B2       		IN PIOB
1510   1620             				
1511   1620 CD 8E 24    		CALL prthex			
1512   1623 CD E1 24    		CALL diagscreenpause
1513   1626             
1514   1626 C3 11 1E    		JMP stromtestpiofail
1515   1629             		;CALL buzzer     ; Test the buzzer now the PIO is working		
1516   1629 C3 3D 23    		JMP cpuhlt      ; Stop here for now
1517   162C             
1518   162C             ; ##########################################################
1519   162C             ; ##########################################################
1520   162C             ; **********************************************************
1521   162C             ; Screen Verification
1522   162C             ;  Determine if real screen or test dongle
1523   162C             ; **********************************************************
1524   162C             ; Write 00 to PIOA to set CS20-CS27 to 0 
1525   162C             ; Set the data register with 00H this will set the dongle to ins1
1526   162C             ; Read Instruction register 1 should be 00H 
1527   162C             
1528   162C             chklcd:
1529   162C AF          		XRA A  		   ; Set PIO A port to 0, this sets CSx lines	
1530   162D D3 B1       		OUT PIOA	
1531   162F             	
1532   162F D3 FF       		OUT scrdata ; Set the data portion to 0, sets D0 if dongle
1533   1631 DB FE       		IN scrins
1534   1633             		
1535   1633 FE 00       		CPI 0
1536   1635 C2 85 17    		JNZ lcdtest ; If not 0 then real LCD is present	
1537   1638             					; else continue test using dongle
1538   1638             					
1539   1638             ; **********************************************************
1540   1638             ; Test Screen dongle
1541   1638             ;  Test the LCD interface using the LCD test dongle.
1542   1638             ;  Dongle contains registers to perform loopbacks of the data
1543   1638             ;  connector bus.  The test also checks the individual CSx
1544   1638             ;  lines to the LCD memory chips.
1545   1638             ;      Data Read - LCD  scrdata (test Data) 0FFH
1546   1638             ;      Inst Read - LCD  scrins  (test CSx)  0FEH
1547   1638             ; 
1548   1638             ;  There are two Inst registers that are selected by D0
1549   1638             ;  of the data register.  
1550   1638             ;  
1551   1638             ; **********************************************************
1552   1638             dongletest:
1553   1638 CD C0 24    		CALL clrscreen  ; Clear the diag screen
1554   163B             
1555   163B 3E 80       		MVI A,080H      ; Set Cursor to top line
1556   163D CD 63 24    		CALL putins
1557   1640             		
1558   1640 21 43 25    		LXI H,donglestrdata ; Indicate this is a dongle test
1559   1643 CD 6E 24    		CALL putstr
1560   1646             	
1561   1646             ; ==========================================================
1562   1646             ; Test data lines to LCD screen, AD0-AD7
1563   1646             ; ==========================================================
1564   1646 21 57 29    		LXI H,dongletestdata ; Reuse RAM byte test data table
1565   1649             		
1566   1649             tstdongle:
1567   1649 7E          		MOV A,M          ; H = Current RAM byte test data
1568   164A FE FE       		CPI 0FEH         ; Check end of table
1569   164C CA 5B 16    		JZ tstdongleok       
1570   164F D3 FF       		OUT scrdata	     ; Write to LCD Data Register
1571   1651 DB FF       		IN  scrdata      ; Read LCD Data register
1572   1653 BE          		CMP M		     ; Compare locations
1573   1654 C2 64 16    		JNZ tstdonglefail; Not equal location failed
1574   1657 23          		INX H            ; Get next RAM test byte
1575   1658 C3 49 16    		JMP tstdongle  
1576   165B             		
1577   165B             tstdongleok:
1578   165B 21 03 25    		LXI H,passstr    ; Output PASS to diag LCD
1579   165E CD 6E 24    		CALL putstr      ; Indicate LCD Data bus pass
1580   1661 C3 8A 16    		JMP dongletestend
1581   1664             			
1582   1664             tstdonglefail:
1583   1664 F5          		PUSH PSW         ; Save the failing data
1584   1665 E5          		PUSH H
1585   1666             		
1586   1666 21 09 25    		LXI H,dongledatafail ; Output FAIL to diag LCD
1587   1669 CD 6E 24    		CALL putstr
1588   166C             		
1589   166C 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1590   166E CD 63 24    		CALL putins
1591   1671             		
1592   1671 21 77 25    		LXI H,donglestrstat ; Output WR RD text to diag LCD
1593   1674 CD 6E 24    		CALL putstr		
1594   1677             
1595   1677 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
1596   1679 CD 63 24    		CALL putins
1597   167C             		
1598   167C             		; Print the data written
1599   167C E1          		POP H         ; Retrieve the data written
1600   167D 7E          		MOV A,M        						
1601   167E CD 8E 24    		CALL prthex
1602   1681             
1603   1681 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
1604   1683 CD 63 24    		CALL putins				
1605   1686             		
1606   1686             		; Print out Read value
1607   1686 F1          		POP PSW        ; Retrieve the data read
1608   1687 CD 8E 24    		CALL prthex
1609   168A             
1610   168A             dongletestend:		
1611   168A CD E1 24    		CALL diagscreenpause 	;Delay to allow review
1612   168D             
1613   168D             ; ==========================================================
1614   168D             ; Test CSx lines to LCD screen, CS20-27 label as INS1
1615   168D             ; ==========================================================				
1616   168D             dongletestins:		
1617   168D             		;MVI A,0
1618   168D             		;OUT scrdata     ; Set to read instruction register 1
1619   168D             
1620   168D CD C0 24    		CALL clrscreen		
1621   1690 21 4F 25    		LXI H,donglestrins1 ; Indicate this is a dongle test
1622   1693 CD 6E 24    		CALL putstr
1623   1696             			
1624   1696 21 57 29    		LXI H,dongletestdata ; Reuse RAM byte test data table	
1625   1699             tstdongleins:
1626   1699 7E          		MOV A,M          ; H = Current RAM byte test data
1627   169A FE FE       		CPI 0FEH         ; Check end of table
1628   169C CA AB 16    		JZ tstdongleinsok       
1629   169F D3 B1       		OUT PIOA	     ; Write to PIOA Register
1630   16A1 DB FE       		IN  scrins       ; Read the lower instruction register
1631   16A3 BE          		CMP M		     ; Compare locations
1632   16A4 C2 B4 16    		JNZ tstdongleinsfail  ; Not equal RAM location failed
1633   16A7 23          		INX H            ; Get next RAM test byte
1634   16A8 C3 99 16    		JMP tstdongleins  
1635   16AB             
1636   16AB             tstdongleinsok:
1637   16AB 21 03 25    		LXI H,passstr ; Output PASS to diag LCD
1638   16AE CD 6E 24    		CALL putstr         ; Indicate Data bus pass
1639   16B1 C3 DA 16    		JMP dongletestinsend
1640   16B4             			
1641   16B4             tstdongleinsfail:
1642   16B4 F5          		PUSH PSW         ; Save the failing data
1643   16B5 E5          		PUSH H
1644   16B6             		
1645   16B6 21 09 25    		LXI H,dongledatafail ; Output FAIL to diag LCD
1646   16B9 CD 6E 24    		CALL putstr
1647   16BC             		
1648   16BC 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1649   16BE CD 63 24    		CALL putins
1650   16C1             		
1651   16C1 21 77 25    		LXI H,donglestrstat ; Output WR RD text to diag LCD
1652   16C4 CD 6E 24    		CALL putstr		
1653   16C7             
1654   16C7 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
1655   16C9 CD 63 24    		CALL putins
1656   16CC             		
1657   16CC             		; Print the data written
1658   16CC E1          		POP H          ; Retrieve the data written
1659   16CD 7E          		MOV A,M        						
1660   16CE CD 8E 24    		CALL prthex
1661   16D1             
1662   16D1 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
1663   16D3 CD 63 24    		CALL putins				
1664   16D6             		
1665   16D6             		; Print out Read value
1666   16D6 F1          		POP PSW        ; Retrieve the data read
1667   16D7 CD 8E 24    		CALL prthex
1668   16DA             
1669   16DA             dongletestinsend:		
1670   16DA CD E1 24    		CALL diagscreenpause 	;Delay to allow review
1671   16DD             
1672   16DD             ; ==========================================================
1673   16DD             ; Test other CSx and ctl lines to LCD screen 
1674   16DD             ;   1, 1, 1, 1, 1, RST-, C29, C28 (D7-D0) 4 and E
1675   16DD             ; ==========================================================		
1676   16DD             dongletestins2:
1677   16DD CD C0 24    		CALL clrscreen		
1678   16E0 21 5B 25    		LXI H,donglestrins2 ; Indicate this is a dongle test
1679   16E3 CD 6E 24    		CALL putstr
1680   16E6             
1681   16E6 3E 01       		MVI A,01H
1682   16E8 D3 FF       		OUT scrdata ; Set to read instruction register 2
1683   16EA             		
1684   16EA 3E EC       		MVI A,0ECH  ; 
1685   16EC D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 0.
1686   16EE DB FE       		IN scrins   ; Read back the settings.
1687   16F0             		
1688   16F0 E6 03       		ANI 003H    ;
1689   16F2 C2 4E 17    		JNZ  tstdongleins2fail	
1690   16F5             		
1691   16F5 3E ED       		MVI A,0EDH  ; 
1692   16F7 D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 1 0.
1693   16F9 DB FE       		IN scrins   ; Read back the settings.
1694   16FB             		
1695   16FB E6 03       		ANI 003H    ;
1696   16FD FE 01       		CPI 001H
1697   16FF C2 4E 17    		JNZ  tstdongleins2fail	
1698   1702             
1699   1702 3E EE       		MVI A,0EEH  ; 
1700   1704 D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 0 1.
1701   1706 DB FE       		IN scrins   ; Read back the settings.
1702   1708             		
1703   1708 E6 03       		ANI 003H    ;
1704   170A FE 02       		CPI 002H
1705   170C C2 4E 17    		JNZ  tstdongleins2fail					
1706   170F             		
1707   170F 3E EF       		MVI A,0EFH  ; 
1708   1711 D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 1.
1709   1713             		
1710   1713 DB FE       		IN scrins   ; Read back the settings.
1711   1715 E6 03       		ANI 003H    ;
1712   1717 FE 03       		CPI 003H
1713   1719 C2 4E 17    		JNZ  tstdongleins2fail
1714   171C             		
1715   171C             			
1716   171C             		
1717   171C             tstdonglins2ok:
1718   171C 21 03 25    		LXI H,passstr ; Output PASS to diag LCD
1719   171F CD 6E 24    		CALL putstr         ; Indicate Data bus pass
1720   1722 3E C0       		MVI A,0C0H          ; Set Cursor to next line
1721   1724 CD 63 24    		CALL putins
1722   1727             
1723   1727 21 67 25    		LXI H,dongleins2data ; Reuse RAM byte test data table
1724   172A CD 6E 24    		CALL putstr          ; Indicate Data bus pass	
1725   172D             		
1726   172D 3E C4       		MVI A,0C4H           ; Set Cursor to print out RESET- state	
1727   172F CD 63 24    		CALL putins
1728   1732             
1729   1732 DB FE       		IN scrins            ; Read back the resgister.
1730   1734             		
1731   1734 E6 04       		ANI 004H				 ; Retrieve the Reset state should always be 1
1732   1736 1F          		RAR
1733   1737 1F          		RAR
1734   1738 C6 30       		ADI 030H             ; Make into ASCII 0 or 1
1735   173A CD 58 24    		CALL putch
1736   173D             		
1737   173D 3E CE       		MVI A,0CEH           ; Set Cursor to print out RESET- state	
1738   173F CD 63 24    		CALL putins
1739   1742             
1740   1742 DB FE       		IN scrins            ; Read back the register state.
1741   1744             		
1742   1744 E6 03       		ANI 003H				 ; Retrieve the Reset state should always be 1
1743   1746 C6 30       		ADI 030H             ; Make into ASCII 0 or 1
1744   1748 CD 58 24    		CALL putch
1745   174B             				
1746   174B C3 77 17    		JMP dongletestins2end
1747   174E             			
1748   174E             tstdongleins2fail:		
1749   174E 21 09 25    		LXI H,dongledatafail ; Output FAIL to diag LCD
1750   1751 CD 6E 24    		CALL putstr
1751   1754             		
1752   1754 3E C0       		MVI A,0C0H           ; Set Cursor to next line
1753   1756 CD 63 24    		CALL putins
1754   1759             		
1755   1759 21 77 25    		LXI H,donglestrstat  ; Output WR RD text to diag LCD
1756   175C CD 6E 24    		CALL putstr		
1757   175F             
1758   175F 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
1759   1761 CD 63 24    		CALL putins
1760   1764             		
1761   1764             		; Print the data written
1762   1764 DB B2       		IN PIOB        ; Read the data written to the PIOB  
1763   1766 E6 03       		ANI 003H       ; Get D1, D0  						
1764   1768 CD 8E 24    		CALL prthex
1765   176B             
1766   176B 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
1767   176D CD 63 24    		CALL putins				
1768   1770             		
1769   1770             		; Print out Read value
1770   1770 DB FE       		IN scrins      ; Retrieve the data from the screen
1771   1772 E6 03       		ANI 003H       ; Put the CS29 and CS28 bits in D1 and D0
1772   1774 CD 8E 24    		CALL prthex
1773   1777             
1774   1777             dongletestins2end:		
1775   1777             
1776   1777 3E E4       		MVI A,0E4H       ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=RS232, Keyscan col 9 enable)
1777   1779 D3 B2       		OUT PIOB         ; Set PIO chip port B configuration
1778   177B             		
1779   177B 3E FF       		MVI A,0FFH
1780   177D D3 B1       		OUT PIOA         ; Reset PIO to 0FFH
1781   177F             		
1782   177F CD E1 24    		CALL diagscreenpause ; Delay to allow review
1783   1782 C3 23 19    		JMP clktest          ; Continue with clock test
1784   1785             		
1785   1785             ; **********************************************************
1786   1785             ; Test Screen
1787   1785             ;  Check the screen can be accessed and write to screen RAM.
1788   1785             ;  Write the all 1's pattern and then all 0's
1789   1785             ;  Write a set of test chars on all 8 lines.
1790   1785             ; **********************************************************
1791   1785             ; Write to screen check it can read back status
1792   1785             lcdtest:
1793   1785 3E 00       		MVI A,00H	    ; Set PIO A port to 0, this sets CSx lines to 1	
1794   1787 D3 B1       		OUT PIOA
1795   1789             		
1796   1789 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1797   178B CD 63 24    		CALL putins
1798   178E             		
1799   178E 21 25 25    		LXI H,lcdstr    ; Output to diag LCD text
1800   1791 CD 6E 24    		CALL putstr
1801   1794             
1802   1794             		;Init screen 6D02H
1803   1794 CD 05 19    		CALL lcdshortdelay ; 7533H Enable LCD drivers after short delay
1804   1797 AF          		XRA A              ; OUT 0 to LCD
1805   1798 D3 FE       		OUT scrins
1806   179A CD 05 19    		CALL lcdshortdelay ; 7533H Enable LCD drivers after short delay
1807   179D 3E 3B       		MVI A,03BH	       ; OUT 3BH to LCD UP mode
1808   179F D3 FE       		OUT scrins
1809   17A1 CD FD 18    		CALL lcdsettopline ; 752BH Set the display top line to zero for all LCD controllers
1810   17A4 CD 05 19    		CALL lcdshortdelay ; 7533H Enable LCD drivers after short delay
1811   17A7 3E 39       		MVI A,39H          ; OUT 39H to LCD Display ON
1812   17A9 D3 FE       		OUT scrins
1813   17AB             
1814   17AB 3E 49       		MVI A,'I'          ; Indicate LCD init complete.  Should see random text on LCD
1815   17AD CD 58 24    		CALL putch
1816   17B0             		
1817   17B0 DB FE       		IN scrins          ; Check the LCD has completed init
1818   17B2             		; If LCD present read back should be X100 0000, else X111 1111
1819   17B2             
1820   17B2 E6 7F       		ANI 07FH
1821   17B4 FE 40       		CPI 040H           ; Check for valid LCD present
1822   17B6 C2 BE 17    		JNZ LCDfail
1823   17B9             
1824   17B9 3E 55       		MVI A,'U'          ; LCD Success
1825   17BB C3 CA 17    		JMP LCDprt
1826   17BE             		
1827   17BE             		;LCD fail or is not present
1828   17BE             LCDfail:
1829   17BE 21 09 25    		LXI H,lcdfailstr     ; Output fail to diag LCD text
1830   17C1 CD 6E 24    		CALL putstr
1831   17C4 CD E1 24    		CALL diagscreenpause ;Delay to allow review
1832   17C7 C3 23 19    		JMP clktest 
1833   17CA             LCDprt:
1834   17CA CD 58 24    		CALL putch
1835   17CD             
1836   17CD             		;Fill screen with dark pattern
1837   17CD 0E EF       		MVI C,0EFH      ; Clear screen
1838   17CF CD E3 18    		CALL fillscreen
1839   17D2             	
1840   17D2 CD ED 24    		CALL longdelay
1841   17D5             
1842   17D5             		;Clear the screen with space ie clear screen
1843   17D5 0E 58       		MVI C,'X'      ; Fill screen with 'X'
1844   17D7 CD E3 18    		CALL fillscreen
1845   17DA             
1846   17DA             		;Output 8 lines of text.  Text is stored below
1847   17DA 21 48 28    		LXI H,tstline0
1848   17DD 11 01 01    		LXI D,0101H
1849   17E0 CD 2E 18    		CALL putlcdstr
1850   17E3             
1851   17E3 21 72 28    		LXI H,tstline1
1852   17E6 11 02 01    		LXI D,0102H
1853   17E9 CD 2E 18    		CALL putlcdstr
1854   17EC             
1855   17EC 21 94 28    		LXI H,tstline2
1856   17EF 11 03 01    		LXI D,0103H
1857   17F2 CD 2E 18    		CALL putlcdstr
1858   17F5             
1859   17F5 21 B4 28    		LXI H,tstline3
1860   17F8 11 04 01    		LXI D,0104H
1861   17FB CD 2E 18    		CALL putlcdstr
1862   17FE             
1863   17FE 21 D3 28    		LXI H,tstline4
1864   1801 11 05 01    		LXI D,0105H
1865   1804 CD 2E 18    		CALL putlcdstr
1866   1807             
1867   1807 21 F4 28    		LXI H,tstline5
1868   180A 11 06 01    		LXI D,0106H
1869   180D CD 2E 18    		CALL putlcdstr
1870   1810             
1871   1810 21 15 29    		LXI H,tstline6
1872   1813 11 07 01    		LXI D,0107H
1873   1816 CD 2E 18    		CALL putlcdstr
1874   1819             
1875   1819 21 36 29    		LXI H,tstline7
1876   181C 11 08 01    		LXI D,0108H
1877   181F CD 2E 18    		CALL putlcdstr
1878   1822             
1879   1822 21 32 25    		LXI H,lcddone        ; Output diagnostic LCD text
1880   1825 CD 6E 24    		CALL putstr
1881   1828             		
1882   1828 CD E1 24    		CALL diagscreenpause ;Delay to allow review
1883   182B             
1884   182B C3 23 19    		JMP clktest 
1885   182E             
1886   182E             ; ==========================================================
1887   182E             ; PUT String to the main LCD screen. D,E should point to location
1888   182E             ; 	Does not word wrap for end of line
1889   182E             ; ==========================================================
1890   182E             putlcdstr:		
1891   182E F5          		PUSH PSW
1892   182F             putlcdloop:
1893   182F AF          		XRA A           ; A = 0
1894   1830 4E          		MOV C,M   	; H = Current Character
1895   1831 BE          		CMP M           ; Check end of table
1896   1832 CA 41 18    		JZ putlcdexit 
1897   1835 E5          		PUSH H
1898   1836 D5          		PUSH D      
1899   1837 CD 43 18    		CALL plotchar   ; Write to main screen
1900   183A D1          		POP D
1901   183B E1          		POP H
1902   183C 23          		INX H           ; Get next Char
1903   183D 14          		INR D           ; Next row entry
1904   183E C3 2F 18    		JMP putlcdloop
1905   1841             		
1906   1841             putlcdexit:
1907   1841 F1          		POP PSW
1908   1842 C9          		RET
1909   1843             		
1910   1843             ; ======================================================
1911   1843             ; Plot character in C on LCD at (D,E)
1912   1843             ; All regiters are destroyed
1913   1843             ; ======================================================
1914   1843             plotchar: ;73EEH
1915   1843 15          		DCR D          ; DCR D COL - 1?
1916   1844 1D          		DCR E          ; DCR E ROW - 1?
1917   1845             ;		XCHG           ; DE <-> HL 
1918   1845 D5          		PUSH D         ; save COL-1,ROW-1
1919   1846 79          		MOV A,C        ; A = C Character
1920   1847 11 6F 2A    		LXI D,lcdasciitable - 1 ; 7710H Load top of Char FONT table - 1
1921   184A D6 20       		SUI 20H        ; A = A - 32
1922   184C CA 58 18    		JZ charfound   ; 7410H If char = SPACE
1923   184F 13          		INX D          ; INC D
1924   1850 FE 60       		CPI 60H        ; A = 60H => 80H Graphics 
1925   1852 DA 58 18    		JC charfound   ; 7410H If less then must be a char
1926   1855 11 10 2A    		LXI D,lcdasciitable - 60H ; 76B1H = 7711H - 60H Load top of Graphic FONT table
1927   1858             
1928   1858             ;Printable Character found. 
1929   1858             charfound: ;7410H
1930   1858 F5          		PUSH PSW       ; Save status from Compare CPI 60H
1931   1859 6F          		MOV L,A        ; L = A
1932   185A 26 00       		MVI H,00H      ; H = 0 => HL = char - 32
1933   185C 44          		MOV B,H        ; B = 0
1934   185D 4D          		MOV C,L        ; C = L => BC = char - 32
1935   185E 29          		DAD H          ; HL + HL
1936   185F 29          		DAD H          ; HL + HL  = 4 x HL
1937   1860 09          		DAD B          ; HL + BC  = 5 x HL
1938   1861 F1          		POP PSW        ; POP A
1939   1862 F5          		PUSH PSW       ; PUSH A  Get status to check for character type ASCII or Graphic
1940   1863 DA 67 18    		JC asciichar   ; 741FH  < 60H
1941   1866 09          		DAD B          ; HL + BC = 6 x HL
1942   1867             
1943   1867             ;ASCII Char
1944   1867             asciichar: ;741FH
1945   1867 19          		DAD D          ; HL + DC = Table + Char x 5 or Graphics x 6
1946   1868 F1          		POP PSW        ; POP A
1947   1869 E5          		PUSH H
1948   186A             		
1949   186A D2 79 18    		JNC printlcdchar ; 7430H
1950   186D             
1951   186D             ;If ASCII Char put into buffer
1952   186D E1          		POP H
1953   186E CD 80 23    		CALL ramsblockstart  ;Get the start of the RAM in DE
1954   1871             ;Move ASCII Char into RAM space
1955   1871 D5          		PUSH D
1956   1872 06 05       		MVI B,05H
1957   1874 CD 24 24    		CALL movemem ; 2542H Move B bytes from M to (DE)
1958   1877 AF          		XRA A
1959   1878 12          		STAX D
1960   1879             	
1961   1879             ;Graphics char
1962   1879             printlcdchar:   ;7430H
1963   1879 C1          		POP B          ; Either Graphic Font Table Pointer or RAM Table for ASCII Char
1964   187A E1          		POP H          ; Retrieve the COL-1,ROW-1
1965   187B CD 83 18    		CALL printchar ; 74A2H Byte Plot - Send bit pattern to LCD for character
1966   187E AF          		XRA A          ; CLR A
1967   187F CD FD 18    		CALL lcdsettopline ; 752BH Set the display top line to zero for all LCD controllers
1968   1882 C9          		RET
1969   1883             
1970   1883             ; ======================================================
1971   1883             ; Send bit pattern to Main LCD for the character
1972   1883             ; ======================================================
1973   1883             printchar: ;74A2H
1974   1883 C5          		PUSH B     ; Save Font Table Pointer
1975   1884 1E 06       		MVI E,06H  ; E = 6  Number of bytes for a Graphic
1976   1886             ;74A5H  (3AH) LDA FFF5H  ; COL
1977   1886 7C          		MOV A,H    ; A = H = COL - 1
1978   1887 FE 08       		CPI 08H    ; A = 8   Col is a bridge
1979   1889 CA 96 18    		JZ decfour ; 74B7H E = E - 4
1980   188C FE 10       		CPI 10H    ; A = 16  Col is a bridge
1981   188E CA 98 18    		JZ dectwo  ; 74B9H E = E - 2
1982   1891 FE 21       		CPI 21H    ; A = 33 Col is a bridge E - 4
1983   1893 C2 9A 18    		JNZ nodec  ; 74BBH E = E  
1984   1896             decfour: ;74B7H
1985   1896 1D          		DCR E      ; E--
1986   1897 1D          		DCR E      ; E--
1987   1898             dectwo:  ;74B9H
1988   1898 1D          		DCR E      ; E--
1989   1899 1D          		DCR E      ; E--
1990   189A             nodec:   ;74BBH
1991   189A 4F          		MOV C,A    ; C = A COL - 1
1992   189B 81          		ADD C      ; A + A
1993   189C 81          		ADD C      ; 2A + A
1994   189D 4F          		MOV C,A    ; C = 3*COL - 3  
1995   189E 06 00       		MVI B,00H  ; B = 0  
1996   18A0 7D          		MOV A,L    ; ROW
1997   18A1 1F          		RAR        ; /2
1998   18A2 1F          		RAR        ; /4
1999   18A3 1F          		RAR        ; /8  0 1 2 3   4 5 6 7 See which section upper or lower RAM modules 
2000   18A4             				   ; 2 -> 7 -> C0
2001   18A4             				   		
2002   18A4 21 DC 29    		LXI H,lcdlowercs ; 75C9H 8155 PIO chip bit patterns for Lower LCD drivers
2003   18A7 DA AD 18    		JC setuptable    ; 74D0H
2004   18AA 21 64 29    		LXI H,lcduppercs ; 7551H 8155 PIO chip bit patterns for Upper LCD drivers
2005   18AD             		
2006   18AD             setuptable:   ;74D0H
2007   18AD 09          		DAD B       ; HL + BC  HL + 3xCOL 75C9 Set pointer to LCD PIO Tables: PIOA, PIOB and RAM Address  
2008   18AE             
2009   18AE 47          	    MOV B,A     ; Save LCD RAM Address
2010   18AF             
2011   18AF CD 0D 19    		CALL enablelcd ; 753BH Enable LCD driver(s) specified by (HL)
2012   18B2             
2013   18B2 54          		MOV D,H
2014   18B3 4D          		MOV C,L    ; Save HL to D,C as PIO address field table pointer
2015   18B4             		
2016   18B4 78          		MOV A,B     ; 
2017   18B5 B6          		ORA M       ; OR with 3rd entry in PIO table to set address
2018   18B6 47          		MOV B,A     ; Save B = A, Address setting
2019   18B7             		
2020   18B7 E1          		POP H       ;Get font data bits pointer
2021   18B8 D5          		PUSH D		
2022   18B9 CD CE 18    		CALL writebyteslcd ; 74F7H Send E bytes from HL to the LCD RAM
2023   18BC             
2024   18BC D1          		POP D
2025   18BD             ;Finish the print
2026   18BD 3E 06       		MVI A,006H 	; See how many have been missed
2027   18BF 93          		SUB E
2028   18C0 C8          		RZ        	; Return if all done
2029   18C1             	
2030   18C1             ;Complete the missing bits on the next RAM Chip
2031   18C1 5F          		MOV E,A      ; E = Missing byte cnt  
2032   18C2             
2033   18C2 E5          		PUSH H
2034   18C3 62          		MOV H,D
2035   18C4 69          		MOV L,C      ; Restore HL form D,C as PIO address field table pointer
2036   18C5             
2037   18C5 23          		INX H          ; Get the next PIO field 
2038   18C6 CD 0D 19    		CALL enablelcd ; 753BH Enable LCD driver(s) specified by (HL) 
2039   18C9             		
2040   18C9 78          		MOV A,B
2041   18CA E6 C0       		ANI 0C0H       ; clr lower address leave row address ok
2042   18CC 47          		MOV B,A        ; save 
2043   18CD             
2044   18CD E1          		POP H
2045   18CE             						
2046   18CE             ;		MOV E,C
2047   18CE              
2048   18CE             ; Write the selected bytes
2049   18CE             writebyteslcd:  ;74F7H
2050   18CE 78          		MOV A,B
2051   18CF CD 1A 19    		CALL lcdbusy   ; 7548H Wait for LCD driver to be available
2052   18D2 D3 FE       		OUT scrins     ; FEH Set Address for the LCD RAM Chip
2053   18D4             lcdwrite:       
2054   18D4             lcdwait:
2055   18D4 DB FE       		IN scrins 		; FEH Wait for LCD 
2056   18D6 17          		RAL
2057   18D7 DA D4 18    		JC lcdwait     ; 750BH
2058   18DA 7E          		MOV A,M        ; Put font byte to A
2059   18DB D3 FF       		OUT scrdata    ; FFH Output to LCD
2060   18DD 23          		INX H          ; Next byte
2061   18DE 1D          		DCR E          ; Byte count
2062   18DF C2 D4 18    		JNZ lcdwait    ; 750BH      ; Next byte
2063   18E2 C9          		RET
2064   18E3             			
2065   18E3             ; ======================================================
2066   18E3             ; Fill Screen use DE and print char in C
2067   18E3             ; ======================================================
2068   18E3             fillscreen:    ;4601H
2069   18E3 1E 01       		MVI E,1      ; Prepare to point to LCD RAM (1,1) ROW
2070   18E5             nextlcdrow:
2071   18E5 16 01       		MVI D,1      ;   " 				   COL
2072   18E7             nextlcdchar:
2073   18E7 C5          		PUSH B
2074   18E8 D5          		PUSH D
2075   18E9 CD 43 18    		CALL plotchar  ; 73EEH  or 4566H Call Level 6 Character Draw routine
2076   18EC D1          		POP D
2077   18ED C1          		POP B
2078   18EE 14          		INR D          ; Increment column
2079   18EF 7A          		MOV A,D        ; Prepare to test for column 40
2080   18F0 FE 29       		CPI 41         ; Test if beyond column 40
2081   18F2 C2 E7 18    		JNZ nextlcdchar; 4608H Jump if more columns on this line
2082   18F5 1C          		INR E          ; Increment line
2083   18F6 7B          		MOV A,E        ; Prepare to test if last line refreshed
2084   18F7 FE 09       		CPI 9          ; Test if beyond line 8
2085   18F9 C2 E5 18    		JNZ nextlcdrow ; 4606H Jump back to refresh next line if not on line 9
2086   18FC C9          		RET
2087   18FD             
2088   18FD             ; ======================================================
2089   18FD             ; Set the display top line to zero for all LCD controllers
2090   18FD             ; This configures the HW scrolling to start displaying
2091   18FD             ; from the natural ROW 0 (i.e. not scrolled).
2092   18FD             ; ======================================================
2093   18FD             lcdsettopline: ;752BH
2094   18FD CD 05 19    		CALL lcdshortdelay    ; 7533H Enable LCD drivers after short delay
2095   1900 3E 3E       		MVI A,03EH            ; Load command to set top line = 0
2096   1902 D3 FE       		OUT scrins            ; FEH Send the command
2097   1904 C9          		RET
2098   1905             	
2099   1905             ; ======================================================
2100   1905             ; Enable LCD drivers after short delay
2101   1905             ; ======================================================
2102   1905             lcdshortdelay: ;7533H
2103   1905 0E 03       		MVI C,03H            ; Prepare for a short delay 
2104   1907 CD B5 24    		CALL shortdelay      ; 7657H Delay routine - decrement C until zero
2105   190A 21 54 2A    		LXI H,lcdalldrivers  ; 7641H Point to LCD enable bits to enable all 
2106   190D             
2107   190D             ; ======================================================
2108   190D             ; Enable LCD drivers specified by (HL)
2109   190D             ; ======================================================
2110   190D             enablelcd:     ;753BH
2111   190D 7E          		MOV A,M        ; Get Bit pattern for 8 drivers
2112   190E D3 B1       		OUT PIOA       ; B9H OUTput the bit pattern for 8 drivers
2113   1910 23          		INX H          ; Increment to bit pattern for next 2 LCD drivers
2114   1911 DB B2       		IN PIOB        ; BAH Get current value of I/O port with 2 LCD drivers
2115   1913 E6 FC       		ANI 0FCH       ; Mask off LCD driver bit positions
2116   1915 B6          		ORA M          ; OR in selected LCD driver enable bits
2117   1916 D3 B2       		OUT PIOB       ; BAH OUTput selected LCD driver bits
2118   1918 23          		INX H          ; Increment to next set of LCD driver enable bits
2119   1919 C9          		RET
2120   191A             
2121   191A             ; ======================================================
2122   191A             ; Wait for LCD driver to be available
2123   191A             ; ======================================================
2124   191A             lcdbusy:        ;7548H
2125   191A F5          		PUSH PSW       ; Save A on stack
2126   191B             lcdrdbusy:
2127   191B DB FE       		IN scrins      ; FEH Read the LCD driver input port
2128   191D 17          		RAL            ; Rotate the busy bit into the C flag
2129   191E DA 1B 19    		JC lcdrdbusy   ; Jump to keep waiting until not busy
2130   1921 F1          		POP PSW        ; Restore A
2131   1922 C9          		RET
2132   1923             
2133   1923             ; ##########################################################
2134   1923             ; ##########################################################		
2135   1923             ; **********************************************************
2136   1923             ; Test CLK chip
2137   1923             ; Write and read back from the clk chip
2138   1923             ; Check the chip is ticking
2139   1923             ; **********************************************************
2140   1923             clktest:
2141   1923 F3          		DI
2142   1924             		 
2143   1924 3E 1F       		MVI A,01FH
2144   1926 30          		SIM
2145   1927             
2146   1927 CD 6D 19    		CALL initclock  ; Set the clock ticking with defaults
2147   192A             
2148   192A CD C0 24    		CALL clrscreen
2149   192D             
2150   192D 21 3B 25    		LXI H,clkteststr
2151   1930 CD 6E 24    		CALL putstr
2152   1933 CD ED 24     		CALL longdelay  ; Let the LCD Screen
2153   1936             	
2154   1936 3E 80       		MVI A,080H      ; Set Cursor to top line
2155   1938 CD 63 24    		CALL putins   
2156   193B             			
2157   193B CD 79 19    		CALL printclkdata  ; Print the clock data		
2158   193E             
2159   193E CD ED 24    		CALL longdelay  ; Let the clock tick
2160   1941 CD ED 24    		CALL longdelay  ; Let the clock tick
2161   1944 CD ED 24    		CALL longdelay  ; Let the clock tick
2162   1947 CD ED 24    		CALL longdelay  ; Let the clock tick
2163   194A             
2164   194A 3E C0       		MVI A,0C0H         ; Set Cursor to bottom line
2165   194C CD 63 24    		CALL putins	
2166   194F             
2167   194F CD 79 19    		CALL printclkdata ; Print the clock data
2168   1952             
2169   1952             		;MVI A,' '
2170   1952             		;CALL putch
2171   1952             
2172   1952 CD A2 23    		CALL clocklocation
2173   1955             
2174   1955 7E          		MOV A,M
2175   1956             
2176   1956 21 03 25    		LXI H,passstr ; Output PASS string to Diag Screen
2177   1959             
2178   1959 FE 00       		CPI 0H
2179   195B CA 61 19    		JZ clkfail
2180   195E             
2181   195E C3 64 19    		JMP clkdone
2182   1961             
2183   1961             clkfail:		
2184   1961 21 09 25    		LXI H,clkfailstr
2185   1964             clkdone:		
2186   1964 CD 6E 24    		CALL putstr
2187   1967             
2188   1967 CD E1 24    		CALL diagscreenpause ;Delay to allow review
2189   196A             
2190   196A C3 0F 1A    		JMP rst75test
2191   196D             		
2192   196D             ; ======================================================
2193   196D             ; Init the clock chip
2194   196D             ; ======================================================
2195   196D             initclock: ;7E9DH
2196   196D 21 01 1A    		LXI H,clockinitvalues ; 7F01H Initial clock chip register values
2197   1970 CD 9C 19    		CALL updatetime       ; 732AH Update clock chip regs from M
2198   1973 3E 05       		MVI A,05H
2199   1975 CD F0 19    		CALL setclkmode       ; 7383H Set clock chip mode
2200   1978 C9          		RET
2201   1979             		
2202   1979             ; ======================================================
2203   1979             ; Print raw clock data to Test LCD
2204   1979             ; ======================================================
2205   1979             ; m100_rtc Stucture
2206   1979             ; Month/DOW/DayH/DayL/HourH/HourL/MinH/MinL/SecH/SecsL
2207   1979             ; All BCD except Month is Hex
2208   1979             ; 00 - 0F
2209   1979             ; 40 - 4F
2210   1979             printclkdata:
2211   1979 CD A2 23    		CALL clocklocation ; HL points to start or clock data RAM
2212   197C CD 9B 19    		CALL copytime2mem
2213   197F             	       
2214   197F 2B          		DCX H		
2215   1980 7E          		MOV A,M	       ; Get Month
2216   1981 CD 8E 24    		CALL prthex    ; Print as HEX
2217   1984 0E 09       		MVI C,009H	
2218   1986             			
2219   1986             printclkloop:			
2220   1986 2B          		DCX H
2221   1987 7E          		MOV A,M 	;Get Next Value
2222   1988 C6 30       		ADI '0'   ;Convert to ASCII number
2223   198A CD 58 24    		CALL putch	;Print it out		
2224   198D 0D          		DCR C
2225   198E C2 86 19    		JNZ printclkloop
2226   1991 C9          		RET
2227   1992             
2228   1992             ; ======================================================
2229   1992             ; Update in-memory (F923H) clock values
2230   1992             ; ======================================================
2231   1992             updateclock:  ;19A0H
2232   1992 E5          		PUSH H         ; Preserve BASIC string pointer to stack
2233   1993             ;		LXI H,F923H    ; Seconds (ones)
2234   1993 CD A2 23    		CALL clocklocation
2235   1996             
2236   1996             		;DI             ; Disable interrupts during copy
2237   1996 CD 9B 19    		CALL copytime2mem ; 7329H Copy clock chip regs to M
2238   1999             		;EI             ; Re-enable interrupts
2239   1999 E1          		POP H          ; Restore BASIC string pointer
2240   199A C9          		RET
2241   199B             	
2242   199B             ; ======================================================
2243   199B             ; Copy clock chip regs to M pointed to by HL
2244   199B             ; ======================================================
2245   199B             copytime2mem: ;7329H
2246   199B             ;7329H  (F6H) ORI AFH       
2247   199B F6          		.db 0F6H        ; Copy Clock   registers to Memory
2248   199C             updatetime:   ;732AH
2249   199C AF          		XRA A           ; Update clock registers from Memory
2250   199D F5          		PUSH PSW
2251   199E             		;CALL disablebackground ; 765CH Disable Background task & barcode interrupts
2252   199E 3E 03       		MVI A,03H       ; Read Time
2253   19A0 C4 F0 19    		CNZ setclkmode  ; 7383H      ; If A! = 0 Read the time registers 7329H
2254   19A3 3E 01       		MVI A,01H       ; Register Shift mode
2255   19A5 CD F0 19    		CALL setclkmode ; 7383H     ; Set clock chip mode 
2256   19A8             	
2257   19A8 0E 07       		MVI C,07H       
2258   19AA CD B5 24    		CALL shortdelay ; 7657H     ; Delay routine - decrement C until zero
2259   19AD             	
2260   19AD             ;Init the data read
2261   19AD 06 0A       		MVI B,0AH      ; 10 Digits to read
2262   19AF             
2263   19AF             ; Read 4 bits
2264   19AF             next4bits: ;7340H
2265   19AF 0E 04       		MVI C,04H      ; Number of bits
2266   19B1 56          		MOV D,M        ; Move memory to D
2267   19B2             
2268   19B2             nextbits:  ;7343H
2269   19B2 F1          		POP PSW
2270   19B3 F5          		PUSH PSW
2271   19B4 CA C1 19    		JZ readnextbit ; 7352H Read next bit from Clock Chip
2272   19B7 DB B3       		IN PIOC        ; BBH/B3H Get CLK DataIN
2273   19B9 1F          		RAR            ; Put bit into Carry
2274   19BA 7A          		MOV A,D        ; A = D
2275   19BB 1F          		RAR            ; C -> A -> C 
2276   19BC 57          		MOV D,A        ; D = A
2277   19BD AF          		XRA A          ; CLR
2278   19BE C3 CC 19    		JMP readclkbit ; 735DH Next bit
2279   19C1             
2280   19C1             ; ======================================================
2281   19C1             ; Read next bit from Clock Chip
2282   19C1             ; ======================================================
2283   19C1             readnextbit: ;7352H
2284   19C1 7A          		MOV A,D  ; Put CLK Memory to A
2285   19C2 0F          		RRC      ; Get LSB to CY
2286   19C3 57          		MOV D,A  ; Save A to D
2287   19C4 3E 10       		MVI A,10H ;
2288   19C6 1F          		RAR      ; 
2289   19C7 1F          		RAR
2290   19C8 1F          		RAR
2291   19C9 1F          		RAR      ; 0000CY001
2292   19CA D3 B1       		OUT PIOA ; B9H Write PIO CLK bit
2293   19CC             
2294   19CC             ; Read bit
2295   19CC             readclkbit: ;735DH
2296   19CC             ;Clock the data into the Chip
2297   19CC F6 09       		ORI 09H  ; CLK and C0 bits
2298   19CE D3 B1       		OUT PIOA ; B9H  ; PIO A
2299   19D0 E6 F7       		ANI 0F7H  ; Reset CLK bits
2300   19D2 D3 B1       		OUT PIOA ; B9H  ; PIO A
2301   19D4             
2302   19D4 0D          		DCR C    ; Bits -- 
2303   19D5 C2 B2 19    		JNZ nextbits ; 7343H ; 
2304   19D8 7A          		MOV A,D  ; A = D Top 4 bits are the new data
2305   19D9 0F          		RRC      ; 
2306   19DA 0F          		RRC
2307   19DB 0F          		RRC
2308   19DC 0F          		RRC      ; Move Top 4 bits to bottom 4 bis
2309   19DD E6 0F       		ANI 0FH  ; Get the bottom 4 bits
2310   19DF 77          		MOV M,A  ; Store in Memory 
2311   19E0 23          		INX H    ; Next memory locations
2312   19E1 05          		DCR B    ; Number of loops
2313   19E2 C2 AF 19    		JNZ next4bits   ; 7340H
2314   19E5 F1          		POP PSW
2315   19E6 3E 02       		MVI A,02H ; 
2316   19E8 CC F0 19    		CZ setclkmode   ; 7383H     ; Set clock chip mode
2317   19EB AF          		XRA A
2318   19EC CD F0 19    		CALL setclkmode ; 7383H     ; Set clock chip mode
2319   19EF             ; Enable the background tasks
2320   19EF             		;MVI A,09H  ;743CH
2321   19EF             		;SIM
2322   19EF C9          		RET
2323   19F0             
2324   19F0             ; ======================================================
2325   19F0             ; Set clock chip mode
2326   19F0             ; ======================================================
2327   19F0             setclkmode: ;7383H
2328   19F0 D3 B1       		OUT PIOA     ; B9H PIO A
2329   19F2             ;7385H  (3AH) LDA FF45H      ; Contents of port E8H
2330   19F2 E5          		PUSH H
2331   19F3 CD B6 23    		CALL stromlocation
2332   19F6 7E          		MOV A,M 
2333   19F7 F6 04       		ORI 04H      ; CLK Strobe HI
2334   19F9 D3 E8       		OUT CtrlReg  ; E8H 
2335   19FB E6 FB       		ANI 0FBH     ; CLK Strobe LO
2336   19FD D3 E8       		OUT CtrlReg  ; E8H
2337   19FF E1          		POP H
2338   1A00 C9          		RET    
2339   1A01             
2340   1A01             ; ======================================================
2341   1A01             ; Initial clock chip register values
2342   1A01             ; ======================================================
2343   1A01             clockinitvalues: ;7F01H
2344   1A01             ; Order is in reverse:
2345   1A01             ; SecL/SecH/MinL/MinH/HourL/HourH/DayL/DayH/DOW/Month
2346   1A01             ;                  M D Dy Ho Mi Se
2347   1A01             ; Setting below => 1 0 01 11 53 50
2348   1A01 00 05 03 05 	.db 000H,005H,0003H,005H,001H,001H,001H,000H
2348   1A05 01 01 01 00 
2349   1A09 00 01 CF 9D 	.db 000H,001H,0CFH,09DH,0CFH,0DDH	
2349   1A0D CF DD 
2350   1A0F             ;	.db 000H,000H,000H,000H,000H,000H,001H,000H
2351   1A0F             ;	.db 000H,001H,0CFH,09DH,0CFH,0DDH
2352   1A0F             
2353   1A0F             ; ##########################################################
2354   1A0F             ; ##########################################################
2355   1A0F             ; **********************************************************
2356   1A0F             ; Test timer interrupt
2357   1A0F             ; 	Initial set up of the test.
2358   1A0F             ; **********************************************************
2359   1A0F             ; Set interrupt.
2360   1A0F             rst75test:
2361   1A0F CD C0 24    		CALL clrscreen
2362   1A12             
2363   1A12 CD C3 23    		CALL rst75testlocation
2364   1A15 36 00       		MVI M,0
2365   1A17             		
2366   1A17 21 D7 25    		LXI H,rst75teststr
2367   1A1A CD 6E 24    		CALL putstr
2368   1A1D CD ED 24     		CALL longdelay  ; Let the clock tick
2369   1A20              		
2370   1A20 3E 80        		MVI A,080H         ; Set Cursor to top line
2371   1A22 CD 63 24    		CALL putins
2372   1A25 CD 79 19    		CALL printclkdata  ; Print the clock data	
2373   1A28             		
2374   1A28 3E 1B       		MVI A,1BH      ; Prepare to re-enable RST 7.5 interrupt, Set bit 0
2375   1A2A 30          		SIM            ; Re-enable RST 7.5 interrupt
2376   1A2B FB          		EI             ; Re-enable interrupts
2377   1A2C             	
2378   1A2C             		;Approx 6s delay. Clock should tick ~6s & Test location should reach 2x that
2379   1A2C             		
2380   1A2C CD ED 24    		CALL longdelay
2381   1A2F CD ED 24    		CALL longdelay
2382   1A32 CD ED 24    		CALL longdelay
2383   1A35 CD ED 24    		CALL longdelay
2384   1A38 CD ED 24    		CALL longdelay
2385   1A3B CD ED 24    		CALL longdelay
2386   1A3E             
2387   1A3E F3          		DI
2388   1A3F 3E 1F       		MVI A,1FH      ; Load to disble interrupts
2389   1A41 30          		SIM            ; Disable all interrupts
2390   1A42             
2391   1A42 3E C0        		MVI A,0C0H         ; Set Cursor to bottom line
2392   1A44 CD 63 24    		CALL putins
2393   1A47 CD 79 19    		CALL printclkdata  ; Print the clock data
2394   1A4A             			
2395   1A4A 3E 8C       		MVI A,08CH         ; Set cursor to top line
2396   1A4C CD 63 24    		CALL putins
2397   1A4F             			
2398   1A4F             		;Check the operation of the interrupt		
2399   1A4F CD C3 23    		CALL rst75testlocation
2400   1A52 7E          		MOV A,M
2401   1A53 FE 06       		CPI 6   	; Make sure it is ticking should > 6s	
2402   1A55             				
2403   1A55 F5          		PUSH PSW
2404   1A56             		
2405   1A56 1F          		RAR	       ; /2 This should match the difference in seconds
2406   1A57             
2407   1A57 CD 8E 24    		CALL prthex    ; Print the count
2408   1A5A             
2409   1A5A 3E CB        		MVI A,0CBH     ; Set Cursor to bottom line
2410   1A5C CD 63 24    		CALL putins
2411   1A5F             		
2412   1A5F 21 03 25    		LXI H,passstr
2413   1A62             		
2414   1A62 F1          		POP PSW
2415   1A63 D2 69 1A    		JNC rst75testdone
2416   1A66 21 09 25    		LXI H,testfailstr
2417   1A69             
2418   1A69             rst75testdone:
2419   1A69 CD 6E 24    		CALL putstr
2420   1A6C             	
2421   1A6C CD E1 24    		CALL diagscreenpause ;Delay to allow review
2422   1A6F C3 8C 1A    		JMP rst65test
2423   1A72             
2424   1A72             ; ======================================================
2425   1A72             ; RST 7.5 interrupt routine (Background tick)
2426   1A72             ; ======================================================
2427   1A72             timint:
2428   1A72 E5          		PUSH H         ; \
2429   1A73 D5          		PUSH D         ;  \ Save all registers on stack
2430   1A74 C5          		PUSH B         ;  /
2431   1A75 F5          		PUSH PSW       ; /
2432   1A76 3E 1B       		MVI A,01BH     ; Prepare to re-enable RST 7.5 interrupt
2433   1A78 30          		SIM            ; Re-enable RST 7.5 interrupt
2434   1A79 FB          		EI             ; Re-enable interrupts
2435   1A7A             
2436   1A7A CD A9 23    		CALL getcountdown
2437   1A7D 35          		DCR M           ; Decrement the 2Hz count-down counter
2438   1A7E C2 87 1A    		JNZ timintdone  ; 1BAEH Jump if not zero to skip 10Hz background logic
2439   1A81 36 7D       		MVI M,07DH      ; Re-load count-down value for 2 Hz
2440   1A83             
2441   1A83 CD C3 23    		CALL rst75testlocation
2442   1A86 34          		INR M
2443   1A87             
2444   1A87             timintdone:
2445   1A87 F1          		POP PSW     ; \
2446   1A88 C1          		POP B       ;  \ Retrieve all registers on stack
2447   1A89 D1          		POP D       ;  /
2448   1A8A E1          		POP H		; /
2449   1A8B C9          		RET
2450   1A8C             
2451   1A8C             
2452   1A8C             ; ##########################################################
2453   1A8C             ; ##########################################################
2454   1A8C             ; **********************************************************
2455   1A8C             ; Test Serial Port
2456   1A8C             ; Send and receive a character in loopback
2457   1A8C             ; Use interrupt to receive character
2458   1A8C             ; Switch to modem and check serial port does not work.
2459   1A8C             ; **********************************************************
2460   1A8C             rst65test:
2461   1A8C CD C0 24    		CALL clrscreen
2462   1A8F             		
2463   1A8F 21 02 26    		LXI H,rst65teststr
2464   1A92 CD 6E 24    		CALL putstr
2465   1A95             
2466   1A95 3E C0        		MVI A,0C0H     ; Set Cursor to back to start
2467   1A97 CD 63 24    		CALL putins	
2468   1A9A 21 13 26    		LXI H,dsrteststr
2469   1A9D CD 6E 24    		CALL putstr	
2470   1AA0             
2471   1AA0             ; ======================================================		
2472   1AA0             ; Test CTS/RTS/DSR/DTS
2473   1AA0             ;  CTS - PC4 10H, DSR - PC5 20H 4E
2474   1AA0             ;  RTS - PB7 80H, DTR - PB6 40H 46
2475   1AA0             ; ======================================================
2476   1AA0             
2477   1AA0 06 00       		MVI B,0        ; Use B for failure count
2478   1AA2             ;Test setting 1		
2479   1AA2 DB B2       		IN PIOB        ; Read PIOB port
2480   1AA4 F6 C0       		ORI 0C0H       ; Set RTS and DTR = 1
2481   1AA6 D3 B2       		OUT PIOB  
2482   1AA8             		
2483   1AA8             ;RTS Set 1
2484   1AA8 3E C6        		MVI A,0C6H     ; Set Cursor to back to start
2485   1AAA CD 63 24    		CALL putins	
2486   1AAD             
2487   1AAD DB B3       		IN PIOC        ; Read Port C	
2488   1AAF E6 10       		ANI 010H       ; Get CTS-RTS	
2489   1AB1             		
2490   1AB1 CA B9 1A    		JZ rtsonefail
2491   1AB4 3E 31       		MVI A,'1'
2492   1AB6 C3 BD 1A    		JMP rtsonedone
2493   1AB9             rtsonefail:
2494   1AB9 3E 46       		MVI A,'F'
2495   1ABB 06 01       		MVI B,1
2496   1ABD             rtsonedone:		
2497   1ABD CD 58 24    		CALL putch
2498   1AC0             		
2499   1AC0             ;DTR Set 1
2500   1AC0 3E CE        		MVI A,0CEH     ; Set Cursor to back to slot
2501   1AC2 CD 63 24    		CALL putins	
2502   1AC5             		
2503   1AC5 DB B3       		IN PIOC
2504   1AC7 E6 20       		ANI 020H       ; Get DSR-DTR	
2505   1AC9             
2506   1AC9 CA D1 1A    		JZ dtronefail
2507   1ACC 3E 31       		MVI A,'1'
2508   1ACE C3 D5 1A    		JMP dtronedone
2509   1AD1             dtronefail:
2510   1AD1 3E 46       		MVI A,'F'
2511   1AD3 06 01       		MVI B,1
2512   1AD5             dtronedone:
2513   1AD5 CD 58 24    		CALL putch
2514   1AD8             
2515   1AD8 CD ED 24    		CALL longdelay
2516   1ADB CD ED 24     		CALL longdelay
2517   1ADE CD ED 24     		CALL longdelay
2518   1AE1             		
2519   1AE1             ;Test setting 0	
2520   1AE1 DB B2       		IN PIOB        ; Read PIOB port
2521   1AE3 E6 3F       		ANI 03FH       ; Set RTS and DSR = 0
2522   1AE5 D3 B2       		OUT PIOB  
2523   1AE7             		
2524   1AE7             ;RTS Set 0
2525   1AE7 3E C6        		MVI A,0C6H     ; Set Cursor to back to RTS position
2526   1AE9 CD 63 24    		CALL putins	
2527   1AEC             
2528   1AEC DB B3       		IN PIOC        ; Read Port C	
2529   1AEE E6 10       		ANI 010H       ; Get CTS-RTS	
2530   1AF0             		
2531   1AF0 C2 F8 1A    		JNZ rtszerofail
2532   1AF3 3E 30       		MVI A,'0'
2533   1AF5 C3 FC 1A    		JMP rtszerodone
2534   1AF8             rtszerofail:
2535   1AF8 3E 46       		MVI A,'F'
2536   1AFA 06 01       		MVI B,1
2537   1AFC             rtszerodone:
2538   1AFC CD 58 24    		CALL putch
2539   1AFF             		
2540   1AFF             ;DTR Set 0
2541   1AFF 3E CE       		MVI A,0CEH     ; Set Cursor to DTR position	
2542   1B01 CD 63 24    		CALL putins	
2543   1B04             		
2544   1B04 DB B3       		IN PIOC
2545   1B06 E6 20       		ANI 020H       ; Get DTR	
2546   1B08             
2547   1B08 C2 10 1B    		JNZ dtrzerofail
2548   1B0B 3E 30       		MVI A,'0'
2549   1B0D C3 14 1B    		JMP dtrzerodone
2550   1B10             dtrzerofail:
2551   1B10 3E 46       		MVI A,'F'
2552   1B12 06 01       		MVI B,1
2553   1B14             dtrzerodone:
2554   1B14 CD 58 24    		CALL putch	
2555   1B17             
2556   1B17 CD ED 24    		CALL longdelay
2557   1B1A CD ED 24     		CALL longdelay
2558   1B1D CD ED 24     		CALL longdelay
2559   1B20             
2560   1B20 3E 8B       		MVI A,08BH     ; Set Cursor to back to start
2561   1B22 CD 63 24    		CALL putins		
2562   1B25             
2563   1B25 21 03 25    		LXI H,passstr
2564   1B28 78          		MOV A,B
2565   1B29 FE 00       		CPI 0
2566   1B2B CA 31 1B    		JZ rst65dtrdone
2567   1B2E             
2568   1B2E             rst65testfail:		
2569   1B2E 21 09 25    		LXI H,testfailstr
2570   1B31             rst65dtrdone:
2571   1B31 CD 6E 24    		CALL putstr
2572   1B34             		
2573   1B34 3E 80       		MVI A,080H     ; Set Cursor to back to start
2574   1B36 CD 63 24    		CALL putins	
2575   1B39             				
2576   1B39 CD E1 24     		CALL diagscreenpause ;Delay to allow review
2577   1B3C              		
2578   1B3C CD DF 23     		CALL rxbuffer  ; Store received character
2579   1B3F 36 00       		MVI M,0
2580   1B41             
2581   1B41             ; ======================================================		
2582   1B41             ; Configure serial port loopback test
2583   1B41             ; ======================================================		
2584   1B41 21 24 26    		LXI H,loopbackteststr
2585   1B44 CD 6E 24      		CALL putstr
2586   1B47             
2587   1B47 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
2588   1B49 CD 63 24    		CALL putins	  		
2589   1B4C               				
2590   1B4C 21 35 26      		LXI H,loopbackstatstr
2591   1B4F CD 6E 24      		CALL putstr
2592   1B52             
2593   1B52             		; Reset buffer
2594   1B52 AF          		XRA A
2595   1B53 CD DF 23    		CALL rxbuffer  ; Store received character
2596   1B56 77          		MOV M,A
2597   1B57 23          		INX H
2598   1B58 77          		MOV M,A    
2599   1B59             	
2600   1B59             ; Set baud rate 19200 using PIO Timer	
2601   1B59 3E 08       		MVI A,008H
2602   1B5B D3 B4       		OUT PIOT1     ; BCH Timer 0
2603   1B5D 3E 40       		MVI A,040H
2604   1B5F D3 B5       		OUT PIOT2	  ; BDH Timer 1
2605   1B61 3E C3       		MVI A,0C3H
2606   1B63 D3 B0       		OUT PIOCR	  ; B8H Control Reg
2607   1B65             		
2608   1B65             ; Configure UART Chip
2609   1B65             ; B11100: 8bits + No Parity + 1 stop
2610   1B65 3E 1C       		MVI A,01CH
2611   1B67 D3 D8       		OUT UARTmode  ; D8H
2612   1B69             
2613   1B69 3E 1D       		MVI A,01DH     ; Prepare to re-enable RST 6.5 interrupt
2614   1B6B 30          		SIM  
2615   1B6C FB          		EI
2616   1B6D             ; ======================================================
2617   1B6D             ; Begin the loopback test	
2618   1B6D             ; ======================================================
2619   1B6D 06 00       		MVI B,0		
2620   1B6F             		
2621   1B6F             txnewchar:
2622   1B6F             ;TX Byte      ;6E3AH
2623   1B6F 3E C2       		MVI A,0C2H     ; Set Cursor to C gap
2624   1B71 CD 63 24    		CALL putins	 
2625   1B74             		
2626   1B74 DB D8       		IN UARTmode   ; D8H
2627   1B76 CD 8E 24    		CALL prthex
2628   1B79             	
2629   1B79 E6 10       		ANI 010H      ; TX Buffer empty - High buffer empty
2630   1B7B CA BE 1B    		JZ txfail     ; 6E3AH       ; Send character in C to serial port
2631   1B7E             
2632   1B7E 3E C8       		MVI A,0C8H     ; Set Cursor  TX gap
2633   1B80 CD 63 24    		CALL putins			
2634   1B83 78          		MOV A,B
2635   1B84 D3 C8       		OUT UARTsend ; C8H
2636   1B86 CD 8E 24    		CALL prthex
2637   1B89             
2638   1B89 3E CA       		MVI A,0CAH     ; Set Cursor  RX gap
2639   1B8B CD 63 24    		CALL putins		
2640   1B8E             
2641   1B8E             		; Short delay to make sure char is there
2642   1B8E 16 0A       		MVI D,10
2643   1B90             TXdelay:
2644   1B90 0E FF       		MVI C,255   ;
2645   1B92 CD B5 24    		CALL shortdelay ; Wait ~1ms to allow char to be received
2646   1B95 15          		DCR D
2647   1B96 C2 90 1B    		JNZ TXdelay
2648   1B99             
2649   1B99             ;RX Char
2650   1B99             ;RXwait:		
2651   1B99 CD DF 23    		CALL rxbuffer  ; Get Received Char
2652   1B9C 23          		INX H
2653   1B9D 7E          		MOV A,M
2654   1B9E FE BF       		CPI 0BFH
2655   1BA0             		;No character RX failed
2656   1BA0 C2 C4 1B    		JNZ rxfail
2657   1BA3 2B          		DCX H
2658   1BA4              
2659   1BA4 3E CE       		MVI A,0CEH     ; Set Cursor to RX gap
2660   1BA6 CD 63 24    		CALL putins 
2661   1BA9             
2662   1BA9 7E          		MOV A,M
2663   1BAA CD 8E 24    		CALL prthex
2664   1BAD             		
2665   1BAD B8          		CMP B
2666   1BAE C2 C4 1B    		JNZ rxfail
2667   1BB1             		
2668   1BB1             		;Reset Char received
2669   1BB1 23          		INX H
2670   1BB2 36 00       		MVI M,0
2671   1BB4             ;Next Char				
2672   1BB4 05          		DCR B
2673   1BB5 C2 6F 1B    		JNZ txnewchar
2674   1BB8             
2675   1BB8             rst65loopbacksuccess:				
2676   1BB8 21 57 26    		LXI H,loopbackpassstr	
2677   1BBB C3 CD 1B    		JMP rst65testdone
2678   1BBE             
2679   1BBE             txfail:
2680   1BBE 21 68 26    		LXI H,txfailstr
2681   1BC1 C3 CD 1B    		JMP rst65testdone
2682   1BC4             
2683   1BC4             rxfail:
2684   1BC4 21 79 26    		LXI H,rxfailstr
2685   1BC7 C3 CD 1B    		JMP rst65testdone
2686   1BCA             		
2687   1BCA             rst65loopbackfail:
2688   1BCA 21 46 26    		LXI H,loopbackfailstr	
2689   1BCD             			
2690   1BCD             rst65testdone:
2691   1BCD F3          		DI
2692   1BCE 3E 1F       		MVI A,01FH     ; Prepare to re-enable RST 7.5 interrupt
2693   1BD0 30          		SIM            ; Re-enable RST 7.5 interrupt
2694   1BD1             		
2695   1BD1 3E 43               MVI A,43H      ; Stop timer
2696   1BD3 D3 B0       		OUT PIOCR      ; B8H Control Reg
2697   1BD5             
2698   1BD5 3E 80       		MVI A,080H     ; Set Cursor to upper line
2699   1BD7 CD 63 24    		CALL putins			
2700   1BDA CD 6E 24    		CALL putstr
2701   1BDD             waiting:
2702   1BDD CD E1 24    		CALL diagscreenpause ;Delay to allow review
2703   1BE0 C3 F6 1B    		JMP sysbustest
2704   1BE3             
2705   1BE3             ; ==========================================================
2706   1BE3             ; Serial port (6.5) Interrupt Service routine 	
2707   1BE3             ; ==========================================================	
2708   1BE3             serint:
2709   1BE3 E5          		PUSH H         ; \
2710   1BE4 D5          		PUSH D         ;  \ Save all registers on stack
2711   1BE5 C5          		PUSH B         ;  /
2712   1BE6 F5          		PUSH PSW       ; /
2713   1BE7             
2714   1BE7 DB C8       		IN UARTread    ; C8H         ; Serial Register
2715   1BE9             
2716   1BE9 CD DF 23    		CALL rxbuffer  ; Store received character
2717   1BEC 77          		MOV M,A
2718   1BED 23          		INX H
2719   1BEE 36 BF       		MVI M,0BFH     ; Char received 
2720   1BF0             
2721   1BF0 F1          		POP PSW     ; \
2722   1BF1 C1          		POP B       ;  \ Retrieve all registers on stack
2723   1BF2 D1          		POP D       ;  /
2724   1BF3 E1          		POP H		; /
2725   1BF4             		
2726   1BF4 FB          		EI
2727   1BF5 C9          		RET
2728   1BF6             
2729   1BF6             ; ##########################################################
2730   1BF6             ; ##########################################################
2731   1BF6             ; **********************************************************
2732   1BF6             ; Test Sys BUS @ 80H
2733   1BF6             ;  Read and write to the sysbus
2734   1BF6             ; **********************************************************
2735   1BF6             ;Write to the sys bus register
2736   1BF6             sysbustest:
2737   1BF6 F3          		DI 
2738   1BF7 CD C0 24    		CALL clrscreen
2739   1BFA             		
2740   1BFA 21 E0 25    		LXI H, sysbusteststr
2741   1BFD CD 6E 24    		CALL putstr
2742   1C00             		
2743   1C00 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
2744   1C02 CD 63 24    		CALL putins	
2745   1C05             		
2746   1C05 21 F1 25    		LXI H, systeststr
2747   1C08 CD 6E 24    		CALL putstr
2748   1C0B             
2749   1C0B 21 57 29    		LXI H,ramtstdata ; Load the RAM byte test data table
2750   1C0E             sysbus1:
2751   1C0E 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
2752   1C10 CD 63 24    		CALL putins
2753   1C13             
2754   1C13 7E          		MOV A,M   	     ; Get first entry
2755   1C14 FE FE       		CPI 0FEH         ; Check end of table
2756   1C16 CA 43 1C    		JZ sysbustestdone    
2757   1C19             	
2758   1C19 D3 80        		OUT sysreg     ; Send to the Sys bus port
2759   1C1B              		 	
2760   1C1B CD 8E 24     		CALL prthex    ; Print the written character
2761   1C1E             
2762   1C1E 3E C9       		MVI A,0C9H     ; Set Cursor to RD back
2763   1C20 CD 63 24    		CALL putins	
2764   1C23             		 			
2765   1C23 DB 80        		IN sysreg       ; Read from the sys bus port
2766   1C25             
2767   1C25 CD 8E 24     		CALL prthex     ; Print the rd character
2768   1C28             
2769   1C28 BE          		CMP M 
2770   1C29 C2 3D 1C    		JNZ sysbustestfail
2771   1C2C CD ED 24    		CALL longdelay  ; Brief wait
2772   1C2F             
2773   1C2F 23          		INX H           ; Get next RAM test byte
2774   1C30             
2775   1C30             		;Print out the settings
2776   1C30 3E CE       		MVI A,0CEH     ; Set Cursor to Settings slot
2777   1C32 CD 63 24    		CALL putins
2778   1C35             		
2779   1C35 DB 81       		IN setreg
2780   1C37 CD 8E 24    		CALL prthex
2781   1C3A             
2782   1C3A C3 0E 1C    		JMP sysbus1
2783   1C3D             
2784   1C3D             sysbustestfail:
2785   1C3D 21 09 25    		LXI H,sysfailstr
2786   1C40 C3 46 1C    		JMP sysbustestprt
2787   1C43             		
2788   1C43             sysbustestdone:				
2789   1C43 21 03 25    		LXI H,passstr
2790   1C46             		
2791   1C46             sysbustestprt:
2792   1C46 3E 8A       		MVI A,08AH     ; Set Cursor to back to upper line
2793   1C48 CD 63 24    		CALL putins	
2794   1C4B             		
2795   1C4B CD 6E 24    		CALL putstr
2796   1C4E CD E1 24    		CALL diagscreenpause ;Delay to allow review
2797   1C51 C3 54 1C    		JMP lpttest	
2798   1C54             
2799   1C54             ; ##########################################################
2800   1C54             ; ##########################################################	
2801   1C54             ; **********************************************************
2802   1C54             ; Test Printer Port
2803   1C54             ; Write to the LPT port
2804   1C54             ; Check the strobe works
2805   1C54             ; Check busy- and busy works.
2806   1C54             ; **********************************************************
2807   1C54             lpttest:
2808   1C54 CD C0 24    		CALL clrscreen  ; Reset the screen for the new test
2809   1C57             		
2810   1C57 21 8A 26    		LXI H,lptteststr
2811   1C5A CD 6E 24    		CALL putstr
2812   1C5D             
2813   1C5D 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
2814   1C5F CD 63 24    		CALL putins	
2815   1C62             		
2816   1C62 21 93 26    		LXI H, lptloopteststr ;
2817   1C65 CD 6E 24    		CALL putstr
2818   1C68             		
2819   1C68 11 57 29    		LXI D,ramtstdata ; Load the RAM byte test data table
2820   1C6B             lpttest1:
2821   1C6B 3E C3        		MVI A,0C3H     ; Set Cursor to back for new count
2822   1C6D CD 63 24    		CALL putins	
2823   1C70             		
2824   1C70 1A          		LDAX D   	 ; D = Current RAM byte test data
2825   1C71 FE FE       		CPI 0FEH     ; Check end of table
2826   1C73 CA 9E 1C    		JZ lpttestdone1
2827   1C76             
2828   1C76             		;CMA         ; Complement
2829   1C76 D3 B1       		OUT PIOA   	 ; B9H 
2830   1C78 CD 8E 24    		CALL prthex  ; Print the data
2831   1C7B             			
2832   1C7B 4F          		MOV C,A      ; Save A
2833   1C7C             	    
2834   1C7C             		; Pulse the strobe line to write data to register   
2835   1C7C CD B6 23    		CALL stromlocation
2836   1C7F 7E          		MOV A,M
2837   1C80 47          		MOV B,A
2838   1C81 F6 02       		ORI 02H
2839   1C83 D3 E8       		OUT CtrlReg 	 ; E8H
2840   1C85 78          		MOV A,B
2841   1C86 D3 E8       		OUT CtrlReg 	 ; E8H
2842   1C88             
2843   1C88 1A          		LDAX D
2844   1C89             
2845   1C89 3E C9        		MVI A,0C9H     ; Set Cursor to back for new count
2846   1C8B CD 63 24    		CALL putins		
2847   1C8E             
2848   1C8E DB 82       		IN lptreg      ; Read the LPT reg
2849   1C90             		
2850   1C90             		;CMA 
2851   1C90 CD 8E 24    		CALL prthex    ; Print the data
2852   1C93             
2853   1C93 CD ED 24    		CALL longdelay
2854   1C96             
2855   1C96 B9          		CMP C
2856   1C97 C2 48 1D    		JNZ lpttestfail		
2857   1C9A 13          		INX D          ; Get next RAM test byte
2858   1C9B C3 6B 1C    		JMP lpttest1
2859   1C9E             		
2860   1C9E             		
2861   1C9E             lpttestdone1:				
2862   1C9E 3E 8A       		MVI A,08AH     ; Set Cursor to back upper line
2863   1CA0 CD 63 24    		CALL putins	
2864   1CA3             		
2865   1CA3 21 03 25    		LXI H,passstr
2866   1CA6             		
2867   1CA6 CD 6E 24    		CALL putstr
2868   1CA9 CD E1 24    		CALL diagscreenpause ;Delay to allow review
2869   1CAC             		
2870   1CAC             ; *********************************************
2871   1CAC             ; ** Test the two busy lines, busy and busy- **
2872   1CAC             ; *********************************************
2873   1CAC             lpttestnext:
2874   1CAC             ;Check Busy and Busy- lines PC1 Busy- PC2 Busy
2875   1CAC 3E 80        		MVI A,080H     ; Set Cursor to back to start
2876   1CAE CD 63 24    		CALL putins	
2877   1CB1 21 9F 26    		LXI H,nbusyteststr
2878   1CB4 CD 6E 24    		CALL putstr	
2879   1CB7             
2880   1CB7             
2881   1CB7 3E C0        		MVI A,0C0H     ; Set Cursor to back to start
2882   1CB9 CD 63 24    		CALL putins	
2883   1CBC 21 B0 26    		LXI H,busyteststr
2884   1CBF CD 6E 24    		CALL putstr	
2885   1CC2             
2886   1CC2 3E 86        		MVI A,086H     ; Set Cursor to BUSY-
2887   1CC4 CD 63 24    		CALL putins	
2888   1CC7             
2889   1CC7             ; Set up BUSY line tests
2890   1CC7 AF          		XRA A         ; Set Busy and Busy- to 0
2891   1CC8 4F          		MOV C,A
2892   1CC9 D3 B1       		OUT PIOA   	  ; B9H 
2893   1CCB             
2894   1CCB             		; Pulse the strobe line to write data to register   
2895   1CCB CD B6 23    		CALL stromlocation
2896   1CCE 7E          		MOV A,M
2897   1CCF 47          		MOV B,A
2898   1CD0 F6 02       		ORI 02H
2899   1CD2 D3 E8       		OUT CtrlReg 	 ; E8H
2900   1CD4 78          		MOV A,B
2901   1CD5 D3 E8       		OUT CtrlReg 	 ; E8H
2902   1CD7             
2903   1CD7             		; Read the state of the busy lines				
2904   1CD7 DB B3       		IN PIOC        ; Read Port C
2905   1CD9             	
2906   1CD9 47          		MOV B,A
2907   1CDA             			
2908   1CDA E6 02       		ANI 002H       ; Get Busy-	
2909   1CDC CA E6 1C    		JZ nbusyzero
2910   1CDF             		
2911   1CDF 3E 46       		MVI A,'F'
2912   1CE1 0E 01       		MVI C,1
2913   1CE3 C3 E8 1C    		JMP nbusydone
2914   1CE6             		
2915   1CE6             nbusyzero:
2916   1CE6 3E 30       		MVI A,'0'
2917   1CE8             nbusydone:
2918   1CE8 CD 58 24    		CALL putch
2919   1CEB             
2920   1CEB 3E C6        		MVI A,0C6H     ; Set Cursor to BUSY
2921   1CED CD 63 24    		CALL putins	
2922   1CF0             				
2923   1CF0 78          		MOV A,B
2924   1CF1             		
2925   1CF1 E6 04       		ANI 004H       ; Get Busy	
2926   1CF3 CA FD 1C    		JZ busyzero
2927   1CF6 3E 46       		MVI A,'F'
2928   1CF8 0E 01       		MVI C,1
2929   1CFA C3 FF 1C    		JMP busydone
2930   1CFD             busyzero:
2931   1CFD 3E 30       		MVI A,'0'
2932   1CFF             busydone:
2933   1CFF CD 58 24    		CALL putch
2934   1D02             
2935   1D02             
2936   1D02 3E 87        		MVI A,087H     ; Set Cursor to BUSY-
2937   1D04 CD 63 24    		CALL putins	
2938   1D07             		
2939   1D07 3E 03       		MVI A,3       ; Set Busy and Busy- to 1
2940   1D09 D3 B1       		OUT PIOA   	  ; B9H 
2941   1D0B             
2942   1D0B             lpttestbusy:
2943   1D0B             		; Pulse the strobe line to write data to register   
2944   1D0B CD B6 23    		CALL stromlocation
2945   1D0E 7E          		MOV A,M
2946   1D0F 47          		MOV B,A
2947   1D10 F6 02       		ORI 02H
2948   1D12 D3 E8       		OUT CtrlReg 	 ; E8H
2949   1D14 78          		MOV A,B
2950   1D15 D3 E8       		OUT CtrlReg 	 ; E8H
2951   1D17             
2952   1D17             		; Read the state of the busy lines				
2953   1D17 DB B3       		IN PIOC        ; Read Port C
2954   1D19             	
2955   1D19 47          		MOV B,A
2956   1D1A             			
2957   1D1A E6 02       		ANI 002H       ; Get Busy-	
2958   1D1C C2 26 1D    		JNZ nbusyone
2959   1D1F             		
2960   1D1F 3E 46       		MVI A,'F'
2961   1D21 0E 01       		MVI C,1
2962   1D23 C3 28 1D    		JMP nbusydone1
2963   1D26             		
2964   1D26             nbusyone:
2965   1D26 3E 31       		MVI A,'1'
2966   1D28             nbusydone1:
2967   1D28 CD 58 24    		CALL putch
2968   1D2B             
2969   1D2B 3E C7        		MVI A,0C7H     ; Set Cursor to BUSY
2970   1D2D CD 63 24    		CALL putins	
2971   1D30             				
2972   1D30 78          		MOV A,B
2973   1D31             		
2974   1D31 E6 04       		ANI 004H       ; Get Busy	
2975   1D33 C2 3D 1D    		JNZ busyone
2976   1D36 3E 46       		MVI A,'F'
2977   1D38 0E 01       		MVI C,1
2978   1D3A C3 3F 1D    		JMP busydone1
2979   1D3D             		
2980   1D3D             busyone:
2981   1D3D 3E 31       		MVI A,'1'
2982   1D3F             busydone1:
2983   1D3F CD 58 24    		CALL putch
2984   1D42             				
2985   1D42             ;Check C for failures
2986   1D42 79          		MOV A,C
2987   1D43 FE 00       		CPI 0
2988   1D45 CA 4E 1D    		JZ lpttestdone
2989   1D48             
2990   1D48             lpttestfail:  
2991   1D48 21 09 25    		LXI H,lptfailstr
2992   1D4B C3 51 1D    		JMP lptprtdone
2993   1D4E             		
2994   1D4E             lpttestdone:
2995   1D4E 21 03 25    		LXI H,passstr
2996   1D51             
2997   1D51             lptprtdone:
2998   1D51 3E 89       		MVI A,089H     ; Set Cursor to back upper line
2999   1D53 CD 63 24    		CALL putins	
3000   1D56 CD 6E 24    		CALL putstr
3001   1D59             
3002   1D59             		;Set up for the BCR test
3003   1D59 3E 80       		MVI A,080H
3004   1D5B D3 B1       		OUT PIOA
3005   1D5D             
3006   1D5D             		; Pulse the strobe line to write data to register   
3007   1D5D CD B6 23    		CALL stromlocation
3008   1D60 7E          		MOV A,M
3009   1D61 47          		MOV B,A
3010   1D62 F6 02       		ORI 02H
3011   1D64 D3 E8       		OUT CtrlReg 	 ; E8H
3012   1D66 78          		MOV A,B
3013   1D67 D3 E8       		OUT CtrlReg 	 ; E8H
3014   1D69             
3015   1D69 CD E1 24    		CALL diagscreenpause ;Delay to allow review
3016   1D6C C3 6F 1D    		JMP rst55test	
3017   1D6F             
3018   1D6F             ; ##########################################################
3019   1D6F             ; ##########################################################
3020   1D6F             ; **********************************************************
3021   1D6F             ; Test BCR
3022   1D6F             ; Read the port bit
3023   1D6F             ; Check the interrupt works.
3024   1D6F             ; **********************************************************
3025   1D6F             bcrloopcnt .equ 250
3026   1D6F             
3027   1D6F             rst55test:
3028   1D6F CD C0 24    		CALL clrscreen
3029   1D72             		
3030   1D72 21 C1 26    		LXI H,rst55teststr
3031   1D75 CD 6E 24    		CALL putstr
3032   1D78              		;CALL longdelay  ; Let the clock tick
3033   1D78             
3034   1D78 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
3035   1D7A CD 63 24    		CALL putins
3036   1D7D             
3037   1D7D 21 CA 26    		LXI H,rst55loopteststr
3038   1D80 CD 6E 24    		CALL putstr
3039   1D83             
3040   1D83 CD EC 23    		CALL rst55testlocation
3041   1D86 36 00       		MVI M,0        ; Reset button counter
3042   1D88             		 				
3043   1D88 3E 0E       		MVI A,00EH     ; Prepare to re-enable RST 5.5 interrupt, Set bit 0
3044   1D8A 30          		SIM            ; Re-enable RST 5.5 interrupt
3045   1D8B FB          		EI             ; Enable Interrupts
3046   1D8C              
3047   1D8C 06 FA        		MVI B,bcrloopcnt
3048   1D8E             rst55wait:
3049   1D8E             
3050   1D8E 3E 00       		MVI A,000H    ; Set BCR to 0
3051   1D90 D3 B1       		OUT PIOA      ; B9H 
3052   1D92             
3053   1D92             		; Pulse the strobe line to write data to ctrl register   
3054   1D92 CD B6 23    		CALL stromlocation
3055   1D95 7E          		MOV A,M
3056   1D96 4F          		MOV C,A
3057   1D97 F6 02       		ORI 02H
3058   1D99 D3 E8       		OUT CtrlReg 	 ; E8H
3059   1D9B 79          		MOV A,C
3060   1D9C D3 E8       		OUT CtrlReg 	 ; E8H
3061   1D9E             				
3062   1D9E             		; Short delay to let the interrupt happen
3063   1D9E 16 01       		MVI D,1
3064   1DA0             BCRdelay:
3065   1DA0 0E FF       		MVI C,255   ;
3066   1DA2 CD B5 24    		CALL shortdelay ; Wait ~1ms to allow interrupt
3067   1DA5 15          		DCR D
3068   1DA6 C2 A0 1D    		JNZ BCRdelay
3069   1DA9             
3070   1DA9             		; Print the loop count and interrupt counts
3071   1DA9 3E C3        		MVI A,0C3H     ; Set Cursor to loop location
3072   1DAB CD 63 24    		CALL putins
3073   1DAE             
3074   1DAE 78          		MOV A,B
3075   1DAF 3D          		DCR A
3076   1DB0             
3077   1DB0 CD 8E 24    		CALL prthex   ; Print the count
3078   1DB3             
3079   1DB3 3E C9        		MVI A,0C9H     ; Set Interrupt count prt location
3080   1DB5 CD 63 24    		CALL putins
3081   1DB8             
3082   1DB8 CD EC 23    		CALL rst55testlocation
3083   1DBB 7E          		MOV A,M
3084   1DBC             				
3085   1DBC CD 8E 24    		CALL prthex    ; Print the interrupt count
3086   1DBF             				
3087   1DBF 05          		DCR B		
3088   1DC0 C2 8E 1D    		JNZ rst55wait
3089   1DC3             
3090   1DC3             
3091   1DC3             ;Complete test the results
3092   1DC3 F3          		DI              ; Disable interrupts
3093   1DC4 3E 1F       		MVI A,01FH      ; Prepare to disable all interrupts
3094   1DC6 30          		SIM  
3095   1DC7             
3096   1DC7 3E 87       		MVI A,087H     ; Set Cursor to top line
3097   1DC9 CD 63 24    		CALL putins	
3098   1DCC             
3099   1DCC CD EC 23    		CALL rst55testlocation
3100   1DCF 7E          		MOV A,M
3101   1DD0             			
3102   1DD0 21 03 25    		LXI H,passstr
3103   1DD3             		
3104   1DD3 FE FA       		CPI bcrloopcnt				
3105   1DD5 CA DB 1D    		JZ rst55testdone  ; If count == loopcount then Pass
3106   1DD8             		
3107   1DD8 21 09 25    		LXI H,testfailstr ; Else failed
3108   1DDB             		
3109   1DDB             rst55testdone:
3110   1DDB CD 6E 24    		CALL putstr
3111   1DDE CD E1 24    		CALL diagscreenpause ;Delay to allow review
3112   1DE1             
3113   1DE1 C3 14 1E    		JMP stromtest
3114   1DE4             
3115   1DE4             ; ==========================================================
3116   1DE4             ; BCR Interrupt Service routine
3117   1DE4             ; 	BCR PC3. Low level interrupt
3118   1DE4             ; ==========================================================	
3119   1DE4             bcrint:
3120   1DE4 E5          		PUSH H      ; \
3121   1DE5 D5          		PUSH D      ;  \ Save all registers on stack
3122   1DE6 C5          		PUSH B      ;  /
3123   1DE7 F5          		PUSH PSW    ; /
3124   1DE8             
3125   1DE8             
3126   1DE8 3E CE        		MVI A,0CEH     ; Set PIOC to count
3127   1DEA CD 63 24    		CALL putins
3128   1DED             
3129   1DED             		;MVI A,'>'
3130   1DED             		;CALL putch		
3131   1DED             
3132   1DED CD EC 23    		CALL rst55testlocation
3133   1DF0             
3134   1DF0             		;Check the BCR bit is 0
3135   1DF0 DB B3       		IN PIOC        ; Read the PIO PC3 
3136   1DF2 CD 8E 24        	CALL prthex
3137   1DF5 E6 08       		ANI 008H 	   ; Access the BCR Bit it is inverted so should be '1'
3138   1DF7 CA FB 1D    		JZ bcrintdone  ; If not zero do not inc count
3139   1DFA             				
3140   1DFA 34          		INR M				
3141   1DFB             		
3142   1DFB             bcrintdone:
3143   1DFB             		;Clear the interrupt
3144   1DFB 3E 80       		MVI A,080H    ; Set BCR to 1
3145   1DFD D3 B1       		OUT PIOA      ; B9H 
3146   1DFF             
3147   1DFF             		; Pulse the strobe line to write data to register   
3148   1DFF CD B6 23    		CALL stromlocation
3149   1E02 7E          		MOV A,M
3150   1E03 4F          		MOV C,A
3151   1E04 F6 02       		ORI 02H
3152   1E06 D3 E8       		OUT CtrlReg 	 ; E8H
3153   1E08 79          		MOV A,C
3154   1E09 D3 E8       		OUT CtrlReg 	 ; E8H
3155   1E0B             
3156   1E0B F1          		POP PSW     ; \
3157   1E0C C1          		POP B       ;  \ Retrieve all registers on stack
3158   1E0D D1          		POP D       ;  /
3159   1E0E E1          		POP H		; /		
3160   1E0F FB          		EI
3161   1E10 C9          		RET
3162   1E11             		
3163   1E11             ; ##########################################################
3164   1E11             ; ##########################################################
3165   1E11             ; **********************************************************
3166   1E11             ; Test STROM register
3167   1E11             ; The STROM register controls: CLK, LPT, REMOTE, ROM selection
3168   1E11             ;  CLK bit is tested in Clock test
3169   1E11             ;  LPT bit is tested in the LPT test
3170   1E11             ;  REMOTE bit is tested in the cassette test
3171   1E11             ;
3172   1E11             ; STROM bit switches to the OPTROM.  During the switch the
3173   1E11             ; Range 0040-0048H is read to RAM. If the switch works 
3174   1E11             ; the data will be random based on the absence/presence of an
3175   1E11             ; OPTROM.  This location contains 'NO OPTROM' in the main test
3176   1E11             ; ROM.  If 'NO OPTROM' is read then the switch did not work.
3177   1E11             ; Code is run from the RAM in order to read the ROM contents.
3178   1E11             ; **********************************************************
3179   1E11             stromtestpiofail:
3180   1E11 3E 77       		MVI A,077H
3181   1E13 F5          		PUSH PSW
3182   1E14             stromtest:
3183   1E14 CD C0 24    		CALL clrscreen  ; Reset the screen for the new test
3184   1E17             		
3185   1E17 21 BA 27    		LXI H,stromteststr ; 
3186   1E1A CD 6E 24    		CALL putstr	
3187   1E1D             
3188   1E1D 3E C0        		MVI A,0C0H      ; Set Cursor to Bottom line
3189   1E1F CD 63 24    		CALL putins
3190   1E22             		
3191   1E22             ;Find which memory version is being used
3192   1E22 CD 90 23    		CALL stackstart	  ;Which RAM is being used 9, B, D, F (80,A0,C0,E0) 
3193   1E25             		
3194   1E25 7A          		MOV A,D
3195   1E26             
3196   1E26 E6 F0       		ANI 0F0H
3197   1E28             ;RAM3 is the active one	
3198   1E28 FE 90       		CPI 090H
3199   1E2A C2 39 1E    		JNZ ram2loc
3200   1E2D CD 00 91    		CALL optram3
3201   1E30 21 05 28    		LXI H,ram3used
3202   1E33 11 17 91    		LXI D,optram3open
3203   1E36 C3 72 1E    		JMP stromdetect
3204   1E39             		
3205   1E39             ;RAM2 is the active one	
3206   1E39             ram2loc:		
3207   1E39 FE B0       		CPI 0B0H
3208   1E3B C2 4A 1E    		JNZ ram1loc
3209   1E3E CD 00 B1    		CALL optram2
3210   1E41 21 FF 27    		LXI H,ram2used	
3211   1E44 11 17 B1    		LXI D,optram2open
3212   1E47 C3 72 1E    		JMP stromdetect
3213   1E4A             
3214   1E4A             ;RAM1 is the active one	
3215   1E4A             ram1loc:		
3216   1E4A FE D0       		CPI 0D0H
3217   1E4C C2 5B 1E    		JNZ ram0loc
3218   1E4F CD 00 D1    		CALL optram1
3219   1E52 21 F9 27    		LXI H,ram1used	
3220   1E55 11 17 D1    		LXI D,optram1open
3221   1E58 C3 72 1E    		JMP stromdetect
3222   1E5B             
3223   1E5B             ;RAM0 is the active one	
3224   1E5B             ram0loc:	
3225   1E5B FE F0       		CPI 0F0H
3226   1E5D C2 6C 1E    		JNZ ramnotfound
3227   1E60 CD 00 F1    		CALL optram0
3228   1E63 21 F3 27    		LXI H,ram0used	
3229   1E66 11 17 F1    		LXI D,optram0open
3230   1E69 C3 72 1E    		JMP stromdetect	
3231   1E6C             
3232   1E6C             ramnotfound:
3233   1E6C 21 EC 27    		LXI H,stromfailurestr
3234   1E6F C3 97 1E    		JMP stromtestdone
3235   1E72             			
3236   1E72             stromdetect:	
3237   1E72 CD 6E 24    		CALL putstr
3238   1E75 3E 80        		MVI A,080H      ; Set Cursor to top line
3239   1E77 CD 63 24    		CALL putins				
3240   1E7A EB          		XCHG
3241   1E7B 11 40 00    		LXI D,040H
3242   1E7E 06 06       		MVI B,6
3243   1E80             optromloop:
3244   1E80 1A          		LDAX D
3245   1E81 BE          		CMP M
3246   1E82 C2 8E 1E    		JNZ optromfound
3247   1E85 13          		INX D
3248   1E86 23          		INX H
3249   1E87 05          		DCR B
3250   1E88 CA 94 1E    		JZ stromtestfail
3251   1E8B C3 80 1E    		JMP optromloop
3252   1E8E             optromfound:
3253   1E8E 21 CB 27    		LXI H,optromfoundstr
3254   1E91 C3 97 1E    		JMP stromtestdone
3255   1E94             		
3256   1E94             stromtestfail:
3257   1E94 21 DC 27    		LXI H,nooptromstr
3258   1E97             		
3259   1E97             stromtestdone:
3260   1E97 CD 6E 24    		CALL putstr
3261   1E9A CD E1 24    		CALL diagscreenpause ;Delay to allow review
3262   1E9D             
3263   1E9D F1          		POP PSW
3264   1E9E FE 77       		CPI 077H
3265   1EA0 CA FE 20    		JZ castest					
3266   1EA3             
3267   1EA3 C3 A6 1E    		JMP chkkbd
3268   1EA6             
3269   1EA6             
3270   1EA6             ; ##########################################################
3271   1EA6             ; ##########################################################
3272   1EA6             ; **********************************************************
3273   1EA6             ; Test Keyboard
3274   1EA6             ;  Determine if there is a real keyboard or loop back.
3275   1EA6             ;  A real keyboard or loopback maybe used to test the port.
3276   1EA6             ;  The loopback connects PA0-PA7 to KR0-KR7, this allows a 
3277   1EA6             ;  direct validation that the connectors are good and that
3278   1EA6             ;  M13 and M15 are functional.  
3279   1EA6             :  NOTE: PB0 is not tested using the loopback.  It is however
3280   1EA6             ;  exercised in the LCD test.  
3281   1EA6             ;
3282   1EA6             ; **********************************************************
3283   1EA6             ; write 0H to Port A 
3284   1EA6             ; read back the keyboard port. 
3285   1EA6             ;	If keybd = 00H then loopback test 
3286   1EA6             ;	else keyboard test
3287   1EA6             ;   
3288   1EA6             chkkbd:
3289   1EA6 CD C0 24    		CALL clrscreen ; Clear the diag screen for the test
3290   1EA9             		
3291   1EA9 AF          		XRA A  		; Set PIO A port to 0, this sets CSx lines	
3292   1EAA D3 B1       		OUT PIOA	
3293   1EAC             	
3294   1EAC DB E8       		IN readkbd  ; Read the keyboard register
3295   1EAE             				
3296   1EAE FE FF       		CPI 0FFH
3297   1EB0 CA 0B 1F    		JZ kbdtest  ; If not 0 then real Keyboard is present	
3298   1EB3             					; else continue test using loopback
3299   1EB3             
3300   1EB3             ; **********************************************************
3301   1EB3             ; Test keyboard loopback
3302   1EB3             ;  Keyboard ports looped back run through the 256 possible 
3303   1EB3             ;  values check they are valid. 
3304   1EB3             ; **********************************************************
3305   1EB3             loopbacktest:
3306   1EB3 3E 80       		MVI A,080H      ; Set Cursor to top line
3307   1EB5 CD 63 24    		CALL putins
3308   1EB8             		
3309   1EB8 21 88 25    		LXI H,loopbackstrdata ; Indicate this is a loopback test
3310   1EBB CD 6E 24    		CALL putstr
3311   1EBE             	
3312   1EBE             ; ==========================================================
3313   1EBE             ; Test data lines to Keyboard driver KR0-KR7 to PA0-PA7
3314   1EBE             ; ==========================================================
3315   1EBE 21 57 29    		LXI H,loopbacktstdata ; Reuse RAM byte test data table
3316   1EC1             		
3317   1EC1             tstloopback:
3318   1EC1 7E          		MOV A,M          ; H = Current RAM byte test data
3319   1EC2 FE FE       		CPI 0FEH         ; Check end of table
3320   1EC4 CA D3 1E    		JZ tstloopbackok       
3321   1EC7 D3 B1       		OUT PIOA	     ; Write to Keyboard loopback
3322   1EC9 DB E8       		IN readkbd       ; Read Keyboard register
3323   1ECB BE          		CMP M		     ; Compare locations
3324   1ECC C2 DC 1E    		JNZ tstloopbackfail ; Not equal location failed
3325   1ECF 23          		INX H            ; Get next RAM test byte
3326   1ED0 C3 C1 1E    		JMP tstloopback  
3327   1ED3             		
3328   1ED3             tstloopbackok:
3329   1ED3 21 03 25    		LXI H,passstr    ; Output PASS to diag LCD
3330   1ED6 CD 6E 24    		CALL putstr      ; Indicate LCD Data bus pass
3331   1ED9 C3 05 1F    		JMP loopbacktestend
3332   1EDC             			
3333   1EDC             tstloopbackfail:
3334   1EDC F5          		PUSH PSW         ; Save the failing data
3335   1EDD E5          		PUSH H
3336   1EDE             		
3337   1EDE 21 09 25    		LXI H,loopbackfail ; Output FAIL to diag LCD
3338   1EE1 CD 6E 24    		CALL putstr
3339   1EE4             		
3340   1EE4 3E C0       		MVI A,0C0H      ; Set Cursor to next line
3341   1EE6 CD 63 24    		CALL putins
3342   1EE9             		
3343   1EE9 21 94 25    		LXI H,loopbackstrstat ; Output WR RD text to diag LCD
3344   1EEC CD 6E 24    		CALL putstr		
3345   1EEF             
3346   1EEF 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
3347   1EF1 CD 63 24    		CALL putins
3348   1EF4             		
3349   1EF4             		; Print the data written
3350   1EF4 E1          		POP H         ; Retrieve the data written
3351   1EF5 7E          		MOV A,M        						
3352   1EF6 CD 8E 24    		CALL prthex
3353   1EF9             
3354   1EF9 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
3355   1EFB CD 63 24    		CALL putins				
3356   1EFE             		
3357   1EFE             		; Print out Read value
3358   1EFE F1          		POP PSW        ; Retrieve the data read
3359   1EFF CD 8E 24    		CALL prthex
3360   1F02 CD E1 24    		CALL diagscreenpause ;Delay to allow review
3361   1F05             
3362   1F05             loopbacktestend:		
3363   1F05 CD E1 24    		CALL diagscreenpause ;Delay to allow review
3364   1F08 C3 FE 20    		JMP castest
3365   1F0B             
3366   1F0B             ; **********************************************************
3367   1F0B             ; Test Keyboard
3368   1F0B             ;  Real keyboard present use this set of tests.
3369   1F0B             ; **********************************************************
3370   1F0B             ; Press key on keyboard
3371   1F0B             kbdtest:
3372   1F0B             		; CALL clrscreen
3373   1F0B             		
3374   1F0B 21 A5 25    		LXI H,kbdteststr
3375   1F0E CD 6E 24    		CALL putstr
3376   1F11             		
3377   1F11 3E C0        		MVI A,0C0H     ; Set Cursor to back to start lower line
3378   1F13 CD 63 24    		CALL putins	
3379   1F16             
3380   1F16 21 AF 25    		LXI H,keypressedstr ; 0C6H
3381   1F19 CD 6E 24    		CALL putstr
3382   1F1C             
3383   1F1C CD D0 23    		CALL rst75testlocationreset ; Reset the timeout
3384   1F1F             	
3385   1F1F 3E 1B       		MVI A,1BH      ; Prepare to re-enable RST 7.5 interrupt, Set bit 0
3386   1F21 30          		SIM            ; Re-enable RST 7.5 interrupt
3387   1F22 FB          		EI
3388   1F23             			
3389   1F23             kbdtestloop:		
3390   1F23 CD 78 1F    		CALL scankeyboard
3391   1F26             		
3392   1F26             		;Wait for 10s after last key press
3393   1F26 CD D8 23    		CALL rst75testlocationget
3394   1F29 FE 14       		CPI 20   ; See if 10s is up
3395   1F2B DA 31 1F    		JC kbdtestcont
3396   1F2E C3 37 1F    		JMP kbdtestdone
3397   1F31             
3398   1F31             kbdtestcont:		
3399   1F31 CD 4C 1F    		CALL ctrlbreak ; See if CTRL-BREAK pressed
3400   1F34 C2 23 1F    		JNZ kbdtestloop
3401   1F37             		
3402   1F37             kbdtestdone:
3403   1F37 F3          		DI
3404   1F38 3E 1F       		MVI A,1FH      ; Prepare to disable RST 7.5 interrupt, Set bit 0
3405   1F3A 30          		SIM            ; Disable RST 7.5 interrupt
3406   1F3B             				
3407   1F3B 3E C0        		MVI A,0C0H     ; Set Cursor to back to start lower line
3408   1F3D CD 63 24    		CALL putins	
3409   1F40 21 C6 25    		LXI H,kbdtestdonestr
3410   1F43 CD 6E 24    		CALL putstr
3411   1F46             		
3412   1F46 CD E1 24    		CALL diagscreenpause ;Delay to allow review
3413   1F49             
3414   1F49 C3 FE 20    		JMP castest
3415   1F4C             			
3416   1F4C             ; ======================================================
3417   1F4C             ; Check for CTRL-BREAK
3418   1F4C             ;  Z flag set if CTRL-BREAK pressed
3419   1F4C             ; ======================================================
3420   1F4C             ctrlbreak:
3421   1F4C 3E E4       		MVI A,0E4H      ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=serial, Keyscan col 9 enable)
3422   1F4E D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3423   1F50 3E FF       		MVI A,0FFH      ; PIO A configuration (Used for Key scan, LCD data, etc.)
3424   1F52 D3 B1       		OUT PIOA	    ; B9H Initialize PIO chip port A
3425   1F54 DB E8       		IN readkbd      ; E8H  Scan Keyboard to test for CTRL-BREAK (cold boot indicator)
3426   1F56 2F          		CMA
3427   1F57 E6 82       		ANI 082H        ; Mask all but CTRL-BREAK keys
3428   1F59 FE 82       		CPI 082H
3429   1F5B F5          		PUSH PSW
3430   1F5C 3E E5       		MVI A,0E5H      ; Load code to disable key-scan col 9 (for CTRL-BREAK)
3431   1F5E D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3432   1F60 F1          		POP PSW
3433   1F61 C9          		RET
3434   1F62             
3435   1F62             ; ======================================================
3436   1F62             ; Check for SHIFT-BREAK
3437   1F62             ;  Z flag set if CTRL-BREAK pressed
3438   1F62             ; ======================================================
3439   1F62             shiftbreak:
3440   1F62 3E E4       		MVI A,0E4H      ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=serial, Keyscan col 9 enable)
3441   1F64 D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3442   1F66 3E FF       		MVI A,0FFH      ; PIO A configuration (Used for Key scan, LCD data, etc.)
3443   1F68 D3 B1       		OUT PIOA	    ; B9H Initialize PIO chip port A
3444   1F6A DB E8       		IN readkbd      ; E8H  Scan Keyboard to test for SHIFT-BREAK (cold boot indicator)
3445   1F6C 2F          		CMA
3446   1F6D E6 81       		ANI 081H        ; Mask all but SHIFT-BREAK keys
3447   1F6F FE 81       		CPI 081H
3448   1F71 F5          		PUSH PSW
3449   1F72 3E E5       		MVI A,0E5H      ; Load code to disable key-scan col 9 (for SHIFT-BREAK)
3450   1F74 D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3451   1F76 F1          		POP PSW
3452   1F77 C9          		RET
3453   1F78             		
3454   1F78             ; ======================================================
3455   1F78             ; Keyboard scanning management routine
3456   1F78             ; ======================================================
3457   1F78             scankeyboard: ;7055H
3458   1F78             		
3459   1F78             ; ======================================================
3460   1F78             ; Scan the Mod keys
3461   1F78             ; ======================================================	
3462   1F78 CD E9 20    		CALL scancol9  	  ; 72B1H Scan BREAK,CAPS,NUM,CODE,GRAPH,CTRL,SHIFT & set bits in A
3463   1F7B FE 00       		CPI 0
3464   1F7D             		
3465   1F7D C2 D5 1F    		JNZ modkeydecode  ; Print the key type 
3466   1F80             
3467   1F80             ; ======================================================
3468   1F80             ; Scan the regular keyboard
3469   1F80             ; ======================================================	
3470   1F80             ;Scan the keyboard for other keys
3471   1F80 AF          		XRA A          ; Clear A
3472   1F81 D3 B1       		OUT PIOA       ; B9H PORT A
3473   1F83 DB E8       		IN readkbd     ; E8H KBD Check any keys pressed ROWs
3474   1F85 3C          		INR A          ; A++ If FFH set to 0
3475   1F86 3E FF       		MVI A,0FFH     ; Reset A to FFH
3476   1F88 D3 B1       		OUT PIOA       ; B9H 
3477   1F8A C8          		RZ             ; Return no further keys pressed
3478   1F8B             		
3479   1F8B             ;Carry on with key check				
3480   1F8B 3E 7F       		MVI A,07FH      ; Keyboard mask   
3481   1F8D 0E 07       		MVI C,007H      ; Col Count
3482   1F8F             
3483   1F8F CD F9 23    		CALL getkeyboardstorage ; ROW, COL 
3484   1F92             
3485   1F92             keyscanloop:
3486   1F92 47          		MOV B,A	       ; Save A 7FH
3487   1F93 D3 B1       		OUT PIOA       ; B9H PORT A
3488   1F95 DB E8       		IN readkbd     ; E8H KBD
3489   1F97 2F          		CMA            ;     
3490   1F98 FE 00       		CPI 0          ; See if there is a Key in this column
3491   1F9A CA A7 1F    		JZ resetcolscan ;7092H      ; Key different to stored key
3492   1F9D 77          		MOV M,A        ; Save ROW 
3493   1F9E CD 8E 24    		CALL prthex
3494   1FA1 23          		INX H
3495   1FA2 79          		MOV A,C
3496   1FA3 77          		MOV M,A        ; Save COLUMN
3497   1FA4              	
3498   1FA4 C3 B2 1F    		JMP keydecode
3499   1FA7             
3500   1FA7             ;Reset port and DEC count
3501   1FA7             resetcolscan:
3502   1FA7 3E FF       		MVI A,0FFH ; Restore port
3503   1FA9 D3 B1       		OUT PIOA  ; B9H PORT A
3504   1FAB 78          		MOV A,B   ; 
3505   1FAC 0F          		RRC       ; Shift mask to right
3506   1FAD 0D          		DCR C     ; Shift for 7 bits
3507   1FAE F2 92 1F    		JP keyscanloop ;
3508   1FB1 C9          		RET
3509   1FB2             
3510   1FB2             ; ======================================================
3511   1FB2             ; Decode the Normal Keys
3512   1FB2             ; ======================================================
3513   1FB2             keydecode:	
3514   1FB2 7E          		MOV A,M
3515   1FB3             
3516   1FB3 4F          		MOV C,A
3517   1FB4 0C          		INR C
3518   1FB5             
3519   1FB5 AF          		XRA A		
3520   1FB6 16 18       		MVI D,24   ; Char count per row
3521   1FB8             mult24:
3522   1FB8 0D          		DCR C
3523   1FB9 CA C0 1F    		JZ rowdone
3524   1FBC 82          		ADD D
3525   1FBD C3 B8 1F    		JMP mult24
3526   1FC0             rowdone: 
3527   1FC0             		; A=C*24
3528   1FC0 57          		MOV D,A  ; Save A in D
3529   1FC1             
3530   1FC1 2B          		DCX H    ; Get ROW
3531   1FC2 7E          		MOV A,M 
3532   1FC3 CD 03 20    		CALL rowdecode
3533   1FC6 0D          		DCR C
3534   1FC7 CD 0C 20    		CALL mult3  ; COL * 3
3535   1FCA             		
3536   1FCA 82          		ADD D ; A points to string
3537   1FCB              
3538   1FCB 4F          		MOV C,A
3539   1FCC 06 00       		MVI B,00H
3540   1FCE 21 29 20    		LXI H,kbdchars
3541   1FD1 09          		DAD B
3542   1FD2 C3 E7 1F    		JMP printchars
3543   1FD5             		
3544   1FD5             ; ======================================================
3545   1FD5             ; Decode the Mod Keys
3546   1FD5             ; ======================================================
3547   1FD5             modkeydecode:
3548   1FD5 CD 03 20    		CALL rowdecode
3549   1FD8 C8          		RZ                ;If 0 then false alarm
3550   1FD9             		
3551   1FD9 CD 8E 24    		CALL prthex
3552   1FDC             		
3553   1FDC 0D          		DCR C
3554   1FDD CD 0C 20    		CALL mult3  ; COL * 3
3555   1FE0             	 
3556   1FE0             modfound:
3557   1FE0 21 10 20    		LXI H,modkeystr
3558   1FE3 06 00       		MVI B,00H
3559   1FE5 4F          		MOV C,A
3560   1FE6 09          		DAD B
3561   1FE7             
3562   1FE7             ; Print out the 				
3563   1FE7             printchars:
3564   1FE7             		
3565   1FE7 3E 20       		MVI A,' '
3566   1FE9 CD 58 24    		CALL putch
3567   1FEC             
3568   1FEC 7E          		MOV A,M
3569   1FED CD 58 24    		CALL putch
3570   1FF0 23          		INX H 
3571   1FF1 7E          		MOV A,M
3572   1FF2 CD 58 24    		CALL putch
3573   1FF5 23          		INX H 
3574   1FF6 7E          		MOV A,M
3575   1FF7 CD 58 24    		CALL putch
3576   1FFA CD D0 23    		CALL rst75testlocationreset ; Reset the timeout
3577   1FFD             		
3578   1FFD 3E C5       		MVI A,0C5H ;0C5H     ; Set Cursor to start of line for new key
3579   1FFF CD 63 24    		CALL putins
3580   2002             		
3581   2002 C9          		RET
3582   2003             
3583   2003             ; ======================================================		
3584   2003             ; Determine the row number
3585   2003             ; 	A = Raw ROW data
3586   2003             ; 	C = ROW number
3587   2003             ; ======================================================		
3588   2003             rowdecode:
3589   2003 0E 08       		MVI C,08H
3590   2005              
3591   2005             modkeydecodeloop:
3592   2005 07          		RLC
3593   2006 D8          		RC 
3594   2007 0D          		DCR C
3595   2008 C2 05 20    		JNZ modkeydecodeloop
3596   200B C9          		RET
3597   200C             
3598   200C             ; ======================================================		
3599   200C             ; Mult3
3600   200C             ;	A = 3*A
3601   200C             ; ======================================================		
3602   200C             mult3:
3603   200C 79          		MOV A,C
3604   200D 81          		ADD C ; 2A
3605   200E 81          		ADD C ; 3A
3606   200F C9          		RET
3607   2010             ; ======================================================		
3608   2010             ; Key string data
3609   2010             ; ======================================================		
3610   2010             			
3611   2010             modkeystr:
3612   2010 53 48 20 43 		.text "SH CTLGRHCODNUMCAPXXXBRK"
3612   2014 54 4C 47 52 
3612   2018 48 43 4F 44 
3612   201C 4E 55 4D 43 
3612   2020 41 50 58 58 
3612   2024 58 42 52 4B 
3613   2028             ;              012345678901234567890123
3614   2028 00          		.db 0	
3615   2029             			
3616   2029             kbdchars:  ;7BF1H
3617   2029             ;              COL
3618   2029             ;              012345678901234567890123  ROWs
3619   2029 20 5A 20 20 		.text " Z  X  C  V  B  N  M  L "   0  - 0
3619   202D 58 20 20 43 
3619   2031 20 20 56 20 
3619   2035 20 42 20 20 
3619   2039 4E 20 20 4D 
3619   203D 20 20 4C 20 
3620   2041 20 41 20 20 		.text " A  S  D  F  G  H  J  K "   1  - 24
3620   2045 53 20 20 44 
3620   2049 20 20 46 20 
3620   204D 20 47 20 20 
3620   2051 48 20 20 4A 
3620   2055 20 20 4B 20 
3621   2059 20 51 20 20 		.text " Q  W  E  R  T  Y  U  I "   2  - 48
3621   205D 57 20 20 45 
3621   2061 20 20 52 20 
3621   2065 20 54 20 20 
3621   2069 59 20 20 55 
3621   206D 20 20 49 20 
3622   2071 20 4F 20 20 		.text " O  P  [  ;  '  ,  .  / "   3  - 72
3622   2075 50 20 20 5B 
3622   2079 20 20 3B 20 
3622   207D 20 27 20 20 
3622   2081 2C 20 20 2E 
3622   2085 20 20 2F 20 
3623   2089 20 31 20 20 		.text " 1  2  3  4  5  6  7  8 "   4  - 96
3623   208D 32 20 20 33 
3623   2091 20 20 34 20 
3623   2095 20 35 20 20 
3623   2099 36 20 20 37 
3623   209D 20 20 38 20 
3624   20A1 20 39 20 20 		.text " 9  0  -  = LFTRHTUP DWN"   5  - 120
3624   20A5 30 20 20 2D 
3624   20A9 20 20 3D 20 
3624   20AD 4C 46 54 52 
3624   20B1 48 54 55 50 
3624   20B5 20 44 57 4E 
3625   20B9 53 50 43 44 		.text "SPCDELTABESCPASLABPRICR "   6  - 144
3625   20BD 45 4C 54 41 
3625   20C1 42 45 53 43 
3625   20C5 50 41 53 4C 
3625   20C9 41 42 50 52 
3625   20CD 49 43 52 20 
3626   20D1 46 31 20 46 		.text "F1 F2 F3 F4 F5 F6 F7 F8 "   7  - 168 192
3626   20D5 32 20 46 33 
3626   20D9 20 46 34 20 
3626   20DD 46 35 20 46 
3626   20E1 36 20 46 37 
3626   20E5 20 46 38 20 
3627   20E9             			
3628   20E9             ; ======================================================
3629   20E9             ; Scan BREAK,CAPS,NUM,CODE,GRAPH,CTRL,SHIFT & set bits in A
3630   20E9             ; ======================================================
3631   20E9             scancol9: ;72B1H
3632   20E9 3E FF       		MVI A,0FFH
3633   20EB D3 B1       		OUT PIOA	;B9H PIO A
3634   20ED DB B2       		IN PIOB	    ;BAH PIO B
3635   20EF E6 FE       		ANI 0FEH
3636   20F1 47          		MOV B,A
3637   20F2 D3 B2       		OUT PIOB   ;BAH
3638   20F4 DB E8       		IN readkbd ;E8H
3639   20F6 F5          		PUSH PSW
3640   20F7 78          		MOV A,B
3641   20F8 3C          		INR A
3642   20F9 D3 B2       		OUT PIOB 	;BAH
3643   20FB F1          		POP PSW
3644   20FC 2F          		CMA
3645   20FD C9          		RET
3646   20FE             
3647   20FE             ; ##########################################################
3648   20FE             ; ##########################################################
3649   20FE             ; **********************************************************
3650   20FE             ; Test the cassette port
3651   20FE             ; Check remote clicks the relay
3652   20FE             ; Read in data from the port using Audacity, check header 
3653   20FE             ; Write out data to audacity check  
3654   20FE             ; **********************************************************
3655   20FE             castest:
3656   20FE CD C0 24    		CALL clrscreen  ; Reset the screen for the new test
3657   2101             		
3658   2101 21 52 27    		LXI H,castestoffstr ; 11 chars
3659   2104 CD 6E 24    		CALL putstr		
3660   2107             
3661   2107 CD B6 23    		CALL stromlocation
3662   210A 7E          		MOV A,M
3663   210B             		
3664   210B             ;OFF 
3665   210B E6 F1       		ANI 0F1H
3666   210D F6 08       		ORI 08H
3667   210F D3 E8       		OUT CtrlReg 	; E8H	
3668   2111 F5          		PUSH PSW
3669   2112             
3670   2112 3E 80        		MVI A,080H      ; Set Cursor to top line
3671   2114 CD 63 24    		CALL putins	
3672   2117             
3673   2117 CD ED 24    		CALL longdelay  
3674   211A             
3675   211A DB 81       		IN setreg
3676   211C E6 80       		ANI 080H
3677   211E C2 56 21    		JNZ remtestfail
3678   2121             
3679   2121             ;ON		
3680   2121 21 63 27    		LXI H,castestonstr ; 11 chars
3681   2124 CD 6E 24    		CALL putstr	
3682   2127 F1          		POP PSW
3683   2128 F5          		PUSH PSW		
3684   2129 E6 F1       		ANI 0F1H
3685   212B D3 E8       		OUT CtrlReg 	; E8H
3686   212D             
3687   212D 3E 80        		MVI A,080H      ; Set Cursor to top line
3688   212F CD 63 24    		CALL putins
3689   2132             
3690   2132 CD ED 24    		CALL longdelay  ; Let the clock tick
3691   2135             		
3692   2135 DB 81       		IN setreg
3693   2137 E6 80       		ANI 080H
3694   2139 CA 56 21    		JZ remtestfail
3695   213C             
3696   213C             ;OFF 
3697   213C 21 52 27    		LXI H,castestoffstr ; 11 chars
3698   213F CD 6E 24    		CALL putstr	
3699   2142             		
3700   2142 F1          		POP PSW
3701   2143 E6 F1       		ANI 0F1H
3702   2145 F6 08       		ORI 08H
3703   2147 D3 E8       		OUT CtrlReg ; E8H	
3704   2149             	
3705   2149 CD ED 24    		CALL longdelay
3706   214C             
3707   214C DB 81       		IN setreg
3708   214E E6 80       		ANI 080H
3709   2150 C2 56 21    		JNZ remtestfail
3710   2153 C3 5C 21    		JMP remtestpass
3711   2156             
3712   2156             remtestfail:
3713   2156 21 EC 26    		LXI H,castestfailstr
3714   2159 C3 5F 21    		JMP remtestdone
3715   215C             
3716   215C             remtestpass:
3717   215C 21 FD 26    		LXI H,castestpassstr
3718   215F             
3719   215F             remtestdone:		
3720   215F 3E 80       		MVI A,080H      ; Set Cursor to top line
3721   2161 CD 63 24    		CALL putins
3722   2164             		
3723   2164 CD 6E 24    		CALL putstr	
3724   2167             
3725   2167 CD E1 24    		CALL diagscreenpause        ; Delay to allow review	
3726   216A CD D0 23    		CALL rst75testlocationreset ; Reset the timeout
3727   216D             
3728   216D             ; ***************** Outputting
3729   216D             ;Play out header use Grey Lead
3730   216D             		
3731   216D 3E C0       		MVI A,0C0H      ; Set Cursor to bottom line
3732   216F CD 63 24    		CALL putins
3733   2172 21 86 27    		LXI H,castestrecstr
3734   2175 CD 6E 24    		CALL putstr
3735   2178             		
3736   2178 3E 1B       		MVI A,1BH      ; Prepare to re-enable RST 7.5 interrupt, Set bit 0
3737   217A 30          		SIM            ; Re-enable RST 7.5 interrupt
3738   217B FB          		EI		
3739   217C             				
3740   217C             caswaitrec:		
3741   217C CD 62 1F    		CALL shiftbreak       ; See if the cassette tests should be skipped
3742   217F CA B0 21    		JZ castestplayoption
3743   2182             
3744   2182             		;Wait for 10s for option to play
3745   2182 CD D8 23    		CALL rst75testlocationget
3746   2185 FE 1E       		CPI 30   ; See if 10s is up
3747   2187 DA 98 21    		JC caswaitcont
3748   218A             
3749   218A 21 41 27    		LXI H,castestaudiodonestr
3750   218D 3E C0       		MVI A,0C0H        ; Set Cursor to bottom line
3751   218F CD 63 24    		CALL putins
3752   2192 CD 6E 24    		CALL putstr
3753   2195 C3 04 23    		JMP prtdone       ; If timeout then skip cassette tests
3754   2198             		
3755   2198             caswaitcont:
3756   2198 CD 4C 1F    		CALL ctrlbreak	
3757   219B C2 7C 21    		JNZ caswaitrec
3758   219E             		
3759   219E F3          		DI             ; Disable interrupts to write out the header 
3760   219F 3E 1F       		MVI A,1FH      ; Prepare to disable RST 7.5 interrupt, Set bit 0
3761   21A1 30          		SIM  
3762   21A2             	
3763   21A2 3E C0       		MVI A,0C0H      ; Set Cursor to bottomline
3764   21A4 CD 63 24    		CALL putins
3765   21A7 21 A9 27    		LXI H,castestrecstartedstr
3766   21AA CD 6E 24    		CALL putstr
3767   21AD             
3768   21AD CD 0B 22    		CALL caswriteheader 
3769   21B0             
3770   21B0             ; ***************** Listening	
3771   21B0             castestplayoption:
3772   21B0 CD ED 24            CALL longdelay
3773   21B3             	
3774   21B3             waitforkeyrelease: 
3775   21B3 CD 78 1F    		CALL scankeyboard
3776   21B6 C2 B3 21    		JNZ waitforkeyrelease
3777   21B9             	
3778   21B9             ;Play in cassette search for header 
3779   21B9 3E C0       		MVI A,0C0H      ; Set Cursor to bottomline
3780   21BB CD 63 24    		CALL putins
3781   21BE 21 74 27    		LXI H,castestplaystr
3782   21C1 CD 6E 24    		CALL putstr		
3783   21C4             
3784   21C4             
3785   21C4             caswaitplay:
3786   21C4 CD 62 1F    		CALL shiftbreak
3787   21C7 CA 04 23    		JZ prtdone		
3788   21CA CD 4C 1F    		CALL ctrlbreak
3789   21CD C2 C4 21    		JNZ caswaitplay
3790   21D0             
3791   21D0 3E C0       		MVI A,0C0H      ; Set Cursor to bottomline
3792   21D2 CD 63 24    		CALL putins
3793   21D5 21 98 27    		LXI H,castestplaystartedstr
3794   21D8 CD 6E 24    		CALL putstr
3795   21DB             			
3796   21DB CD 48 22    		CALL casreadhdrsync
3797   21DE             		
3798   21DE F5          		PUSH PSW
3799   21DF FE 7F       		CPI 07FH
3800   21E1 C2 EA 21    		JNZ castestfail
3801   21E4             			
3802   21E4 21 1F 27    		LXI H,castestaudiosyncstr
3803   21E7 C3 ED 21    		JMP castestdone
3804   21EA             
3805   21EA             castestfail:		
3806   21EA 21 30 27    		LXI H,castestaudiosyncfailstr
3807   21ED             
3808   21ED             castestdone:
3809   21ED F3          		DI
3810   21EE 3E 1F       		MVI A,1FH      ; Prepare to disable RST 7.5 interrupt, Set bit 0
3811   21F0 30          		SIM  
3812   21F1             				
3813   21F1 3E C0       		MVI A,0C0H      ; Set Cursor to bottom line
3814   21F3 CD 63 24    		CALL putins
3815   21F6             
3816   21F6 CD 6E 24    		CALL putstr
3817   21F9             		
3818   21F9 3E CB       		MVI A,0CBH      ; Set Cursor to mid bottom line
3819   21FB CD 63 24    		CALL putins
3820   21FE F1          		POP PSW
3821   21FF CD 8E 24    		CALL prthex
3822   2202             
3823   2202 CD E1 24    		CALL diagscreenpause ;Delay to allow review
3824   2205 CD E1 24    		CALL diagscreenpause ;Delay to allow review
3825   2208 C3 04 23    		JMP prtdone
3826   220B             		
3827   220B             ; ==========================================================
3828   220B             ; Write Header
3829   220B             ; ==========================================================	
3830   220B             ; ==========================================================
3831   220B             ; Write cassette header and sync byte
3832   220B             ; ==========================================================
3833   220B             caswriteheader: ;6F46H
3834   220B 01 00 02    		LXI B,0200H
3835   220E             caswriteloop:   ;6F49H
3836   220E 3E 55       		MVI A,55H
3837   2210 C5          		PUSH B
3838   2211 CD 23 22    		CALL casswrite   ;6F5EH
3839   2214 C1          		POP B
3840   2215 0B          		DCX B
3841   2216 78          		MOV A,B
3842   2217 B1          		ORA C
3843   2218 C2 0E 22    		JNZ caswriteloop ;6F49H
3844   221B 3E 7F       		MVI A,7FH
3845   221D C3 23 22    		JMP casswrite    ;6F5EH
3846   2220             		
3847   2220             ; ======================================================
3848   2220             ; Write char in A to cassette w/o checksum
3849   2220             ; ======================================================
3850   2220 CD 34 22    		CALL caswritebit81 ;6F71H
3851   2223             casswrite: ;6F5EH
3852   2223 06 08       		MVI B,08H
3853   2225             caswriteloop1: ;6F60H
3854   2225 CD 2D 22    		CALL caswritebit8 ;6F6AH Write bit 8 of A to cassette
3855   2228 05          		DCR B
3856   2229 C2 25 22    		JNZ caswriteloop1  ;6F60H
3857   222C C9          		RET
3858   222D             
3859   222D             ; ======================================================
3860   222D             ; Write bit 8 of A to cassette
3861   222D             ; ======================================================
3862   222D             caswritebit8: ;6F6AH
3863   222D 07          		RLC
3864   222E 11 24 1F    		LXI D,1F24H        ;Cassette frequency cycle count for 1 bit
3865   2231 DA 37 22    		JC caswritebitbit0  ;6F74H
3866   2234             caswritebit81: ;6F71H
3867   2234 11 49 43    		LXI D,4349H        ; Cassette frequency cycle count for 0 bit
3868   2237             caswritebitbit0: ;6F74H
3869   2237 15          		DCR D              ; 
3870   2238 C2 37 22    		JNZ caswritebitbit0 ;6F74H Wait Low
3871   223B 57          		MOV D,A        
3872   223C 3E D0       		MVI A,0D0H
3873   223E 30          		SIM                 ; Write 1
3874   223F             caswritebitbit1: ;6F7CH
3875   223F 1D          		DCR E
3876   2240 C2 3F 22    		JNZ caswritebitbit1 ;6F7CH Wait High
3877   2243 3E 50       		MVI A,50H
3878   2245 30          		SIM                ; Write 0
3879   2246 7A          		MOV A,D
3880   2247 C9          		RET
3881   2248             
3882   2248             ; ==========================================================
3883   2248             ; Read Header
3884   2248             ; ==========================================================	
3885   2248             ; ======================================================
3886   2248             ; Read cassette header and sync byte
3887   2248             ; ======================================================
3888   2248             casreadhdrsync: ;6F85H
3889   2248 06 80       		MVI B,80H        ; Load 128
3890   224A             casreadhdrsync1: ;6F87H
3891   224A CD A3 22    		CALL casreadportbit ;6FDBH Read Cassette port data bit
3892   224D D8          		RC
3893   224E 79          		MOV A,C
3894   224F FE 08       		CPI 08H
3895   2251 DA 48 22    		JC casreadhdrsync   ;6F85H Read cassette header and sync byte
3896   2254 FE 40       		CPI 40H
3897   2256 D2 48 22    		JNC casreadhdrsync  ;6F85H Read cassette header and sync byte
3898   2259 05          		DCR B
3899   225A C2 4A 22    		JNZ casreadhdrsync1 ;6F87H
3900   225D             caschecksb: ;6F9AH
3901   225D             ;***		CALL 729FH     ; Check if SHIFT-BREAK is being pressed
3902   225D             ;		RC
3903   225D 3E 2B        MVI A,'+'
3904   225F 32 01 00     STA lcddata
3905   2262 CD 4C 1F    		CALL ctrlbreak
3906   2265 C8          		RZ
3907   2266 21 00 00    		LXI H,0000H
3908   2269 06 40       		MVI B,40H
3909   226B             casreadhdrsync2: ;6FA3H
3910   226B CD D7 22    		CALL casgetnextbit ;7016H Get tape bit
3911   226E D8          		RC
3912   226F 51          		MOV D,C
3913   2270 CD D7 22    		CALL casgetnextbit ;7016H Get tape bit
3914   2273             casreadhdrsync2a: ;6FABH
3915   2273 D8          		RC
3916   2274 7A          		MOV A,D
3917   2275 91          		SUB C
3918   2276 D2 7B 22    		JNC casreadhdrsync3 ;6FB3H
3919   2279 2F          		CMA
3920   227A 3C          		INR A
3921   227B             casreadhdrsync3: ;6FB3H
3922   227B FE 0B       		CPI 0BH
3923   227D DA 82 22    		JC casreadhdrsync5a - 1 ;6FBAH
3924   2280 24          		INR H
3925   2281 3E 2C       		MVI A,2CH
3926   2283             casreadhdrsync5a:
3927   2283 05          		DCR B
3928   2284 C2 6B 22    		JNZ casreadhdrsync2 ;6FA3H
3929   2287 3E 40       		MVI A,40H
3930   2289 BD          		CMP L
3931   228A CA 91 22    		JZ casreadhdrsync4  ;6FC9H
3932   228D 94          		SUB H
3933   228E C2 5D 22    		JNZ caschecksb      ;6F9AH
3934   2291             casreadhdrsync4: ;6FC9H
3935   2291             ;6FC9H  (32H) STA FF8EH   
3936   2291 CD 14 24    		CALL putcasstorage   ;Cassette port pulse control
3937   2294             	
3938   2294 16 00       		MVI D,00H
3939   2296             casreadhdrsync5: ;6FCEH
3940   2296 CD A3 22    		CALL casreadportbit ;6FDBH Read Cassette port data bit
3941   2299 D8          		RC
3942   229A CD E4 22    		CALL countandpackbits ;7023H Count and pack cassette input bits
3943   229D FE 7F       		CPI 7FH
3944   229F C2 96 22    		JNZ casreadhdrsync5   ;6FCEH
3945   22A2 C9          		RET                   ;Return when syncâd
3946   22A3             		
3947   22A3             ; ======================================================
3948   22A3             ; Read Cassette port data bit
3949   22A3             ; ======================================================
3950   22A3             ;Called here
3951   22A3             casreadportbit: ;6FDBH
3952   22A3 0E 00       		MVI C,00H
3953   22A5             ;6FDDH  (3AH) LDA FF8EH    
3954   22A5 CD 06 24    		CALL getcasstorage   ;Cassette port pulse control
3955   22A8 A7          		ANA A
3956   22A9 CA C2 22    		JZ caswaitzerobit ;6FFAH Go heck for 1 0 1 transition
3957   22AC             casreadport: ;6FE4H
3958   22AC             ;***		CALL 729FH      ; Check if SHIFT-BREAK is being pressed
3959   22AC             ;		RC
3960   22AC CD 4C 1F    		CALL ctrlbreak
3961   22AF C8          		RZ
3962   22B0 20          		RIM
3963   22B1 07          		RLC             ; Move MSB to carry to check SID
3964   22B2 D2 AC 22    		JNC casreadport ;6FE4H If 0 wait to 1
3965   22B5             
3966   22B5             casreadport1: ;6FEDH
3967   22B5             ;Called here
3968   22B5 0C          		INR C          ; C++
3969   22B6             casreadport2: ;6FEEH
3970   22B6 0C          		INR C          ; C++
3971   22B7 CA AC 22    		JZ casreadport ;6FE4H If C=0 try again
3972   22BA 20          		RIM            ; Check SID
3973   22BB 07          		RLC            ; MSB to carry
3974   22BC DA B6 22    		JC casreadport2 ;6FEEH If 1 wait to 0
3975   22BF C3 D5 22    		JMP caswaitnextbit1 ;700DH Once 0 play sound and exit
3976   22C2             
3977   22C2             caswaitzerobit: ; 6FFAH
3978   22C2             ;***		CALL 729FH     ; Check if SHIFT-BREAK is being pressed
3979   22C2             ;		RC
3980   22C2 CD 4C 1F    		CALL ctrlbreak
3981   22C5 C8          		RZ
3982   22C6 20          		RIM	    ; Read SID
3983   22C7 07          		RLC	    ; MSB to carry
3984   22C8 DA C2 22    		JC caswaitzerobit ;6FFAH If 1 wait to 0
3985   22CB             		
3986   22CB             ; Called here
3987   22CB             caswaitnextbit: ;7003H
3988   22CB 0C          		INR C          ; C++ Get the timing on the bit
3989   22CC             caswaitzerobit1: ;7004H
3990   22CC 0C          		INR C          ; C++
3991   22CD CA C2 22    		JZ caswaitzerobit ;6FFAH C=0 wait again not a bit
3992   22D0 20          		RIM            ; Check SID
3993   22D1 07          		RLC	        ; MSB to carry
3994   22D2 D2 CC 22    		JNC caswaitzerobit1 ;7004H      ; If 0 wait to 1
3995   22D5             
3996   22D5             ; Return here
3997   22D5             caswaitnextbit1: ;700DH
3998   22D5             ;700DH  (3AH) LDA FF44H      ; Sound flag
3999   22D5             ;7010H  (A7H) ANA A          ; 
4000   22D5             ;7011H  (CCH) CZ 7676H       ; Click sound port
4001   22D5 AF          		XRA A          ; Clear A
4002   22D6 C9          		RET            ; Return C = bit width
4003   22D7             
4004   22D7             casgetnextbit: ;7016H
4005   22D7 CD CB 22    		CALL caswaitnextbit ;7003H Ignore the next bit wait for 0 1 0 transition
4006   22DA D8          		RC                 ; 
4007   22DB 0E 00       		MVI C,00H          ; C = 0
4008   22DD CD B5 22    		CALL casreadport1   ;6FEDH Wait for bit next bit
4009   22E0 D8          		RC                 ; Check for ctr-break  
4010   22E1 C3 CB 22    		JMP caswaitnextbit ;7003H      ; Get the bit time 
4011   22E4             
4012   22E4             ; ======================================================
4013   22E4             ; Count and pack cassette input bits
4014   22E4             ; ======================================================
4015   22E4             countandpackbits: ;7023H
4016   22E4 79          		MOV A,C
4017   22E5 FE 15       		CPI 15H
4018   22E7 7A          		MOV A,D
4019   22E8 17          		RAL
4020   22E9 57          		MOV D,A
4021   22EA C9          		RET
4022   22EB             		
4023   22EB             ; ======================================================
4024   22EB             ; Read character from cassette w/o checksum
4025   22EB             ; ======================================================
4026   22EB             cascharread: ;702AH
4027   22EB CD A3 22    		CALL casreadportbit      ;6FDBH Read Cassette port data bit
4028   22EE D8          		RC
4029   22EF 79          		MOV A,C
4030   22F0 FE 15       		CPI 15H
4031   22F2 DA EB 22    		JC cascharread        ;702AH Read character from cassette w/o checksum
4032   22F5 06 08       		MVI B,08H
4033   22F7             cascharread1: ;7036H
4034   22F7 CD A3 22    		CALL casreadportbit      ;6FDBH Read Cassette port data bit
4035   22FA D8          		RC
4036   22FB CD E4 22    		CALL countandpackbits ;7023H     ; Count and pack cassette input bits
4037   22FE 05          		DCR B
4038   22FF C2 F7 22    		JNZ cascharread1      ;7036H
4039   2302 AF          		XRA A
4040   2303 C9          		RET
4041   2304             		
4042   2304             ; ##########################################################
4043   2304             ; ##########################################################		
4044   2304             ; **********************************************************
4045   2304             ; Used at the end of the tests and to test power off.
4046   2304             ; prtdone uses RAM so cannot be used until RAM is tested.
4047   2304             ; Prints out the DONE! message
4048   2304             ; The board will power down to test the power
4049   2304             ; down feature is operational.
4050   2304             ; **********************************************************
4051   2304             prtdone:
4052   2304 F3          		DI
4053   2305 CD 63 23    		CALL buzzer
4054   2308 CD C0 24    		CALL clrscreen  ; Reset the screen for the new test
4055   230B             		
4056   230B 21 26 28    		LXI H,testcompletestr ; 11 chars
4057   230E CD 6E 24    		CALL putstr		
4058   2311             
4059   2311 3E C0       		MVI A,0C0H      ; Set Cursor to back for new count
4060   2313 CD 63 24    		CALL putins
4061   2316             
4062   2316 21 37 28    		LXI H,versioninfostr
4063   2319 CD 6E 24    		CALL putstr
4064   231C             
4065   231C 06 0A        		MVI B,10
4066   231E             prtwait:
4067   231E CD ED 24    		CALL longdelay  ; Countdown power off	
4068   2321 05          		DCR B		
4069   2322 C2 1E 23    		JNZ prtwait		
4070   2325             
4071   2325 CD 63 23    		CALL buzzer
4072   2328             		
4073   2328 3E 80        		MVI A,80H       ; Set Cursor to top line
4074   232A CD 63 24    		CALL putins
4075   232D             
4076   232D 21 15 28    		LXI H,goodbye
4077   2330 CD 6E 24    		CALL putstr
4078   2333             		
4079   2333 CD ED 24    		CALL longdelay  ; Let the user see the text
4080   2336             	
4081   2336 3E FF       		MVI A,0FFH
4082   2338 D3 B2       		OUT PIOB ; Should power down the board after 120s
4083   233A C3 60 23    		JMP haltwait	
4084   233D             
4085   233D             ; ##########################################################
4086   233D             ; ##########################################################				
4087   233D             ; **********************************************************
4088   233D             ; Halt the CPU testing done or failure
4089   233D             ; Routine does not rely on RAM so can be used at any point
4090   233D             ; **********************************************************
4091   233D             cpuhlt:
4092   233D 21 01 00    		LXI H,lcddata  ; Load LCD Data location
4093   2340 36 48       		MVI M,'H'      ; Load H to screen
4094   2342             		
4095   2342             		; Wait 40us		
4096   2342 0E 0A       		MVI C,10      ; Counter 10 	
4097   2344             delayH0:
4098   2344 0D          		DCR C          ; Decrement C: 4
4099   2345 C2 44 23    		JNZ delayH0    ; Loop until C = 0: 7 = 11 = 4.45us	
4100   2348             		
4101   2348 36 4C       		MVI M,'L'      ; Load L to screen
4102   234A             		
4103   234A             		; Wait 40us		
4104   234A 0E 0A       		MVI C,10      ; Counter 10 	
4105   234C             delayH1:
4106   234C 0D          		DCR C          ; Decrement C: 4
4107   234D C2 4C 23    		JNZ delayH1    ; Loop until C = 0: 7 = 11 = 4.45us	
4108   2350             
4109   2350 36 54       		MVI M,'T'      ; Load T to screen
4110   2352             		
4111   2352             		; Wait 40us		
4112   2352 0E 0A       		MVI C,10      ; Counter 10 	
4113   2354             delayH2:
4114   2354 0D          		DCR C          ; Decrement C: 4
4115   2355 C2 54 23    		JNZ delayH2    ; Loop until C = 0: 7 = 11 = 4.45us			
4116   2358             
4117   2358 36 21       		MVI M,'!'      ; Load ! to screen
4118   235A             		
4119   235A             		; Wait 40us		
4120   235A 0E 0A       		MVI C,10      ; Counter 10 	
4121   235C             delayH3:
4122   235C 0D          		DCR C          ; Decrement C: 4
4123   235D C2 5C 23    		JNZ delayH3   ; Loop until C = 0: 7 = 11 = 4.45us
4124   2360             		
4125   2360             haltwait:	
4126   2360 C3 60 23    		JMP haltwait	
4127   2363             
4128   2363             ; **********************************************************
4129   2363             ;
4130   2363             ; Utility routines to provide generic functions to main test
4131   2363             ; Routines
4132   2363             ;
4133   2363             ; **********************************************************
4134   2363             ; ======================================================
4135   2363             ; Sound Buzzer
4136   2363             ; ======================================================
4137   2363             buzzer:
4138   2363 06 00       		MVI B,00H           ; Execute loop 255 times
4139   2365             buzzerwait:
4140   2365 CD 72 23    		CALL clicksound     ; Click sound port
4141   2368 0E 50       		MVI C,50H
4142   236A CD B5 24    		CALL shortdelay     ; Delay routine - decrement C until zero
4143   236D 05          		DCR B
4144   236E C2 65 23    		JNZ buzzerwait
4145   2371 C9          		RET
4146   2372             
4147   2372             ; ======================================================
4148   2372             ; Click sound port
4149   2372             ; ======================================================
4150   2372             clicksound:
4151   2372 DB B2       		IN  PIOB	; 0BAH Load current value of I/O port BAH
4152   2374 EE 20       		XRI 020H    ; Toggle the speaker I/O bit
4153   2376 D3 B2       		OUT PIOB    ; 0BAH Write new value to speaker to cause a "click"
4154   2378 C9          		RET
4155   2379             		
4156   2379             ; ======================================================
4157   2379             ; Trap routine power down the board when power off
4158   2379             ; ======================================================
4159   2379             trap:
4160   2379 DB BA       		IN  0BAH        ; Get Current I/O value of BAH
4161   237B F6 10       		ORI 010H        ; Set the PowerDown bit
4162   237D D3 BA       		OUT 0BAH        ; PowerDown.  We will loose power here
4163   237F 76          		HLT		
4164   2380             		
4165   2380             ; **********************************************************
4166   2380             ; Address calculation routines to deal with unknown RAM Locations
4167   2380             ; **********************************************************
4168   2380             countdownmem  .equ 14
4169   2380             strommem      .equ countdownmem + 4
4170   2380             rst75testmem  .equ strommem + 4
4171   2380             rxbuffermem   .equ rst75testmem + 4
4172   2380             rst55testmem  .equ rxbuffermem + 4
4173   2380             keyboardmem   .equ rst55testmem + 4
4174   2380             casstoragemem .equ 12 ; Stored at a different location
4175   2380             
4176   2380             ; ======================================================
4177   2380             ; Get Start of RAM block, using current SP, into DE
4178   2380             ; ======================================================
4179   2380             ramsblockstart:
4180   2380 E5          		PUSH H
4181   2381 F5          		PUSH PSW
4182   2382 21 00 00    		LXI H,0
4183   2385 39          		DAD SP
4184   2386 7C          		MOV A,H
4185   2387 E6 E0       		ANI 0E0H	; Remove the 1000H Addition to SP
4186   2389 67          		MOV H,A
4187   238A 2E 00       		MVI L,0
4188   238C EB          		XCHG
4189   238D F1          		POP PSW
4190   238E E1          		POP H
4191   238F C9          		RET
4192   2390             
4193   2390             ; ======================================================
4194   2390             ; Get Start of SP + 1, into DE
4195   2390             ; Relies on Stack not getting too large and on a 00H boundary
4196   2390             ; ======================================================
4197   2390             stackstart:
4198   2390 E5          		PUSH H
4199   2391 F5          		PUSH PSW
4200   2392 21 00 00    		LXI H,0
4201   2395 39          		DAD SP
4202   2396 7C          		MOV A,H
4203   2397 E6 E0       		ANI 0E0H
4204   2399 F6 10       		ORI 010H
4205   239B 67          		MOV H,A
4206   239C 2E 02       		MVI L,2
4207   239E EB          		XCHG
4208   239F F1          		POP PSW
4209   23A0 E1          		POP H
4210   23A1 C9          		RET
4211   23A2             
4212   23A2             ; ======================================================
4213   23A2             ; Get Clock Storage into HL, SP + 2
4214   23A2             ; ======================================================
4215   23A2             clocklocation:
4216   23A2 D5          		PUSH D
4217   23A3 CD 90 23    		CALL stackstart
4218   23A6 EB          		XCHG
4219   23A7 D1          		POP D	
4220   23A8 C9          		RET
4221   23A9             
4222   23A9             ; ======================================================
4223   23A9             ; Get Countdown Memory location
4224   23A9             ; ======================================================
4225   23A9             getcountdown:
4226   23A9 F5          		PUSH PSW
4227   23AA D5          		PUSH D
4228   23AB CD 90 23    		CALL stackstart  
4229   23AE EB          		XCHG	
4230   23AF D1          		POP D
4231   23B0 7D          		MOV A,L
4232   23B1 C6 0E       		ADI countdownmem ; Add 12 to Stack start
4233   23B3 6F          		MOV L,A
4234   23B4 F1          		POP PSW
4235   23B5 C9          		RET
4236   23B6             
4237   23B6             ; ======================================================
4238   23B6             ; Get STROM memory location
4239   23B6             ; ======================================================
4240   23B6             stromlocation:
4241   23B6 F5          		PUSH PSW
4242   23B7 D5          		PUSH D
4243   23B8 CD 90 23    		CALL stackstart
4244   23BB EB          		XCHG	
4245   23BC D1          		POP D
4246   23BD 7D          		MOV A,L
4247   23BE C6 12       		ADI strommem ; Add 14 to Stack start
4248   23C0 6F          		MOV L,A
4249   23C1 F1          		POP PSW
4250   23C2 C9          		RET
4251   23C3             
4252   23C3             ; ======================================================
4253   23C3             ; Get RST7.5 Test Store
4254   23C3             ; ======================================================
4255   23C3             rst75testlocation:
4256   23C3 F5          		PUSH PSW
4257   23C4 D5          		PUSH D
4258   23C5 CD 90 23    		CALL stackstart
4259   23C8 EB          		XCHG	
4260   23C9 D1          		POP D
4261   23CA 7D          		MOV A,L
4262   23CB C6 16       		ADI rst75testmem ; Add 16 to Stack start
4263   23CD 6F          		MOV L,A
4264   23CE F1          		POP PSW
4265   23CF C9          		RET
4266   23D0             
4267   23D0             ; ======================================================
4268   23D0             ; Reset RST7.5 count Store
4269   23D0             ; ======================================================
4270   23D0             rst75testlocationreset:
4271   23D0 CD C3 23    		CALL rst75testlocation
4272   23D3 F3          		DI
4273   23D4 36 00       		MVI M,0
4274   23D6 FB          		EI
4275   23D7 C9          		RET
4276   23D8             
4277   23D8             ; ======================================================
4278   23D8             ; Retrieve RST7.5 count Store
4279   23D8             ; ======================================================
4280   23D8             rst75testlocationget:
4281   23D8 CD C3 23    		CALL rst75testlocation
4282   23DB F3          		DI
4283   23DC 7E          		MOV A,M
4284   23DD FB          		EI
4285   23DE C9          		RET
4286   23DF             	
4287   23DF             ; ======================================================
4288   23DF             ; Storage for RX Buffer 2-bytes
4289   23DF             ; ======================================================
4290   23DF             rxbuffer:
4291   23DF F5          		PUSH PSW
4292   23E0 D5          		PUSH D
4293   23E1 CD 90 23    		CALL stackstart
4294   23E4 EB          		XCHG	
4295   23E5 D1          		POP D
4296   23E6 7D          		MOV A,L
4297   23E7 C6 1A       		ADI rxbuffermem ; Add 18 to Stack start
4298   23E9 6F          		MOV L,A
4299   23EA F1          		POP PSW
4300   23EB C9          		RET		
4301   23EC             			
4302   23EC             ; ======================================================
4303   23EC             ; Get RST5.5 Test Store
4304   23EC             ; ======================================================
4305   23EC             rst55testlocation:
4306   23EC F5          		PUSH PSW
4307   23ED D5          		PUSH D
4308   23EE CD 90 23    		CALL stackstart
4309   23F1 EB          		XCHG	
4310   23F2 D1          		POP D
4311   23F3 7D          		MOV A,L
4312   23F4 C6 1E       		ADI rst55testmem ; Add 22 to Stack start
4313   23F6 6F          		MOV L,A
4314   23F7 F1          		POP PSW
4315   23F8 C9          		RET		
4316   23F9             	
4317   23F9             ; ======================================================
4318   23F9             ; Keyboard storage area
4319   23F9             ; ======================================================
4320   23F9             getkeyboardstorage:
4321   23F9 F5          		PUSH PSW
4322   23FA D5          		PUSH D
4323   23FB CD 90 23    		CALL stackstart
4324   23FE EB          		XCHG	
4325   23FF D1          		POP D
4326   2400 7D          		MOV A,L
4327   2401 C6 22       		ADI keyboardmem  ; Add 24 to Stack start
4328   2403 6F          		MOV L,A
4329   2404 F1          		POP PSW
4330   2405 C9          		RET		
4331   2406             
4332   2406             ; ======================================================
4333   2406             ; GET Cassette Sync Read storage area
4334   2406             ; ======================================================
4335   2406             getcasstorage:
4336   2406 E5          		PUSH H
4337   2407 21 00 00    		LXI H,0
4338   240A 39          		DAD SP
4339   240B 7C          		MOV A,H
4340   240C E6 E0       		ANI 0E0H
4341   240E 67          		MOV H,A
4342   240F 2E 0C       		MVI L,casstoragemem ; 12
4343   2411 7E          		MOV A,M
4344   2412 E1          		POP H
4345   2413 C9          		RET	
4346   2414             
4347   2414             ; ======================================================
4348   2414             ; PUT Cassette Sync Read storage area
4349   2414             ; ======================================================
4350   2414             putcasstorage:
4351   2414 E5          		PUSH H
4352   2415 F5          		PUSH PSW
4353   2416 21 00 00    		LXI H,0
4354   2419 39          		DAD SP
4355   241A 7C          		MOV A,H
4356   241B E6 E0       		ANI 0E0H
4357   241D 67          		MOV H,A
4358   241E 2E 0C       		MVI L,casstoragemem ; 12
4359   2420 F1          		POP PSW
4360   2421 77          		MOV M,A
4361   2422 E1          		POP H
4362   2423 C9          		RET	
4363   2424             								
4364   2424             ; ======================================================
4365   2424             ; Move B bytes from M to (DE)
4366   2424             ; ======================================================
4367   2424             movemem: ; 2542H
4368   2424 7E          		MOV A,M
4369   2425 12          		STAX D
4370   2426 23          		INX H
4371   2427 13          		INX D
4372   2428 05          		DCR B
4373   2429 C2 24 24    		JNZ movemem	;2542H Move B bytes from M to (DE)
4374   242C C9          		RET
4375   242D             
4376   242D             ; **********************************************************
4377   242D             ; Debug Helper routines
4378   242D             ; **********************************************************
4379   242D             ; ======================================================
4380   242D             ; HEX Dump memory (HL) to Diagnostic LCD on bottom line
4381   242D             ; ======================================================
4382   242D             dumpmem:
4383   242D F5          		PUSH PSW
4384   242E C5          		PUSH B
4385   242F E5          		PUSH H
4386   2430             
4387   2430 3E C0       		MVI A,0C0H
4388   2432 CD 63 24    		CALL putins
4389   2435             
4390   2435 06 08       		MVI B,8
4391   2437             dumploop:
4392   2437 7E          		MOV A,M
4393   2438 CD 8E 24    		CALL prthex
4394   243B 23          		INX H
4395   243C 05          		DCR B
4396   243D C2 37 24    		JNZ dumploop
4397   2440             
4398   2440 E1          		POP H
4399   2441 C1          		POP B
4400   2442 F1          		POP PSW
4401   2443 C9          		RET
4402   2444             
4403   2444             ; ======================================================
4404   2444             ; HEX Dump HL
4405   2444             ; ======================================================
4406   2444             dumpHL:
4407   2444 F5          		PUSH PSW
4408   2445 C5          		PUSH B
4409   2446 E5          		PUSH H
4410   2447             
4411   2447 3E 80       		MVI A,080H
4412   2449 CD 63 24    		CALL putins
4413   244C             
4414   244C 7C          		MOV A,H
4415   244D CD 8E 24    		CALL prthex
4416   2450 7D          		MOV A,L
4417   2451 CD 8E 24    		CALL prthex
4418   2454             
4419   2454 E1          		POP H
4420   2455 C1          		POP B
4421   2456 F1          		POP PSW
4422   2457 C9          		RET
4423   2458             
4424   2458             ; ==========================================================
4425   2458             ; PUT Char on Diagnostic LCD. A contains character
4426   2458             ; ==========================================================
4427   2458             putch: 
4428   2458 C5          		PUSH B           ; Save BC
4429   2459             
4430   2459 32 01 00    		STA lcddata    	 ; Send char to LCD		
4431   245C 0E 10       		MVI C,16         ; Counter 16 	
4432   245E CD B5 24    		CALL shortdelay
4433   2461             		
4434   2461 C1          		POP B	
4435   2462 C9          		RET
4436   2463             		
4437   2463             ; ==========================================================
4438   2463             ; PUT instruction to Diagnostic LCD.  A contains instruction
4439   2463             ; ==========================================================
4440   2463             putins:
4441   2463 C5          		PUSH B           ; Save BC
4442   2464             
4443   2464 32 00 00    		STA lcdins    	 ; Send ins to LCD		
4444   2467 0E 10       		MVI C,16         ; Counter 16 	
4445   2469 CD B5 24    		CALL shortdelay
4446   246C             			
4447   246C C1          		POP B			
4448   246D C9          		RET	
4449   246E             
4450   246E             ; ==========================================================
4451   246E             ; PUT String on Diagnostic LCD HL points to string
4452   246E             ; ==========================================================
4453   246E             putstr:
4454   246E F5          		PUSH PSW
4455   246F             putsloop:
4456   246F 7E          		MOV A,M   	     ; H = Current Character
4457   2470 FE 00       		CPI 0H           ; Check end of table
4458   2472 CA 7C 24    		JZ putstrexit       
4459   2475 CD 58 24    		CALL putch       ; Write to screen
4460   2478 23          		INX H            ; Get next Char
4461   2479 C3 6F 24    		JMP putsloop
4462   247C             		
4463   247C             putstrexit:
4464   247C F1          		POP PSW
4465   247D C9          		RET
4466   247E             
4467   247E             ; ==========================================================
4468   247E             ; Print A as 2 HEX digits
4469   247E             ; ==========================================================
4470   247E             hexchar: 
4471   247E 30 31 32 33 		.text "0123456789ABCDEF"
4471   2482 34 35 36 37 
4471   2486 38 39 41 42 
4471   248A 43 44 45 46 
4472   248E             prthex:
4473   248E F5          		PUSH PSW
4474   248F E5          		PUSH H
4475   2490 C5          		PUSH B
4476   2491 D5          		PUSH D
4477   2492             		
4478   2492 06 00       		MVI B,0
4479   2494             		
4480   2494 21 7E 24    		LXI H,hexchar ; Point to ASCII table
4481   2497 57          		MOV D,A			; Store away A
4482   2498 1F          		RAR 
4483   2499 1F          		RAR
4484   249A 1F          		RAR
4485   249B 1F          		RAR
4486   249C E6 0F       		ANI 00FH        ; Get Upper Digit
4487   249E 4F          		MOV C,A		
4488   249F 09          		DAD B
4489   24A0 7E          		MOV A,M
4490   24A1 CD 58 24    		CALL putch      ; Print upper Digit
4491   24A4             
4492   24A4 21 7E 24    		LXI H,hexchar ; Point to ASCII table		
4493   24A7 7A          		MOV A,D
4494   24A8 E6 0F       		ANI 00FH 		; Get Bottom Digit
4495   24AA 4F          		MOV C,A
4496   24AB 09          		DAD B
4497   24AC 7E          		MOV A,M
4498   24AD CD 58 24    		CALL putch      ; Print Bottom Digit
4499   24B0             		
4500   24B0 D1          		POP D
4501   24B1 C1          		POP B
4502   24B2 E1          		POP H
4503   24B3 F1          		POP PSW
4504   24B4 C9          		RET		
4505   24B5             				
4506   24B5             ; ==========================================================
4507   24B5             ; Short delay.  C = loop counter
4508   24B5             ; ==========================================================
4509   24B5             shortdelay: ;7657H
4510   24B5 0D          		DCR C           ; Decrement C: 4
4511   24B6 C2 B5 24    		JNZ shortdelay  ; Loop until C = 0: 7 = 11 = 4.45us
4512   24B9 C9          		RET
4513   24BA             
4514   24BA             ; ======================================================
4515   24BA             ; Disable Background task & barcode interrupts
4516   24BA             ; ======================================================
4517   24BA             disablebackground: ;765CH
4518   24BA F3          		DI             ; Disable interrupts
4519   24BB 3E 1D       		MVI A,1DH      ; Load SIM mask to disable RST 5.5 & 7.5
4520   24BD 30          		SIM            ; Set new interrupt mask (disable Background & barcode)
4521   24BE FB          		EI             ; Re-enable interrupts
4522   24BF C9          		RET
4523   24C0             
4524   24C0             ; ==========================================================
4525   24C0             ; Clear Diagnostic LCD Screen
4526   24C0             ; ==========================================================
4527   24C0             clrscreen:
4528   24C0             		;LCD CLEAR
4529   24C0 3E 01       		MVI A,lcdclr   ; LCD Clear
4530   24C2 32 00 00    		STA lcdins
4531   24C5             		
4532   24C5             		; Wait 1.64ms		
4533   24C5             		; Wait 800us
4534   24C5 06 02       		MVI B,2
4535   24C7             delayclrs:
4536   24C7 0E C8       		MVI C,200      ; Counter 190 	
4537   24C9             delayclr:
4538   24C9 0D          		DCR C          ; Decrement C: 4
4539   24CA C2 C9 24    		JNZ delayclr    ; Loop until C = 0: 7 = 11 = 4.45us		
4540   24CD             		
4541   24CD 05          		DCR B
4542   24CE C2 C7 24    		JNZ delayclrs	
4543   24D1             
4544   24D1 3E 06       		MVI A,lcdmode
4545   24D3 CD 63 24    		Call putins
4546   24D6             
4547   24D6 C9          		RET
4548   24D7             		
4549   24D7             ; ==========================================================
4550   24D7             ; Wait for 2s	
4551   24D7             ; ==========================================================
4552   24D7             wait2seconds:
4553   24D7 3E 02       		MVI A,2
4554   24D9             wait2secondsloop:
4555   24D9 CD ED 24    		CALL longdelay
4556   24DC 3D          		DCR A
4557   24DD C2 D9 24    		JNZ wait2secondsloop
4558   24E0 C9          		RET
4559   24E1             
4560   24E1             ; ==========================================================
4561   24E1             ; Pause between tests	
4562   24E1             ; ==========================================================
4563   24E1             diagscreenpause:
4564   24E1 C5          		PUSH B
4565   24E2             		
4566   24E2 06 06       		MVI B,6
4567   24E4             		
4568   24E4             diagscreenpauseloop:
4569   24E4 CD ED 24    		CALL longdelay
4570   24E7 05          		DCR B
4571   24E8 C2 E4 24    		JNZ diagscreenpauseloop
4572   24EB             		
4573   24EB C1          		POP B
4574   24EC C9          		RET
4575   24ED             
4576   24ED             ; ==========================================================
4577   24ED             ; Long Delay routine set for 0.5s	
4578   24ED             ; ==========================================================
4579   24ED             longdelay:
4580   24ED F5          		PUSH PSW
4581   24EE C5          		PUSH B
4582   24EF E5          		PUSH H
4583   24F0 06 02       		MVI B,2
4584   24F2             waithalflong:
4585   24F2 21 50 C3    		LXI H,0C350H   ; Load 16-bit delay counter for a 1s Loop
4586   24F5             waithalflooplong:
4587   24F5 2B          		DCX H         ; Decrement delay counter: 6
4588   24F6 7C          		MOV A,H       ; Test count for 0: 4
4589   24F7 B5          		ORA L         ; Test lower byte: 4
4590   24F8 C2 F5 24    		JNZ waithalflooplong  ; wait for zero count: 7 = 21cycles = 8.54us * 65536 = 0.55s
4591   24FB             
4592   24FB 05          		DCR B
4593   24FC C2 F2 24    		JNZ waithalflong
4594   24FF             		
4595   24FF E1          		POP H
4596   2500 C1          		POP B
4597   2501 F1          		POP PSW
4598   2502 C9          		RET
4599   2503             				
4600   2503             ; ==========================================================
4601   2503             ; Diagnostic LCD Strings	
4602   2503             ; ==========================================================
4603   2503             passstr:		
4604   2503 20 50 41 53 		.text " PASS"
4604   2507 53 
4605   2508 00          		.db   0
4606   2509             sysfailstr:
4607   2509             lcdfailstr:
4608   2509             piofailstr:	
4609   2509             clkfailstr:
4610   2509             testfailstr:
4611   2509             lptfailstr:
4612   2509             dongledatafail:
4613   2509             loopbackfail:
4614   2509             ;		.text "0123456789ABCDEF"
4615   2509 20 46 41 49 		.text " FAIL"
4615   250D 4C 
4616   250E 00          		.db   0
4617   250F             testdone:	
4618   250F 20 44 4F 4E 		.text " DONE!"
4618   2513 45 21 
4619   2515 00          		.db   0
4620   2516             ramstr:		
4621   2516 50 49 4F 20 		.text "PIO "
4622   251A 00          		.db   0
4623   251B             piostr:		
4624   251B 50 49 4F 20 		.text "PIO "
4625   251F 00          		.db   0
4626   2520             kbdstr:	
4627   2520 4B 42 44 20 		.text "KBD "
4628   2524 00          		.db   0
4629   2525             lcdstr:	
4630   2525 4C 43 44 20 		.text "LCD "
4631   2529 00          		.db   0
4632   252A             lcdfound:	
4633   252A 20 46 4F 55 		.text " FOUND "
4633   252E 4E 44 20 
4634   2531 00          		.db   0		
4635   2532             lcddone:
4636   2532 20 4C 43 44 		.text " LCD OK?"
4636   2536 20 4F 4B 3F 
4637   253A 00          		.db   0
4638   253B             clkteststr:
4639   253B 43 4C 4B 20 		.text "CLK IC " 
4639   253F 49 43 20 
4640   2542 00          		.db 0
4641   2543             donglestrdata:
4642   2543 44 4E 47 4C 		.text "DNGL-AD7-0 " 
4642   2547 2D 41 44 37 
4642   254B 2D 30 20 
4643   254E 00          		.db 0
4644   254F             donglestrins1:
4645   254F 44 4E 47 4C 		.text "DNGL-C20-27" 
4645   2553 2D 43 32 30 
4645   2557 2D 32 37 
4646   255A 00          		.db 0
4647   255B             donglestrins2:
4648   255B 44 4E 47 4C 		.text "DNGL-C28-29" 
4648   255F 2D 43 32 38 
4648   2563 2D 32 39 
4649   2566 00          		.db 0
4650   2567             dongleins2data:
4651   2567 52 53 54 20 		.text "RST X CS28-29 X"
4651   256B 58 20 43 53 
4651   256F 32 38 2D 32 
4651   2573 39 20 58 
4652   2576 00          		.db 0
4653   2577             donglestrstat:
4654   2577 57 52 20 58 		.text "WR XX RD XX     "
4654   257B 58 20 52 44 
4654   257F 20 58 58 20 
4654   2583 20 20 20 20 
4655   2587 00          		.db 0
4656   2588             loopbackstrdata:
4657   2588 4B 45 59 20 		.text "KEY LOOPED " 
4657   258C 4C 4F 4F 50 
4657   2590 45 44 20 
4658   2593 00          		.db 0
4659   2594             loopbackstrstat:
4660   2594 57 52 20 58 		.text "WR XX RD XX     "
4660   2598 58 20 52 44 
4660   259C 20 58 58 20 
4660   25A0 20 20 20 20 
4661   25A4 00          		.db 0
4662   25A5             kbdteststr:
4663   25A5 4B 45 59 42 		.text "KEYBOARD " 
4663   25A9 4F 41 52 44 
4663   25AD 20 
4664   25AE 00          		.db 0
4665   25AF             keypressedstr:
4666   25AF 4B 45 59 3A 		.text "KEY: " 
4666   25B3 20 
4667   25B4 00          		.db 0
4668   25B5             kbdtestfailstr:
4669   25B5 54 45 53 54 		.text "TEST FAILED     " 
4669   25B9 20 46 41 49 
4669   25BD 4C 45 44 20 
4669   25C1 20 20 20 20 
4670   25C5 00          		.db 0
4671   25C6             kbdtestdonestr:
4672   25C6 54 45 53 54 		.text "TEST COMPLETED  " 
4672   25CA 20 43 4F 4D 
4672   25CE 50 4C 45 54 
4672   25D2 45 44 20 20 
4673   25D6 00          		.db 0
4674   25D7             rst75teststr:
4675   25D7 52 53 54 20 		.text "RST 7.5 "
4675   25DB 37 2E 35 20 
4676   25DF 00          		.db 0
4677   25E0             sysbusteststr:
4678   25E0 53 59 53 20 		.text "SYS BUS         "
4678   25E4 42 55 53 20 
4678   25E8 20 20 20 20 
4678   25EC 20 20 20 20 
4679   25F0 00          		.db 0
4680   25F1             systeststr:
4681   25F1 57 52 20 58 		.text "WR XX RD XX S xx"
4681   25F5 58 20 52 44 
4681   25F9 20 58 58 20 
4681   25FD 53 20 78 78 
4682   2601 00          		.db 0
4683   2602             rst65teststr:
4684   2602 43 54 52 4C 		.text "CTRL BITS       "
4684   2606 20 42 49 54 
4684   260A 53 20 20 20 
4684   260E 20 20 20 20 
4685   2612 00          		.db 0
4686   2613             dsrteststr:
4687   2613 52 54 2F 43 		.text "RT/CT X DS/DT X "
4687   2617 54 20 58 20 
4687   261B 44 53 2F 44 
4687   261F 54 20 58 20 
4688   2623 00          		.db 0
4689   2624             loopbackteststr:
4690   2624 4C 4F 4F 50 		.text "LOOPBACK TEST   "
4690   2628 42 41 43 4B 
4690   262C 20 54 45 53 
4690   2630 54 20 20 20 
4691   2634 00          		.db 0
4692   2635             loopbackstatstr:
4693   2635 43 20 78 78 		.text "C xx TX xx RX xx"
4693   2639 20 54 58 20 
4693   263D 78 78 20 52 
4693   2641 58 20 78 78 
4694   2645 00          		.db 0		
4695   2646             loopbackfailstr:
4696   2646 4C 4F 4F 50 		.text "LOOPBACK FAIL   "
4696   264A 42 41 43 4B 
4696   264E 20 46 41 49 
4696   2652 4C 20 20 20 
4697   2656 00          		.db 0
4698   2657             loopbackpassstr:
4699   2657 4C 4F 4F 50 		.text "LOOPBACK PASS   "
4699   265B 42 41 43 4B 
4699   265F 20 50 41 53 
4699   2663 53 20 20 20 
4700   2667 00          		.db 0
4701   2668             txfailstr: 
4702   2668 54 58 20 46 		.text "TX Failed       "
4702   266C 61 69 6C 65 
4702   2670 64 20 20 20 
4702   2674 20 20 20 20 
4703   2678 00          		.db 0
4704   2679             rxfailstr: 
4705   2679 52 58 20 46 		.text "RX Failed       "
4705   267D 61 69 6C 65 
4705   2681 64 20 20 20 
4705   2685 20 20 20 20 
4706   2689 00          		.db 0
4707   268A             lptteststr:
4708   268A 4C 50 54 20 		.text "LPT I/F "
4708   268E 49 2F 46 20 
4709   2692 00          		.db 0
4710   2693             lptloopteststr:
4711   2693 57 52 20 58 		.text "WR XX RD XX"
4711   2697 58 20 52 44 
4711   269B 20 58 58 
4712   269E 00          		.db 0
4713   269F             nbusyteststr:
4714   269F 42 75 73 79 		.text "Busy- ??        "
4714   26A3 2D 20 3F 3F 
4714   26A7 20 20 20 20 
4714   26AB 20 20 20 20 
4715   26AF 00          		.db 0
4716   26B0             busyteststr:
4717   26B0 42 75 73 79 		.text "Busy  ??        "
4717   26B4 20 20 3F 3F 
4717   26B8 20 20 20 20 
4717   26BC 20 20 20 20 
4718   26C0 00          		.db 0
4719   26C1             rst55teststr:
4720   26C1 42 43 52 20 		.text "BCR I/F "
4720   26C5 49 2F 46 20 
4721   26C9 00          		.db 0
4722   26CA             rst55loopteststr:
4723   26CA 4C 50 20 58 		.text "LP XX CT XX P   "
4723   26CE 58 20 43 54 
4723   26D2 20 58 58 20 
4723   26D6 50 20 20 20 
4724   26DA 00          		.db 0
4725   26DB             casteststr:
4726   26DB 43 41 53 20 		.text "CAS REMOTE      "  ; 11
4726   26DF 52 45 4D 4F 
4726   26E3 54 45 20 20 
4726   26E7 20 20 20 20 
4727   26EB 00          		.db 0
4728   26EC             castestfailstr:
4729   26EC 43 41 53 20 		.text "CAS REMOTE FAIL "  ; 11
4729   26F0 52 45 4D 4F 
4729   26F4 54 45 20 46 
4729   26F8 41 49 4C 20 
4730   26FC 00          		.db 0
4731   26FD             castestpassstr:
4732   26FD 43 41 53 20 		.text "CAS REMOTE PASS "  ; 11
4732   2701 52 45 4D 4F 
4732   2705 54 45 20 50 
4732   2709 41 53 53 20 
4733   270D 00          		.db 0
4734   270E             castestaudiostr:
4735   270E 43 41 53 20 		.text "CAS AUDIO TEST  "  ; 3
4735   2712 41 55 44 49 
4735   2716 4F 20 54 45 
4735   271A 53 54 20 20 
4736   271E 00          		.db 0
4737   271F             castestaudiosyncstr:
4738   271F 53 59 4E 43 		.text "SYNC PASS:      "  ; 3
4738   2723 20 50 41 53 
4738   2727 53 3A 20 20 
4738   272B 20 20 20 20 
4739   272F 00          		.db 0
4740   2730             castestaudiosyncfailstr:
4741   2730 53 59 4E 43 		.text "SYNC FAIL:      "  ; 3
4741   2734 20 46 41 49 
4741   2738 4C 3A 20 20 
4741   273C 20 20 20 20 
4742   2740 00          		.db 0
4743   2741             castestaudiodonestr:
4744   2741 43 41 53 20 		.text "CAS AUDIO DONE  "  ; 3
4744   2745 41 55 44 49 
4744   2749 4F 20 44 4F 
4744   274D 4E 45 20 20 
4745   2751 00          		.db 0
4746   2752             castestoffstr:
4747   2752 43 41 53 20 		.text "CAS REMOTE OFF  "  ; 3
4747   2756 52 45 4D 4F 
4747   275A 54 45 20 4F 
4747   275E 46 46 20 20 
4748   2762 00          		.db 0
4749   2763             castestonstr:
4750   2763 43 41 53 20 		.text "CAS REMOTE ON   "  ; 3
4750   2767 52 45 4D 4F 
4750   276B 54 45 20 4F 
4750   276F 4E 20 20 20 
4751   2773 00          		.db 0
4752   2774             castestplaystr:
4753   2774 50 4C 41 59 		.text "PLAY[BLK] ctl-brk"
4753   2778 5B 42 4C 4B 
4753   277C 5D 20 63 74 
4753   2780 6C 2D 62 72 
4753   2784 6B 
4754   2785 00          		.db 0	
4755   2786             castestrecstr:
4756   2786 52 45 43 20 		.text "REC [GRY] ctl-brk"
4756   278A 5B 47 52 59 
4756   278E 5D 20 63 74 
4756   2792 6C 2D 62 72 
4756   2796 6B 
4757   2797 00          		.db 0
4758   2798             castestplaystartedstr
4759   2798 4C 49 53 54 		.text "LISTENING....   "
4759   279C 45 4E 49 4E 
4759   27A0 47 2E 2E 2E 
4759   27A4 2E 20 20 20 
4760   27A8 00          		.db 0
4761   27A9             castestrecstartedstr
4762   27A9 53 45 4E 44 		.text "SENDING AUDIO   "
4762   27AD 49 4E 47 20 
4762   27B1 41 55 44 49 
4762   27B5 4F 20 20 20 
4763   27B9 00          		.db 0
4764   27BA             stromteststr:
4765   27BA 53 57 49 54 		.text "SWITCH 2 OPTROM "
4765   27BE 43 48 20 32 
4765   27C2 20 4F 50 54 
4765   27C6 52 4F 4D 20 
4766   27CA 00          		.db 0
4767   27CB             optromfoundstr:
4768   27CB 4F 50 54 52 		.text "OPTROM SWITCHED "
4768   27CF 4F 4D 20 53 
4768   27D3 57 49 54 43 
4768   27D7 48 45 44 20 
4769   27DB 00          		.db 0
4770   27DC             nooptromstr:
4771   27DC 4F 50 54 52 		.text "OPTROM FAILED  "
4771   27E0 4F 4D 20 46 
4771   27E4 41 49 4C 45 
4771   27E8 44 20 20 
4772   27EB 00          		.db 0
4773   27EC             stromfailurestr:
4774   27EC 4E 4F 20 52 		.text "NO RAM"
4774   27F0 41 4D 
4775   27F2 00          		.db 0
4776   27F3             ram0used:
4777   27F3 52 41 4D 20 		.text "RAM 0"
4777   27F7 30 
4778   27F8 00          		.db 0
4779   27F9             ram1used:
4780   27F9 52 41 4D 20 		.text "RAM 1"
4780   27FD 31 
4781   27FE 00          		.db 0
4782   27FF             ram2used:
4783   27FF 52 41 4D 20 		.text "RAM 2"
4783   2803 32 
4784   2804 00          		.db 0
4785   2805             ram3used:
4786   2805 52 41 4D 20 		.text "RAM 3"
4786   2809 33 
4787   280A 00          		.db 0	
4788   280B             settingsvalue:
4789   280B 53 45 54 54 		.text "SETTINGS:"
4789   280F 49 4E 47 53 
4789   2813 3A 
4790   2814 00          		.db 0
4791   2815             goodbye:
4792   2815 50 6F 77 65 		.text "Powering off!   "
4792   2819 72 69 6E 67 
4792   281D 20 6F 66 66 
4792   2821 21 20 20 20 
4793   2825 00          		.db 0	
4794   2826             testcompletestr:
4795   2826 57 41 49 54 		.text "WAIT FOR PWR OFF"
4795   282A 20 46 4F 52 
4795   282E 20 50 57 52 
4795   2832 20 4F 46 46 
4796   2836 00          		.db 0
4797   2837             versioninfostr:
4798   2837 28 63 29 20 		.text "(c) 12/2020 "
4798   283B 31 32 2F 32 
4798   283F 30 32 30 20 
4799   2843 56 33 2E 32 		VERSION
4800   2847 00          		.db 0
4801   2848             ;		.text "0123456789ABCDEF"
4802   2848             ; ==========================================================
4803   2848             ; Main LCD Screen Strings for MT100/102
4804   2848             ; 	The following strings are used for the LCD test
4805   2848             ; ==========================================================
4806   2848             tstline0:
4807   2848 4D 6F 64 65 		.text "Model 100 Test ROM Version "
4807   284C 6C 20 31 30 
4807   2850 30 20 54 65 
4807   2854 73 74 20 52 
4807   2858 4F 4D 20 56 
4807   285C 65 72 73 69 
4807   2860 6F 6E 20 
4808   2863 56 33 2E 32 		VERSION
4809   2867 20 44 65 63 		.text " Dec 2020*"
4809   286B 20 32 30 32 
4809   286F 30 2A 
4810   2871 00          		.db 0
4811   2872             tstline1:	
4812   2872 21 22 23 24 		.text "!\"#$%&'()*+`-./01234567890:;<=>?@"
4812   2876 25 26 27 28 
4812   287A 29 2A 2B 60 
4812   287E 2D 2E 2F 30 
4812   2882 31 32 33 34 
4812   2886 35 36 37 38 
4812   288A 39 30 3A 3B 
4812   288E 3C 3D 3E 3F 
4812   2892 40 
4813   2893 00          		.db   0	
4814   2894             tstline2:	
4815   2894 41 42 43 44 		.text "ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`"
4815   2898 45 46 47 48 
4815   289C 49 4A 4B 4C 
4815   28A0 4D 4E 4F 50 
4815   28A4 51 52 53 54 
4815   28A8 55 56 57 58 
4815   28AC 59 5A 5B 5D 
4815   28B0 5E 5F 60 
4816   28B3 00          		.db   0	
4817   28B4             tstline3:	
4818   28B4 61 62 63 64 		.text "abcdefghijklmnopqrstuvwxyz{|}~"
4818   28B8 65 66 67 68 
4818   28BC 69 6A 6B 6C 
4818   28C0 6D 6E 6F 70 
4818   28C4 71 72 73 74 
4818   28C8 75 76 77 78 
4818   28CC 79 7A 7B 7C 
4818   28D0 7D 7E 
4819   28D2 00          		.db   0	
4820   28D3             tstline4:
4821   28D3 80 81 82 83 		.db 080H,081H,082H,083H,084H,085H,086H,087H
4821   28D7 84 85 86 87 
4822   28DB 88 89 8A 8B 		.db 088H,089H,08Ah,08BH,08CH,08DH,08EH,08FH		
4822   28DF 8C 8D 8E 8F 
4823   28E3 90 98 92 93 		.db 090H,098H,092h,093H,094H,095H,096H,097H
4823   28E7 94 95 96 97 
4824   28EB 98 99 9A 9B 		.db 098H,099H,09Ah,09BH,09CH,09DH,09EH,09FH
4824   28EF 9C 9D 9E 9F 
4825   28F3 00          		.db 0
4826   28F4             tstline5:
4827   28F4 A0 A1 A2 A3 		.db 0A0H,0A1H,0A2H,0A3H,0A4H,0A5H,0A6H,0A7H
4827   28F8 A4 A5 A6 A7 
4828   28FC A8 A9 AA AB 		.db 0A8H,0A9H,0AAH,0ABH,0ACH,0ADH,0AEH,0AFH		
4828   2900 AC AD AE AF 
4829   2904 B0 B1 B2 B3 		.db 0B0H,0B1H,0B2H,0B3H,0B4H,0B5H,0B6H,0B7H
4829   2908 B4 B5 B6 B7 
4830   290C B8 B9 BA BB 		.db 0B8H,0B9H,0BAH,0BBH,0BCH,0BDH,0BEH,0BFH
4830   2910 BC BD BE BF 
4831   2914 00          		.db 0
4832   2915             tstline6:
4833   2915 C0 C1 C2 C3 		.db 0C0H,0C1H,0C2H,0C3H,0C4H,0C5H,0C6H,0C7H
4833   2919 C4 C5 C6 C7 
4834   291D C8 C9 CA CB 		.db 0C8H,0C9H,0CAH,0CBH,0CCH,0CDH,0CEH,0CFH		
4834   2921 CC CD CE CF 
4835   2925 D0 D1 D2 D3 		.db 0D0H,0D1H,0D2H,0D3H,0D4H,0D5H,0D6H,0D7H
4835   2929 D4 D5 D6 D7 
4836   292D D8 D9 DA DB 		.db 0D8H,0D9H,0DAH,0DBH,0DCH,0DDH,0DEH,0CFH
4836   2931 DC DD DE CF 
4837   2935 00          		.db 0
4838   2936             
4839   2936             tstline7:
4840   2936 E0 E1 E2 E3 		.db 0E0H,0E1H,0E2H,0E3H,0E4H,0E5H,0E6H,0E7H
4840   293A E4 E5 E6 E7 
4841   293E E8 E9 EA EB 		.db 0E8H,0E9H,0EAH,0EBH,0ECH,0EDH,0EEH,0EFH		
4841   2942 EC ED EE EF 
4842   2946 F0 F1 F2 F3 		.db 0F0H,0F1H,0F2H,0F3H,0F4H,0F5H,0F6H,0F7H
4842   294A F4 F5 F6 F7 
4843   294E F8 F9 FA FB 		.db 0F8H,0F9H,0FAH,0FBH,0FCH,0FDH,0FEH,0FFH
4843   2952 FC FD FE FF 
4844   2956 00          		.db 0
4845   2957             
4846   2957             ; ==========================================================
4847   2957             ; RAM TEST Data used buy the RAM and all port tests
4848   2957             ; ==========================================================
4849   2957             piotstdata:
4850   2957             ramtstdata:
4851   2957             dongletestdata:
4852   2957             loopbacktstdata:
4853   2957 00          		.db 000H
4854   2958 01          		.db	001H
4855   2959 02          		.db	002H
4856   295A 04          		.db	004H
4857   295B 08          		.db	008H
4858   295C 10          		.db	010H
4859   295D 20          		.db	020H
4860   295E 40          		.db	040H
4861   295F 80          		.db	080H
4862   2960 FF          		.db	0FFH
4863   2961 55          		.db	055H
4864   2962 AA          		.db	0AAH
4865   2963             eotramtests: .equ 0FEH
4866   2963 FE          		.db	0FEH  ; End of table marker
4867   2964             
4868   2964             ; ======================================================
4869   2964             ; 8155 PIO chip bit patterns for LCD drivers
4870   2964             ; ======================================================
4871   2964             ; 8155 PIO chip bit patterns for Upper LCD drivers
4872   2964             lcduppercs: ;7551H
4873   2964 01 00 00 01 	.db   001H,000H,000H,001H,000H,006H,001H,000H
4873   2968 00 06 01 00 
4874   296C 0C 01 00 12 	.db   00CH,001H,000H,012H,001H,000H,018H,001H
4874   2970 01 00 18 01 
4875   2974 00 1E 01 00 	.db   000H,01EH,001H,000H,024H,001H,000H,02AH
4875   2978 24 01 00 2A 
4876   297C 01 00 30 02 	.db   001H,000H,030H,002H,000H,004H,002H,000H
4876   2980 00 04 02 00 
4877   2984 0A 02 00 10 	.db   00AH,002H,000H,010H,002H,000H,016H,002H
4877   2988 02 00 16 02 
4878   298C 00 1C 02 00 	.db   000H,01CH,002H,000H,022H,002H,000H,028H
4878   2990 22 02 00 28 
4879   2994 02 00 2E 04 	.db   002H,000H,02EH,004H,000H,002H,004H,000H
4879   2998 00 02 04 00 
4880   299C 08 04 00 0E 	.db   008H,004H,000H,00EH,004H,000H,014H,004H
4880   29A0 04 00 14 04 
4881   29A4 00 1A 04 00 	.db   000H,01AH,004H,000H,020H,004H,000H,026H
4881   29A8 20 04 00 26 
4882   29AC 04 00 2C 08 	.db   004H,000H,02CH,008H,000H,000H,008H,000H
4882   29B0 00 00 08 00 
4883   29B4 06 08 00 0C 	.db   006H,008H,000H,00CH,008H,000H,012H,008H
4883   29B8 08 00 12 08 
4884   29BC 00 18 08 00 	.db   000H,018H,008H,000H,01EH,008H,000H,024H
4884   29C0 1E 08 00 24 
4885   29C4 08 00 2A 08 	.db   008H,000H,02AH,008H,000H,030H,010H,000H
4885   29C8 00 30 10 00 
4886   29CC 04 10 00 0A 	.db   004H,010H,000H,00AH,010H,000H,010H,010H
4886   29D0 10 00 10 10 
4887   29D4 00 16 10 00 	.db   000H,016H,010H,000H,01CH,010H,000H,022H
4887   29D8 1C 10 00 22 
4888   29DC             ; 8155 PIO chip bit patterns for lower LCD drivers
4889   29DC             lcdlowercs: ;75C9H
4890   29DC 20 00 00 20 	.db   020H,000H,000H,020H,000H,006H,020H,000H
4890   29E0 00 06 20 00 
4891   29E4 0C 20 00 12 	.db   00CH,020H,000H,012H,020H,000H,018H,020H
4891   29E8 20 00 18 20 
4892   29EC 00 1E 20 00 	.db   000H,01EH,020H,000H,024H,020H,000H,02AH
4892   29F0 24 20 00 2A 
4893   29F4 20 00 30 40 	.db   020H,000H,030H,040H,000H,004H,040H,000H
4893   29F8 00 04 40 00 
4894   29FC 0A 40 00 10 	.db   00AH,040H,000H,010H,040H,000H,016H,040H
4894   2A00 40 00 16 40 
4895   2A04 00 1C 40 00 	.db   000H,01CH,040H,000H,022H,040H,000H,028H
4895   2A08 22 40 00 28 
4896   2A0C 40 00 2E 80 	.db   040H,000H,02EH,080H,000H,002H,080H,000H
4896   2A10 00 02 80 00 
4897   2A14 08 80 00 0E 	.db   008H,080H,000H,00EH,080H,000H,014H,080H
4897   2A18 80 00 14 80 
4898   2A1C 00 1A 80 00 	.db   000H,01AH,080H,000H,020H,080H,000H,026H
4898   2A20 20 80 00 26 
4899   2A24 80 00 2C 00 	.db   080H,000H,02CH,000H,001H,000H,000H,001H
4899   2A28 01 00 00 01 
4900   2A2C 06 00 01 0C 	.db   006H,000H,001H,00CH,000H,001H,012H,000H
4900   2A30 00 01 12 00 
4901   2A34 01 18 00 01 	.db   001H,018H,000H,001H,01EH,000H,001H,024H
4901   2A38 1E 00 01 24 
4902   2A3C 00 01 2A 00 	.db   000H,001H,02AH,000H,001H,030H,000H,002H
4902   2A40 01 30 00 02 
4903   2A44 04 00 02 0A 	.db   004H,000H,002H,00AH,000H,002H,010H,000H
4903   2A48 00 02 10 00 
4904   2A4C 02 16 00 02 	.db   002H,016H,000H,002H,01CH,000H,002H,022H
4904   2A50 1C 00 02 22 
4905   2A54             
4906   2A54             ; ======================================================
4907   2A54             ; 8155 PIO chip bit patterns to enable all LCD drivers
4908   2A54             ; ======================================================
4909   2A54             lcdalldrivers: ;7641H
4910   2A54 FF 03       		.db   0FFH,003H
4911   2A56             
4912   2A56             ; ======================================================
4913   2A56             ; 8155 PIO chip bit patterns for LCD drivers
4914   2A56             ; ======================================================
4915   2A56             lcdchipbitpatterns: ;7643H
4916   2A56 01 00 02 00 		.db 001H,000H,002H,000H,004H,000H,008H,000H
4916   2A5A 04 00 08 00 
4917   2A5E 10 00 20 00 		.db 010H,000H,020H,000H,040H,000H,080H,000H
4917   2A62 40 00 80 00 
4918   2A66 00 01 00 02 		.db 000H,001H,000H,002H
4919   2A6A             	
4920   2A6A             ; ======================================================
4921   2A6A             ; DVI command table - sent to external DVI
4922   2A6A             ; ======================================================
4923   2A6A             dvicmds: ;770BH
4924   2A6A 02 01 00 00 		.db 002H,001H,000H,000H,001H,00H
4924   2A6E 01 00 
4925   2A70             ; ======================================================
4926   2A70             ; LCD char generator format table (20H-7FH)
4927   2A70             ; ======================================================
4928   2A70             lcdasciitable: ;7711H
4929   2A70 00 00 00 00 		.db   000H,000H,000H,000H,000H,000H,000H,04FH
4929   2A74 00 00 00 4F 
4930   2A78 00 00 00 07 		.db   000H,000H,000H,007H,000H,007H,000H,014H
4930   2A7C 00 07 00 14 
4931   2A80 7F 14 7F 14 		.db   07FH,014H,07FH,014H,024H,02AH,07FH,02AH
4931   2A84 24 2A 7F 2A 
4932   2A88 12 23 13 08 		.db   012H,023H,013H,008H,064H,062H,03AH,045H
4932   2A8C 64 62 3A 45 
4933   2A90 4A 30 28 00 		.db   04AH,030H,028H,000H,004H,002H,001H,000H
4933   2A94 04 02 01 00 
4934   2A98 00 1C 22 41 		.db   000H,01CH,022H,041H,000H,000H,041H,022H
4934   2A9C 00 00 41 22 
4935   2AA0 1C 00 22 14 		.db   01CH,000H,022H,014H,07FH,014H,022H,008H
4935   2AA4 7F 14 22 08 
4936   2AA8 08 3E 08 08 		.db   008H,03EH,008H,008H,000H,080H,060H,000H
4936   2AAC 00 80 60 00 
4937   2AB0 00 08 08 08 		.db   000H,008H,008H,008H,008H,008H,000H,060H
4937   2AB4 08 08 00 60 
4938   2AB8 60 00 00 40 		.db   060H,000H,000H,040H,020H,010H,008H,004H
4938   2ABC 20 10 08 04 
4939   2AC0 3E 51 49 45 		.db   03EH,051H,049H,045H,03EH,044H,042H,07FH
4939   2AC4 3E 44 42 7F 
4940   2AC8 40 40 62 51 		.db   040H,040H,062H,051H,051H,049H,046H,022H
4940   2ACC 51 49 46 22 
4941   2AD0 41 49 49 36 		.db   041H,049H,049H,036H,018H,014H,012H,07FH
4941   2AD4 18 14 12 7F 
4942   2AD8 10 47 45 45 		.db   010H,047H,045H,045H,029H,011H,03CH,04AH
4942   2ADC 29 11 3C 4A 
4943   2AE0 49 49 30 03 		.db   049H,049H,030H,003H,001H,079H,005H,003H
4943   2AE4 01 79 05 03 
4944   2AE8 36 49 49 49 		.db   036H,049H,049H,049H,036H,006H,049H,049H
4944   2AEC 36 06 49 49 
4945   2AF0 29 1E 00 00 		.db   029H,01EH,000H,000H,024H,000H,000H,000H
4945   2AF4 24 00 00 00 
4946   2AF8 80 64 00 00 		.db   080H,064H,000H,000H,008H,01CH,036H,063H
4946   2AFC 08 1C 36 63 
4947   2B00 41 14 14 14 		.db   041H,014H,014H,014H,014H,014H,041H,063H
4947   2B04 14 14 41 63 
4948   2B08 36 1C 08 02 		.db   036H,01CH,008H,002H,001H,051H,009H,006H
4948   2B0C 01 51 09 06 
4949   2B10 32 49 79 41 		.db   032H,049H,079H,041H,03EH,07CH,012H,011H
4949   2B14 3E 7C 12 11 
4950   2B18 12 7C 41 7F 		.db   012H,07CH,041H,07FH,049H,049H,036H,01CH
4950   2B1C 49 49 36 1C 
4951   2B20 22 41 41 22 		.db   022H,041H,041H,022H,041H,07FH,041H,022H
4951   2B24 41 7F 41 22 
4952   2B28 1C 7F 49 49 		.db   01CH,07FH,049H,049H,049H,041H,07FH,009H
4952   2B2C 49 41 7F 09 
4953   2B30 09 09 01 3E 		.db   009H,009H,001H,03EH,041H,049H,049H,03AH
4953   2B34 41 49 49 3A 
4954   2B38 7F 08 08 08 		.db   07FH,008H,008H,008H,07FH,000H,041H,07FH
4954   2B3C 7F 00 41 7F 
4955   2B40 41 00 30 40 		.db   041H,000H,030H,040H,041H,03FH,001H,07FH
4955   2B44 41 3F 01 7F 
4956   2B48 08 14 22 41 		.db   008H,014H,022H,041H,07FH,040H,040H,040H
4956   2B4C 7F 40 40 40 
4957   2B50 40 7F 02 0C 		.db   040H,07FH,002H,00CH,002H,07FH,07FH,006H
4957   2B54 02 7F 7F 06 
4958   2B58 08 30 7F 3E 		.db   008H,030H,07FH,03EH,041H,041H,041H,03EH
4958   2B5C 41 41 41 3E 
4959   2B60 7F 09 09 09 		.db   07FH,009H,009H,009H,006H,03EH,041H,051H
4959   2B64 06 3E 41 51 
4960   2B68 21 5E 7F 09 		.db   021H,05EH,07FH,009H,019H,029H,046H,026H
4960   2B6C 19 29 46 26 
4961   2B70 49 49 49 32 		.db   049H,049H,049H,032H,001H,001H,07FH,001H
4961   2B74 01 01 7F 01 
4962   2B78 01 3F 40 40 		.db   001H,03FH,040H,040H,040H,03FH,00FH,030H
4962   2B7C 40 3F 0F 30 
4963   2B80 40 30 0F 7F 		.db   040H,030H,00FH,07FH,020H,018H,020H,07FH
4963   2B84 20 18 20 7F 
4964   2B88 63 14 08 14 		.db   063H,014H,008H,014H,063H,007H,008H,078H
4964   2B8C 63 07 08 78 
4965   2B90 08 07 61 51 		.db   008H,007H,061H,051H,049H,045H,043H,000H
4965   2B94 49 45 43 00 
4966   2B98 7F 41 41 00 		.db   07FH,041H,041H,000H,004H,008H,010H,020H
4966   2B9C 04 08 10 20 
4967   2BA0 40 00 41 41 		.db   040H,000H,041H,041H,07FH,000H,004H,002H
4967   2BA4 7F 00 04 02 
4968   2BA8 01 02 04 40 		.db   001H,002H,004H,040H,040H,040H,040H,040H
4968   2BAC 40 40 40 40 
4969   2BB0 00 01 02 04 		.db   000H,001H,002H,004H,000H,020H,054H,054H
4969   2BB4 00 20 54 54 
4970   2BB8 54 78 7F 28 		.db   054H,078H,07FH,028H,044H,044H,038H,038H
4970   2BBC 44 44 38 38 
4971   2BC0 44 44 44 28 		.db   044H,044H,044H,028H,038H,044H,044H,028H
4971   2BC4 38 44 44 28 
4972   2BC8 7F 38 54 54 		.db   07FH,038H,054H,054H,054H,018H,008H,008H
4972   2BCC 54 18 08 08 
4973   2BD0 7E 09 0A 18 		.db   07EH,009H,00AH,018H,0A4H,0A4H,098H,07CH
4973   2BD4 A4 A4 98 7C 
4974   2BD8 7F 04 04 04 		.db   07FH,004H,004H,004H,078H,000H,044H,07DH
4974   2BDC 78 00 44 7D 
4975   2BE0 40 00 40 80 		.db   040H,000H,040H,080H,084H,07DH,000H,000H
4975   2BE4 84 7D 00 00 
4976   2BE8 7F 10 28 44 		.db   07FH,010H,028H,044H,000H,041H,07FH,040H
4976   2BEC 00 41 7F 40 
4977   2BF0 00 7C 04 78 		.db   000H,07CH,004H,078H,004H,078H,07CH,008H
4977   2BF4 04 78 7C 08 
4978   2BF8 04 04 78 38 		.db   004H,004H,078H,038H,044H,044H,044H,038H
4978   2BFC 44 44 44 38 
4979   2C00 FC 18 24 24 		.db   0FCH,018H,024H,024H,018H,018H,024H,024H
4979   2C04 18 18 24 24 
4980   2C08 18 FC 7C 08 		.db   018H,0FCH,07CH,008H,004H,004H,008H,058H
4980   2C0C 04 04 08 58 
4981   2C10 54 54 54 24 		.db   054H,054H,054H,024H,004H,03FH,044H,044H
4981   2C14 04 3F 44 44 
4982   2C18 20 3C 40 40 		.db   020H,03CH,040H,040H,03CH,040H,01CH,020H
4982   2C1C 3C 40 1C 20 
4983   2C20 40 20 1C 3C 		.db   040H,020H,01CH,03CH,040H,038H,040H,03CH
4983   2C24 40 38 40 3C 
4984   2C28 44 28 10 28 		.db   044H,028H,010H,028H,044H,01CH,0A0H,0A0H
4984   2C2C 44 1C A0 A0 
4985   2C30 90 7C 44 64 		.db   090H,07CH,044H,064H,054H,04CH,044H,000H
4985   2C34 54 4C 44 00 
4986   2C38 08 36 41 41 		.db   008H,036H,041H,041H,000H,000H,077H,000H
4986   2C3C 00 00 77 00 
4987   2C40 00 41 41 36 		.db   000H,041H,041H,036H,008H,000H,002H,001H
4987   2C44 08 00 02 01 
4988   2C48 02 04 02 00 		.db   002H,004H,002H,000H,000H,000H,000H,000H
4988   2C4C 00 00 00 00 
4989   2C50             
4990   2C50             ; ======================================================
4991   2C50             ; LCD char generator shape table (80H-FFH)
4992   2C50             ; ======================================================
4993   2C50             lcdgraphics: 	; 78F1H
4994   2C50 66 77 49 49 		.db   0066H,077H,049H,049H,077H,066H,0FCH,086H
4994   2C54 77 66 FC 86 
4995   2C58 D7 EE FC 00 		.db   00D7H,0EEH,0FCH,000H,07FH,063H,014H,008H
4995   2C5C 7F 63 14 08 
4996   2C60 14 00 78 76 		.db   014H,000H,078H,076H,062H,04AH,00EH,000H
4996   2C64 62 4A 0E 00 
4997   2C68 EE 44 FF FF 		.db   0EEH,044H,0FFH,0FFH,044H,0EEH,00CH,04CH
4997   2C6C 44 EE 0C 4C 
4998   2C70 7F 4C 0C 00 		.db   07FH,04CH,00CH,000H,07CH,056H,07FH,056H
4998   2C74 7C 56 7F 56 
4999   2C78 7C 00 7D 77 		.db   07CH,000H,07DH,077H,047H,077H,07FH,000H
4999   2C7C 47 77 7F 00 
5000   2C80 00 00 7D 00 		.db   000H,000H,07DH,000H,000H,000H,010H,020H
5000   2C84 00 00 10 20 
5001   2C88 1C 02 02 02 		.db   01CH,002H,002H,002H,054H,034H,01CH,016H
5001   2C8C 54 34 1C 16 
5002   2C90 15 00 41 63 		.db   015H,000H,041H,063H,055H,049H,063H,000H
5002   2C94 55 49 63 00 
5003   2C98 24 12 12 24 		.db   024H,012H,012H,024H,012H,000H,044H,044H
5003   2C9C 12 00 44 44 
5004   2CA0 5F 44 44 00 		.db   05FH,044H,044H,000H,000H,040H,03EH,001H
5004   2CA4 00 40 3E 01 
5005   2CA8 00 00 00 08 		.db   000H,000H,000H,008H,01CH,03EH,000H,000H
5005   2CAC 1C 3E 00 00 
5006   2CB0 98 F4 12 12 		.db   098H,0F4H,012H,012H,0F4H,098H,0F8H,094H
5006   2CB4 F4 98 F8 94 
5007   2CB8 12 12 94 F8 		.db   012H,012H,094H,0F8H,014H,022H,07FH,022H
5007   2CBC 14 22 7F 22 
5008   2CC0 14 00 A0 56 		.db   014H,000H,0A0H,056H,03DH,056H,0A0H,000H
5008   2CC4 3D 56 A0 00 
5009   2CC8 4C 2A 1D 2A 		.db   04CH,02AH,01DH,02AH,048H,000H,038H,028H
5009   2CCC 48 00 38 28 
5010   2CD0 39 05 03 0F 		.db   039H,005H,003H,00FH,000H,016H,03DH,016H
5010   2CD4 00 16 3D 16 
5011   2CD8 00 00 42 25 		.db   000H,000H,042H,025H,015H,028H,054H,022H
5011   2CDC 15 28 54 22 
5012   2CE0 04 02 3F 02 		.db   004H,002H,03FH,002H,004H,000H,010H,020H
5012   2CE4 04 00 10 20 
5013   2CE8 7E 20 10 00 		.db   07EH,020H,010H,000H,008H,008H,02AH,01CH
5013   2CEC 08 08 2A 1C 
5014   2CF0 08 00 08 1C 		.db   008H,000H,008H,01CH,02AH,008H,008H,000H
5014   2CF4 2A 08 08 00 
5015   2CF8 1C 57 61 57 		.db   01CH,057H,061H,057H,01CH,000H,008H,014H
5015   2CFC 1C 00 08 14 
5016   2D00 22 14 08 00 		.db   022H,014H,008H,000H,01EH,022H,044H,022H
5016   2D04 1E 22 44 22 
5017   2D08 1E 00 1C 12 		.db   01EH,000H,01CH,012H,071H,012H,01CH,000H
5017   2D0C 71 12 1C 00 
5018   2D10 00 04 02 01 		.db   000H,004H,002H,001H,000H,000H,020H,055H
5018   2D14 00 00 20 55 
5019   2D18 56 54 78 00 		.db   056H,054H,078H,000H,00EH,051H,031H,011H
5019   2D1C 0E 51 31 11 
5020   2D20 0A 00 64 7F 		.db   00AH,000H,064H,07FH,045H,045H,020H,000H
5020   2D24 45 45 20 00 
5021   2D28 00 01 02 04 		.db   000H,001H,002H,004H,000H,000H,07FH,010H
5021   2D2C 00 00 7F 10 
5022   2D30 10 0F 10 00 		.db   010H,00FH,010H,000H,000H,002H,005H,002H
5022   2D34 00 02 05 02 
5023   2D38 00 00 04 0C 		.db   000H,000H,004H,00CH,01CH,00CH,004H,000H
5023   2D3C 1C 0C 04 00 
5024   2D40 00 04 7F 04 		.db   000H,004H,07FH,004H,000H,000H,018H,0A7H
5024   2D44 00 00 18 A7 
5025   2D48 A5 E5 18 00 		.db   0A5H,0E5H,018H,000H,07FH,041H,065H,051H
5025   2D4C 7F 41 65 51 
5026   2D50 7F 00 7F 41 		.db   07FH,000H,07FH,041H,05DH,049H,07FH,000H
5026   2D54 5D 49 7F 00 
5027   2D58 17 08 34 22 		.db   017H,008H,034H,022H,071H,000H,055H,03FH
5027   2D5C 71 00 55 3F 
5028   2D60 10 68 44 E2 		.db   010H,068H,044H,0E2H,017H,008H,004H,06AH
5028   2D64 17 08 04 6A 
5029   2D68 59 00 06 09 		.db   059H,000H,006H,009H,07FH,001H,07FH,001H
5029   2D6C 7F 01 7F 01 
5030   2D70 29 2A 7C 2A 		.db   029H,02AH,07CH,02AH,029H,000H,070H,029H
5030   2D74 29 00 70 29 
5031   2D78 24 29 70 00 		.db   024H,029H,070H,000H,038H,045H,044H,045H
5031   2D7C 38 45 44 45 
5032   2D80 38 00 3C 41 		.db   038H,000H,03CH,041H,040H,041H,03CH,000H
5032   2D84 40 41 3C 00 
5033   2D88 1C 22 7F 22 		.db   01CH,022H,07FH,022H,014H,000H,008H,004H
5033   2D8C 14 00 08 04 
5034   2D90 04 08 04 00 		.db   004H,008H,004H,000H,020H,055H,054H,055H
5034   2D94 20 55 54 55 
5035   2D98 78 00 30 4A 		.db   078H,000H,030H,04AH,048H,04AH,030H,000H
5035   2D9C 48 4A 30 00 
5036   2DA0 3C 41 40 21 		.db   03CH,041H,040H,021H,07CH,000H,040H,07FH
5036   2DA4 7C 00 40 7F 
5037   2DA8 49 49 3E 00 		.db   049H,049H,03EH,000H,071H,011H,067H,011H
5037   2DAC 71 11 67 11 
5038   2DB0 71 00 38 54 		.db   071H,000H,038H,054H,056H,055H,018H,000H
5038   2DB4 56 55 18 00 
5039   2DB8 3C 41 42 20 		.db   03CH,041H,042H,020H,07CH,000H,038H,055H
5039   2DBC 7C 00 38 55 
5040   2DC0 56 54 18 00 		.db   056H,054H,018H,000H,000H,004H,000H,004H
5040   2DC4 00 04 00 04 
5041   2DC8 00 00 48 7E 		.db   000H,000H,048H,07EH,049H,001H,002H,000H
5041   2DCC 49 01 02 00 
5042   2DD0 40 AA A9 AA 		.db   040H,0AAH,0A9H,0AAH,0F0H,000H,070H,0AAH
5042   2DD4 F0 00 70 AA 
5043   2DD8 A9 AA 30 00 		.db   0A9H,0AAH,030H,000H,000H,002H,0E9H,002H
5043   2DDC 00 02 E9 02 
5044   2DE0 00 00 30 4A 		.db   000H,000H,030H,04AH,49H,04AH,030H,000H
5044   2DE4 49 4A 30 00 
5045   2DE8 38 42 41 22 		.db   038H,042H,041H,022H,078H,000H,008H,004H
5045   2DEC 78 00 08 04 
5046   2DF0 02 04 08 00 		.db   002H,004H,008H,000H,038H,055H,054H,055H
5046   2DF4 38 55 54 55 
5047   2DF8 18 00 00 02 		.db   018H,000H,000H,002H,068H,002H,000H,000H
5047   2DFC 68 02 00 00 
5048   2E00 20 54 56 55 		.db   020H,054H,056H,055H,07CH,000H,000H,000H
5048   2E04 7C 00 00 00 
5049   2E08 6A 01 00 00 		.db   06AH,001H,000H,000H,030H,048H,04AH,049H
5049   2E0C 30 48 4A 49 
5050   2E10 30 00 3C 40 		.db   030H,000H,03CH,040H,042H,021H,07CH,000H
5050   2E14 42 21 7C 00 
5051   2E18 0C 50 52 51 		.db   00CH,050H,052H,051H,03CH,000H,07AH,011H
5051   2E1C 3C 00 7A 11 
5052   2E20 09 0A 71 00 		.db   009H,00AH,071H,000H,042H,0A9H,0A9H,0AAH
5052   2E24 42 A9 A9 AA 
5053   2E28 F1 00 32 49 		.db   0F1H,000H,032H,049H,049H,04AH,031H,000H
5053   2E2C 49 4A 31 00 
5054   2E30 E0 52 49 52 		.db   0E0H,052H,049H,052H,0E0H,000H,0F8H,0AAH
5054   2E34 E0 00 F8 AA 
5055   2E38 A9 AA 88 00 		.db   0A9H,0AAH,088H,000H,000H,08AH,0F9H,08AH
5055   2E3C 00 8A F9 8A 
5056   2E40 00 00 70 8A 		.db   000H,000H,070H,08AH,089H,08AH,070H,000H
5056   2E44 89 8A 70 00 
5057   2E48 78 82 81 82 		.db   078H,082H,081H,082H,078H,000H,000H,045H
5057   2E4C 78 00 00 45 
5058   2E50 7C 45 00 00 		.db   07CH,045H,000H,000H,07CH,055H,054H,055H
5058   2E54 7C 55 54 55 
5059   2E58 44 00 7C 54 		.db   044H,000H,07CH,054H,056H,055H,044H,000H
5059   2E5C 56 55 44 00 
5060   2E60 E0 50 4A 51 		.db   0E0H,050H,04AH,051H,0E0H,000H,000H,088H
5060   2E64 E0 00 00 88 
5061   2E68 FA 89 00 00 		.db   0FAH,089H,000H,000H,070H,088H,08AH,089H
5061   2E6C 70 88 8A 89 
5062   2E70 70 00 3C 40 		.db   070H,000H,03CH,040H,042H,041H,03CH,000H
5062   2E74 42 41 3C 00 
5063   2E78 0C 10 62 11 		.db   00CH,010H,062H,011H,00CH,000H,03CH,041H
5063   2E7C 0C 00 3C 41 
5064   2E80 42 40 3C 00 		.db   042H,040H,03CH,000H,07CH,055H,056H,054H
5064   2E84 7C 55 56 54 
5065   2E88 44 00 E0 51 		.db   044H,000H,0E0H,051H,04AH,050H,0E0H,000H
5065   2E8C 4A 50 E0 00 
5066   2E90 00 00 00 00 		.db   000H,000H,000H,000H,000H,000H,00FH,00FH
5066   2E94 00 00 0F 0F 
5067   2E98 0F 00 00 00 		.db   00FH,000H,000H,000H,000H,000H,000H,00FH
5067   2E9C 00 00 00 0F 
5068   2EA0 0F 0F F0 F0 		.db   00FH,00FH,0F0H,0F0H,0F0H,000H,000H,000H
5068   2EA4 F0 00 00 00 
5069   2EA8 00 00 00 F0 		.db   000H,000H,000H,0F0H,0F0H,0F0H,00FH,00FH
5069   2EAC F0 F0 0F 0F 
5070   2EB0 0F F0 F0 F0 		.db   00FH,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,00FH
5070   2EB4 F0 F0 F0 0F 
5071   2EB8 0F 0F 0F 0F 		.db   00FH,00FH,00FH,00FH,00FH,00FH,00FH,00FH
5071   2EBC 0F 0F 0F 0F 
5072   2EC0 F0 F0 F0 F0 		.db   0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0FFH,0FFH
5072   2EC4 F0 F0 FF FF 
5073   2EC8 FF 00 00 00 		.db   0FFH,000H,000H,000H,000H,000H,000H,0FFH
5073   2ECC 00 00 00 FF 
5074   2ED0 FF FF FF FF 		.db   0FFH,0FFH,0FFH,0FFH,0FFH,00FH,00FH,00FH
5074   2ED4 FF 0F 0F 0F 
5075   2ED8 0F 0F 0F FF 		.db   00FH,00FH,00FH,0FFH,0FFH,0FFH,0FFH,0FFH
5075   2EDC FF FF FF FF 
5076   2EE0 FF F0 F0 F0 		.db   0FFH,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0FFH
5076   2EE4 F0 F0 F0 FF 
5077   2EE8 FF FF FF FF 		.db   0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
5077   2EEC FF FF FF FF 
5078   2EF0 00 00 F8 08 		.db   000H,000H,0F8H,008H,008H,008H,008H,008H
5078   2EF4 08 08 08 08 
5079   2EF8 08 08 08 08 		.db   008H,008H,008H,008H,008H,008H,0F8H,000H
5079   2EFC 08 08 F8 00 
5080   2F00 00 00 08 08 		.db   000H,000H,008H,008H,0F8H,008H,008H,008H
5080   2F04 F8 08 08 08 
5081   2F08 00 00 FF 08 		.db   000H,000H,0FFH,008H,008H,008H,000H,000H
5081   2F0C 08 08 00 00 
5082   2F10 FF 00 00 00 		.db   0FFH,000H,000H,000H,000H,000H,00FH,008H
5082   2F14 00 00 0F 08 
5083   2F18 08 08 08 08 		.db   008H,008H,008H,008H,00FH,000H,000H,000H
5083   2F1C 0F 00 00 00 
5084   2F20 08 08 0F 08 		.db   008H,008H,00FH,008H,008H,008H,008H,008H
5084   2F24 08 08 08 08 
5085   2F28 FF 00 00 00 		.db   0FFH,000H,000H,000H,008H,008H,0FFH,008H
5085   2F2C 08 08 FF 08 
5086   2F30 08 08 3F 1F 		.db   008H,008H,03FH,01FH,00FH,007H,003H,001H
5086   2F34 0F 07 03 01 
5087   2F38 80 C0 E0 F0 		.db   080H,0C0H,0E0H,0F0H,0F8H,0FCH,001H,003H
5087   2F3C F8 FC 01 03 
5088   2F40 07 0F 1F 3F 		.db   007H,00FH,01FH,03FH,0FCH,0F8H,0F0H,0E0H
5088   2F44 FC F8 F0 E0 
5089   2F48 C0 80 55 AA 		.db   0C0H,080H,055H,0AAH,055H,0AAH,055H,0AAH
5089   2F4C 55 AA 55 AA 
5090   2F50             
5091   2F50             ; ======================================================
5092   2F50             ; Keyboard conversion matrix
5093   2F50             ; ======================================================
5094   2F50             kbdbascii:  ;7BF1H
5095   2F50 7A 78 63 76 		.text "zxcvbnml"
5095   2F54 62 6E 6D 6C 
5096   2F58 61 73 64 66 		.text "asdfghjk"
5096   2F5C 67 68 6A 6B 
5097   2F60 71 77 65 72 		.text "qwertyui"
5097   2F64 74 79 75 69 
5098   2F68 6F 70 5B 3B 		.text "op[;',./"
5098   2F6C 27 2C 2E 2F 
5099   2F70 31 32 33 34 		.text "12345678"
5099   2F74 35 36 37 38 
5100   2F78 39 30 2D 3D 		.text "90-="
5101   2F7C             ;		.db   07AH,078H,063H,076H,062H,06EH,06DH,06CH
5102   2F7C             ;		.db   061H,073H,064H,066H,067H,068H,06AH,06BH
5103   2F7C             ;		.db   071H,077H,065H,072H,074H,079H,075H,069H
5104   2F7C             ;		.db   06FH,070H,05BH,03BH,027H,02CH,02EH,02FH
5105   2F7C             ;		.db   031H,032H,033H,034H,035H,036H,037H,038H
5106   2F7C             ;		.db   039H,030H,02DH,03DH
5107   2F7C             		
5108   2F7C             ; Shifted ASCII values
5109   2F7C             kbdasciishifted:  ;7C1DH
5110   2F7C 5A 58 43 56 		.text "ZXCVBNML"
5110   2F80 42 4E 4D 4C 
5111   2F84 41 53 44 46 		.text "ASDFGHJK"
5111   2F88 47 48 4A 4B 
5112   2F8C 51 57 45 52 		.text "QWERTYUI"
5112   2F90 54 59 55 49 
5113   2F94 4F 50 5D 3A 		.text "OP]:\"<>?"
5113   2F98 22 3C 3E 3F 
5114   2F9C 21 40 23 24 		.text "!@#$%^&*"
5114   2FA0 25 5E 26 2A 
5115   2FA4 28 29 5F 2B 		.text "()_+"		
5116   2FA8             ;		.db   05AH,058H,043H,056H
5117   2FA8             ;		.db   042H,04EH,04DH,04CH,041H,053H,044H,046H
5118   2FA8             ;		.db   047H,048H,04AH,04BH,051H,057H,045H,052H
5119   2FA8             ;		.db   054H,059H,055H,049H,04FH,050H,05DH,03AH
5120   2FA8             ;		.db   022H,03CH,03EH,03FH,021H,040H,023H,024H
5121   2FA8             ;		.db   025H,05EH,026H,02AH,028H,029H,05FH,02BH
5122   2FA8             
5123   2FA8             ; GRPH values
5124   2FA8             kbdgraph: 	;7C49H
5125   2FA8 00 83 84 00 		.db   000H,083H,084H,000H,095H,096H,081H,09AH
5125   2FAC 95 96 81 9A 
5126   2FB0 85 8B 00 82 		.db   085H,08BH,000H,082H,000H,086H,000H,09BH
5126   2FB4 00 86 00 9B 
5127   2FB8 93 94 8F 89 		.db   093H,094H,08FH,089H,087H,090H,091H,08EH
5127   2FBC 87 90 91 8E 
5128   2FC0 98 80 60 92 		.db   098H,080H,060H,092H,08CH,099H,097H,08AH
5128   2FC4 8C 99 97 8A 
5129   2FC8 88 9C 9D 9E 		.db   088H,09CH,09DH,09EH,09FH,0B4H,0B0H,0A3H
5129   2FCC 9F B4 B0 A3 
5130   2FD0 7B 7D 5C 8D 		.db   07BH,07DH,05CH,08DH
5131   2FD4             		
5132   2FD4             ; Shift GRPH values
5133   2FD4             kbdgraphshifted: ;7C75H
5134   2FD4 E0 EF FF 00 		.db   0E0H,0EFH,0FFH,000H
5135   2FD8 00 00 F6 F9 		.db   000H,000H,0F6H,0F9H,0EBH,0ECH,0EDH,0EEH
5135   2FDC EB EC ED EE 
5136   2FE0 FD FB F4 FA 		.db   0FDH,0FBH,0F4H,0FAH,0E7H,0E8H,0E9H,0EAH
5136   2FE4 E7 E8 E9 EA 
5137   2FE8 FC FE F0 F3 		.db   0FCH,0FEH,0F0H,0F3H,0F2H,0F1H,07EH,0F5H
5137   2FEC F2 F1 7E F5 
5138   2FF0 00 F8 F7 00 		.db   000H,0F8H,0F7H,000H,0E1H,0E2H,0E3H,0E4H
5138   2FF4 E1 E2 E3 E4 
5139   2FF8 E5 E6 00 00 		.db   0E5H,0E6H,000H,000H,000H,000H,07CH,000H
5139   2FFC 00 00 7C 00 
5140   3000             		
5141   3000             ; CODE values
5142   3000             kbdcode:  ;7CA1H
5143   3000 CE A1 A2 BD 		.db   0CEH,0A1H,0A2H,0BDH,000H,0CDH,000H,0CAH
5143   3004 00 CD 00 CA 
5144   3008 B6 A9 BB 00 		.db   0B6H,0A9H,0BBH,000H,000H,000H,0CBH,0C9H
5144   300C 00 00 CB C9 
5145   3010 C8 00 C6 00 		.db   0C8H,000H,0C6H,000H,000H,0CCH,0B8H,0C7H
5145   3014 00 CC B8 C7 
5146   3018 B7 AC B5 AD 		.db   0B7H,0ACH,0B5H,0ADH,0A0H,0BCH,0CFH,0AEH
5146   301C A0 BC CF AE 
5147   3020 C0 00 C1 00 		.db   0C0H,000H,0C1H,000H,000H,000H,0C4H,0C2H
5147   3024 00 00 C4 C2 
5148   3028 C3 AF C5 BE 		.db   0C3H,0AFH,0C5H,0BEH
5149   302C             
5150   302C             ; Shift CODE values
5151   302C             kbdcodeshifted: ;7CCDH
5152   302C 00 DF AB DE 		.db   000H,0DFH,0ABH,0DEH
5153   3030 00 00 A5 DA 		.db   000H,000H,0A5H,0DAH,0B1H,0B9H,0D7H,0BFH
5153   3034 B1 B9 D7 BF 
5154   3038 00 00 DB D9 		.db   000H,000H,0DBH,0D9H,0D8H,000H,0D6H,0AAH
5154   303C D8 00 D6 AA 
5155   3040 BA DC B3 D5 		.db   0BAH,0DCH,0B3H,0D5H,0B2H,000H,000H,000H
5155   3044 B2 00 00 00 
5156   3048 A4 DD 00 00 		.db   0A4H,0DDH,000H,000H,0D0H,000H,0D1H,000H
5156   304C D0 00 D1 00 
5157   3050 00 00 D4 D2 		.db   000H,000H,0D4H,0D2H,0D3H,0A6H,0A7H,0A8H
5157   3054 D3 A6 A7 A8 
5158   3058             
5159   3058             ; NUM LOCK values
5160   3058             kbdnum: ;7CF9H
5161   3058 6D 30 6A 31 		.db   06DH,030H,06AH,031H,06BH,032H,06CH,033H
5161   305C 6B 32 6C 33 
5162   3060 75 34 69 35 		.db   075H,034H,069H,035H,06FH,036H
5162   3064 6F 36 
5163   3066             
5164   3066             ; Special Key values (arrow, TAB, fKeys, etc.)
5165   3066             kbdspecial: ;7D07H
5166   3066 01 06       		.db   001H,006H
5167   3068 14 02 20 7F 		.db   014H,002H,020H,07FH,009H,01BH,08BH,088H
5167   306C 09 1B 8B 88 
5168   3070 8A 0D 80 81 		.db   08AH,00DH,080H,081H,082H,083H,084H,085H
5168   3074 82 83 84 85 
5169   3078 86 87       		.db   086H,087H
5170   307A             		
5171   307A             ; Shift special key values
5172   307A             kbdspecialshift: ;7D18H
5173   307A 1D 1C 1E 1F 		.db   01DH,01CH,01EH,01FH,020H,008H
5173   307E 20 08 
5174   3080 09 1B 8B 88 		.db   009H,01BH,08BH,088H,089H,00DH,080H,081H
5174   3084 89 0D 80 81 
5175   3088 82 83 84 85 		.db   082H,083H,084H,085H,086H,087H,051H,052H
5175   308C 86 87 51 52 
5176   3090 57 5A       		.db   057H,05AH	
5177   3092             
5178   3092              .end
5179   3092             ; ======================================================
5180   3092             ; External ROM detect image loaded at F605H
5181   3092             ; ======================================================
5182   3092             ;036FH  DB   3EH,01H,D3H,E8H,21H,40H,00H,11H  ; F605H - MVI A,01H;  OUT E8H; LXI H,0040H;  LXI D,FAA4H
5183   3092             ;0377H  DB   A4H,FAH,7EH,12H,23H,13H,7DH,D6H  ; F60DH - MVI A,M;    STAX D;  INX H; INX D; MOV A,L; SUI 48H
5184   3092             ;037FH  DB   48H,C2H,0FH,F6H,D3H,E8H,2AH,A4H  ; F515H - JNZ F60FH;  OUT E8H; LHLD FAA4H;   
5185   3092             ;0387H  DB   FAH,11H,54H,43H,C3H,18H,00H,F3H  ; F61DH - LXI D,4354H; JMP 0018H;     DI;
5186   3092             ;038FH  DB   3EH,01H,D3H,E8H,C7H,00H,01H,00H  ; F625H - MVI A,01H;  OUT E8H; RST 0
5187   3092             
5188   3092             ; ======================================================
5189   3092             ; RAM3 OPTROM Test Code 
5190   3092             ; ======================================================
5191   3092             optram3load:
5192   3092 3E 09       	.db 03EH,009H       ;MVI A,01H
5193   3094 D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5194   3096 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5195   3099 11 17 91    	.db 011H,017H,091H  ;LXI D,optram3open ; FAA4H       
5196   309C 7E          	.db 07EH            ;MOV A,M
5197   309D 12          	.db 012H            ;STAX D
5198   309E 23          	.db 023H            ;INX H
5199   309F 13          	.db 013H       	    ;INX D
5200   30A0 7D          	.db 07DH            ;MOV A,L
5201   30A1 D6 48       	.db 0D6H,48H        ;SUI 48H
5202   30A3 C2 0A 91    	.db 0C2H,00AH,091H  ;JNZ optram3loop
5203   30A6 D3 E8               .db 0D3H,0E8H       ;OUT E8H
5204   30A8 C9          	.db 0C9H	    ;RET
5205   30A9             
5206   30A9             ; ======================================================
5207   30A9             ; RAM2 OPTROM Test Code 
5208   30A9             ; ======================================================
5209   30A9             optram2load:
5210   30A9 3E 09       	.db 03EH,009H       ;MVI A,01H
5211   30AB D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5212   30AD 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5213   30B0 11 17 B1    	.db 011H,017H,0B1H  ;LXI D,optram2open ; FAA4H       
5214   30B3 7E          	.db 07EH            ;MOV A,M
5215   30B4 12          	.db 012H            ;STAX D
5216   30B5 23          	.db 023H            ;INX H
5217   30B6 13          	.db 013H       	    ;INX D
5218   30B7 7D          	.db 07DH            ;MOV A,L
5219   30B8 D6 48       	.db 0D6H,48H        ;SUI 48H
5220   30BA C2 0A B1    	.db 0C2H,0AH,0B1H   ;JNZ optram2loop
5221   30BD D3 E8           	.db 0D3H,0E8H       ;OUT E8H
5222   30BF C9          	.db 0C9H	    ;RET
5223   30C0             
5224   30C0             ; ======================================================
5225   30C0             ; RAM1 OPTROM Test Code 
5226   30C0             ; ======================================================
5227   30C0             optram1load:
5228   30C0 3E 09       	.db 03EH,009H       ;MVI A,01H
5229   30C2 D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5230   30C4 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5231   30C7 11 17 D1    	.db 011H,017H,0D1H  ;LXI D,optram1open ; FAA4H       
5232   30CA 7E          	.db 07EH            ;MOV A,M
5233   30CB 12          	.db 012H            ;STAX D
5234   30CC 23          	.db 023H            ;INX H
5235   30CD 13          	.db 013H       		;INX D
5236   30CE 7D          	.db 07DH            ;MOV A,L
5237   30CF D6 48       	.db 0D6H,48H        ;SUI 48H
5238   30D1 C2 0A D1    	.db 0C2H,0AH,0D1H   ;JNZ optram1loop
5239   30D4 D3 E8           .db 0D3H,0E8H       ;OUT E8H
5240   30D6 C9          	.db 0C9H	    ;RET
5241   30D7             :
5242   30D7             
5243   30D7             ; ======================================================
5244   30D7             ; RAM0 OPTROM Test Code 
5245   30D7             ; ======================================================
5246   30D7             optram0load:
5247   30D7 3E 09       	.db 03EH,09H        ;MVI A,01H
5248   30D9 D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5249   30DB 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5250   30DE 11 17 F1    	.db 011H,017H,0F1H  ;LXI D,optram0open ; FAA4H       
5251   30E1 7E          	.db 07EH            ;MOV A,M
5252   30E2 12          	.db 012H            ;STAX D
5253   30E3 23          	.db 023H            ;INX H
5254   30E4 13          	.db 013H       		;INX D
5255   30E5 7D          	.db 07DH            ;MOV A,L
5256   30E6 D6 48       	.db 0D6H,48H        ;SUI 48H
5257   30E8 C2 0A F1    	.db 0C2H,0AH,0F1H  ;JNZ optram0loop
5258   30EB D3 E8           .db 0D3H,0E8H       ;OUT E8H
5259   30ED C9          	.db 0C9H            ;RET
5260   30EE             
5261   30EE             ; ======================================================
5262   30EE             ; The code below will appear in RAM it is here to generate
5263   30EE             ; the HEX code for the ROM to load into RAM when running. 
5264   30EE             ; ======================================================		
5265   30EE             ; ======================================================
5266   30EE             ; RAM3 OPTROM Test Code 
5267   30EE             ; ======================================================		
5268   9100             		.org ram3+1100H
5269   9100             optram3:
5270   9100 3E 09       		MVI A,09H;  
5271   9102 D3 E8       		OUT 0E8H; 
5272   9104 21 40 00    		LXI H,0040H;  
5273   9107 11 17 91    		LXI D,optram3open ; FAA4H
5274   910A             optram3loop:		
5275   910A 7E          		MOV A,M;   
5276   910B 12          		STAX D;  
5277   910C 23          		INX H; 
5278   910D 13          		INX D; 
5279   910E 7D          		MOV A,L; 
5280   910F D6 48       		SUI 48H
5281   9111 C2 0A 91    		JNZ optram3loop   ; F60FH;  
5282   9114 D3 E8       		OUT 0E8H; 
5283   9116 C9          		RET
5284   9117             optram3open:
5285   9117 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
5285   911B 00 00 00 00 
5286   911F             
5287   911F             ; ======================================================
5288   911F             ; RAM2 OPTROM Test Code 
5289   911F             ; ======================================================
5290   B100             		.org ram2+1100H
5291   B100             optram2:
5292   B100 3E 09       		MVI A,09H;  
5293   B102 D3 E8       		OUT 0E8H; 
5294   B104 21 40 00    		LXI H,0040H;  
5295   B107 11 17 B1    		LXI D,optram2open ; FAA4H
5296   B10A             optram2loop:		
5297   B10A 7E          		MOV A,M;   
5298   B10B 12          		STAX D;  
5299   B10C 23          		INX H; 
5300   B10D 13          		INX D; 
5301   B10E 7D          		MOV A,L; 
5302   B10F D6 48       		SUI 048H
5303   B111 C2 0A B1    		JNZ optram2loop   ; F60FH;  
5304   B114 D3 E8       		OUT 0E8H; 
5305   B116 C9          		RET
5306   B117             optram2open:
5307   B117 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
5307   B11B 00 00 00 00 
5308   B11F             
5309   B11F             ; ======================================================
5310   B11F             ; RAM1 OPTROM Test Code 
5311   B11F             ; ======================================================
5312   D100             		.org ram1+1100H
5313   D100             optram1:
5314   D100 3E 09       		MVI A,09H;  
5315   D102 D3 E8       		OUT 0E8H; 
5316   D104 21 40 00    		LXI H,0040H;  
5317   D107 11 17 D1    		LXI D,optram1open ; FAA4H
5318   D10A             optram1loop:		
5319   D10A 7E          		MOV A,M;   
5320   D10B 12          		STAX D;  
5321   D10C 23          		INX H; 
5322   D10D 13          		INX D; 
5323   D10E 7D          		MOV A,L; 
5324   D10F D6 48       		SUI 048H
5325   D111 C2 0A D1    		JNZ optram1loop   ; F60FH;  
5326   D114 D3 E8       		OUT 0E8H; 
5327   D116 C9          		RET
5328   D117             optram1open:
5329   D117 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
5329   D11B 00 00 00 00 
5330   D11F             
5331   D11F             ; ======================================================
5332   D11F             ; RAM0 OPTROM Test Code 
5333   D11F             ; ======================================================
5334   F100             		.org ram0+1100H
5335   F100             optram0:
5336   F100 3E 09       		MVI A,09H;  
5337   F102 D3 E8       		OUT 0E8H; 
5338   F104 21 40 00    		LXI H,0040H;  
5339   F107 11 17 F1    		LXI D,optram0open ; FAA4H
5340   F10A             optram0loop:		
5341   F10A 7E          		MOV A,M;   
5342   F10B 12          		STAX D;  
5343   F10C 23          		INX H; 
5344   F10D 13          		INX D; 
5345   F10E 7D          		MOV A,L; 
5346   F10F D6 48       		SUI 048H
5347   F111 C2 0A F1    		JNZ optram0loop   ; F60FH;  
5348   F114 D3 E8       		OUT 0E8H; 
5349   F116 C9          		RET
5350   F117             optram0open:
5351   F117 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
5351   F11B 00 00 00 00 
tasm: Number of errors = 0
