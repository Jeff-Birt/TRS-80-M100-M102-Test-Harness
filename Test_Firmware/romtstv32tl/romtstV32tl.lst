0001   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002   0000             ; $Id: ROMTST.asm $
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;
0005   0000             ;  ROM Test firmware for use with the ROM board V2.x.
0006   0000             ;  Uses the connection test board to complete the test harness.
0007   0000             ;  The use of an LCD dongle test board and keyboard loop back
0008   0000             ;  board can assist with debugging however they are not required.
0009   0000             ;
0010   0000             ;  Uses parts of the M100_dis_2013 data. The disassembly of the
0011   0000             ;  M100 ROM was invaluable in producing the test firmware. The 16-bit
0012   0000             ;  HEX number next to some routines can be used to reference into 
0013   0000             ;  the disassembly to help understanding of the reduced routines.
0014   0000             ;
0015   0000             ;  Created by IS on 12 Feb 2020.
0016   0000             ;  Updated: 
0017   0000             ;			10 Dec 2020 - V3.1. Added LCD Dongle and keyboard
0018   0000             ;			              Loopback board tests.
0019   0000             ;			22 Dec 2020 - V3.2. Improved fault detection on A14-A8 
0020   0000             ;						  RAM addresses.  
0021   0000             ;			03 Jan 2020 - V3.2tl Skips power off test, does continious loop.
0022   0000             ;
0023   0000             ;  Copyright Â© 2020 Stardust. 
0024   0000             ;  All rights reserved.
0025   0000             ;  Commercial use prohibited
0026   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0027   0000             ; TASM 
0028   0000             ; Processor: 8080/8085
0029   0000             ;
0030   0000             #DEFINE VERSION .text "V3.2" ; Change this value to update version
0031   0000             
0032   0000             ;===========================================================
0033   0000             ; Defined locations and constants
0034   0000             ; ==========================================================
0035   0000             ;Test Board Diagnostic LCD Settings
0036   0000             lcddata  .equ   0001H ;Display DATA shares ROM Address space
0037   0000             lcdins   .equ   0000H ;Display Control Register
0038   0000             lcdwake  .equ   30H   ;Wake up LCD
0039   0000             lcdfunc  .equ   38H   ;Set LCD 2 lines,0 5x7 Dots
0040   0000             ;lcdon    .equ   0FH   ;Set LCD on+Cursor+Blink
0041   0000             lcdon    .equ   0CH   ;Set LCD on no cursor
0042   0000             lcdmode  .equ   06H   ;LCD Mode
0043   0000             lcdclr   .equ   01H   ;Clear LCD
0044   0000             
0045   0000             ;RAM Location settings
0046   0000             ramstart .equ	08000H 
0047   0000             ramend	 .equ   0FFFFH
0048   0000             ram0   	 .equ   0E000H ; E7FFH, EFFFH, F7FFH ;E800H, F000H, F800H
0049   0000             ram1     .equ   0C000H ; C7FFH, CFFFH, D7FFH ;C800H, D000H, D800H
0050   0000             ram2	 .equ   0A000H ; A7FFH, AFFFH, B7FFH ;A800H, B000H, B800H
0051   0000             ram3     .equ 	08000H ; 87FFH, 8FFFH, 97FFH ;8800H, 9000H, 9800H
0052   0000             
0053   0000             ;I/O Port addresses
0054   0000             sysreg	 .equ   080H   ; Y0 System bus Sysreg
0055   0000             setreg	 .equ   081H   ; Y0 System bus ctlreg
0056   0000             lptreg	 .equ   082H   ; Y0 System bus lptreg
0057   0000             
0058   0000             teleIO   .equ   090H   ; Y1 Answering Telephone
0059   0000             modemIO	 .equ   0A0H   ; Y2 Modem control
0060   0000             
0061   0000             ;PIO registers
0062   0000             PIOCR	 .equ   0B0H   ; Y3 PIO Control Register B8H
0063   0000             PIOA	 .equ   0B1H   ; Y3 PIO Port A Register  B9H
0064   0000             PIOB	 .equ   0B2H   ; Y3 PIO Port B Register  BAH
0065   0000             PIOC	 .equ   0B3H   ; Y3 PIO Port C Register  BBH
0066   0000             PIOT1	 .equ   0B4H   ; Y3 PIO LSB Timer        BCH
0067   0000             PIOT2	 .equ   0B5H   ; Y3 PIO MSB Timer	    BDH
0068   0000             
0069   0000             UARTctrl .equ	0C0H   ; Y4 => 0xC0 - 0xCF  = UART Control
0070   0000             UARTread .equ	0C8H   ; Serial RX 
0071   0000             UARTsend .equ   0C8H   ; Serial TX
0072   0000             UARTmode .equ	0D8H   ; Y5 => 0xD0 - 0xDF  = Mode setting on UART
0073   0000             CtrlReg  .equ	0E8H   ; Y6 => 0xE0 - 0xEF  = Write to enable STROM and REMOTE, printer strobe and clock
0074   0000             readkbd  .equ	0E8H   ; Y6 => 0xE0 - 0xEF  = Read from Keyboard
0075   0000             scrins   .equ	0FEH   ; Y7 => 0xF0 - 0xFF  = Enable for LCD instructions, this is active HIGH
0076   0000             scrdata  .equ	0FFH   ; Y7 => 0xF0 - 0xFF  = Enable for LCD data, this is active HIGH
0077   0000             
0078   0000             		.org 0
0079   0000             ;===========================================================
0080   0000             ; Reset Vector
0081   0000             ; ==========================================================
0082   0000 C3 00 10    		JMP start      ; Start of test code
0083   0003             
0084   0003             ; ==========================================================
0085   0003             ; TRAP entry point
0086   0003             ; ==========================================================
0087   0024             		.org 24H
0088   0024 C3 7C 23    		JMP trap      ; RAM vector for TRAP interrupt
0089   0027 00          		NOP
0090   0028             
0091   0028             ; ==========================================================
0092   0028             ; RST 5.5 -- Bar Code Reader
0093   0028             ; ==========================================================
0094   002C             		.org 2CH
0095   002C F3          		DI
0096   002D C3 E4 1D    		JMP bcrint    ; RST 5.5 RAM Vector	
0097   0030             	
0098   0030             ; ==========================================================
0099   0030             ; RST 6.5 -- RS232 character pending
0100   0030             ; ==========================================================
0101   0034             		.org 34H
0102   0034 F3          		DI
0103   0035 C3 E3 1B    		JMP serint    ; RST 6.5 routine (RS232 receive interrupt)
0104   0038             
0105   0038             ; ==========================================================
0106   0038             ; RST 7.5 -- Timer background task
0107   0038             ; ==========================================================
0108   003C             		.org 3CH
0109   003C F3          		DI
0110   003D C3 72 1A    		JMP timint      ; RST 7.5 interrupt routine
0111   0040             	
0112   0040             ; ==========================================================
0113   0040             ; Used to detect when the ROM switches. 
0114   0040             ; ==========================================================
0115   0040             		.org 040H
0116   0040             optromtext:
0117   0040 4E 6F 20 4F 		.text "No Optrom"
0117   0044 70 74 72 6F 
0117   0048 6D 
0118   0049 00          		.db 0
0119   004A             
0120   004A             ; ==========================================================
0121   004A             ; Copyright notices 
0122   004A             ; ==========================================================
0123   0F38                     .org 1000H - 200
0124   0F38             ;		.text "0123456789012345678901"
0125   0F38             ;		.text "0123456789ABCDEF"
0126   0F38             ;copyright notice
0127   0F38             copynotice:
0128   0F38             ;		.text "0123456789ABCDEF"
0129   0F38 20 20 52 4F 		.text "  ROM Test "
0129   0F3C 4D 20 54 65 
0129   0F40 73 74 20 
0130   0F43 56 33 2E 32 		VERSION
0131   0F47 00          		.db 0
0132   0F48 28 63 29 20 		.text "(c) IS  Dec 2020"
0132   0F4C 49 53 20 20 
0132   0F50 44 65 63 20 
0132   0F54 32 30 32 30 
0133   0F58 00          		.db 0
0134   0F59 4D 31 30 30 		.text "M100/102 ROM Test "
0134   0F5D 2F 31 30 32 
0134   0F61 20 52 4F 4D 
0134   0F65 20 54 65 73 
0134   0F69 74 20 
0135   0F6B 56 33 2E 32 		VERSION
0136   0F6F 00          		.db 0
0137   0F70 43 6F 70 79 		.text "Copyright IS Dec 2020"
0137   0F74 72 69 67 68 
0137   0F78 74 20 49 53 
0137   0F7C 20 44 65 63 
0137   0F80 20 32 30 32 
0137   0F84 30 
0138   0F85 00          		.db 0
0139   0F86             		
0140   0F86             ; **********************************************************
0141   0F86             ; Start of test code
0142   0F86             ; **********************************************************
0143   1000                     .org 1000h
0144   1000             start:
0145   1000 F3          		DI
0146   1001             		
0147   1001 3E 1F       		MVI A, 01FH   ; disable all interrupts
0148   1003 30          		SIM
0149   1004             
0150   1004 31 00 E0    		LXI SP,ram0   ; Set the SP = E000 just in case
0151   1007             		
0152   1007             		;Startup delay loop, taken from M100 ROM
0153   1007 21 10 27    		LXI H,2710H   ; Load 16-bit delay counter
0154   100A             wait1:
0155   100A 2B          		DCX H         ; Decrement delay counter: 6
0156   100B 7C          		MOV A,H       ; Test count for 0: 4
0157   100C B5          		ORA L         ; Test lower byte: 4
0158   100D C2 0A 10    		JNZ wait1     ; wait for zero count: 7 = 21cycles = 8.54us * 10000 = 86ms
0159   1010             
0160   1010             ; ==========================================================
0161   1010             ; Set up PIO just in case, use M100 ROM settings to configure
0162   1010             ; ==========================================================
0163   1010 3E 43       		MVI A,43H      ; Load configuration for PIO (A=OUT, B=OUT, C=IN, Stop Timer counter)
0164   1012 D3 B0       		OUT PIOCR      ; Set PIO chip configuration
0165   1014 3E EC       		MVI A,0ECH     ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=Modem, Keyscan col 9 enable)
0166   1016 D3 B2       		OUT PIOB       ; Set PIO chip port B configuration
0167   1018 3E FF       		MVI A,0FFH     ; PIO A configuration (Used for Key scan, LCD data, etc.)
0168   101A D3 B1       		OUT PIOA       ; Initialize PIO chip port A
0169   101C             
0170   101C 06 03       		MVI B, 3      ; Wake UP LCD 3 times	
0171   101E             
0172   101E             ; ==========================================================
0173   101E             ; Configure the diagnostic screen
0174   101E             ; 	Assumes no RAM is available until tested
0175   101E             ; ==========================================================
0176   101E             		; INIT diagnostic screen
0177   101E 21 00 00    		LXI H,lcdins  ; Load diagnostic LCD Instruction location
0178   1021             
0179   1021             lcdwakeup:
0180   1021             		;diagnostic LCD WAKEUP
0181   1021 36 30       		MVI M,lcdwake ; Wake up diagnostic LCD
0182   1023             		
0183   1023             		; Wait 1.1ms
0184   1023 0E FF       		MVI C,0FFH     ; Counter 255 	
0185   1025             delay1:
0186   1025 0D          		DCR C          ; Decrement C: 4
0187   1026 C2 25 10    		JNZ delay1     ; Loop until C = 0: 7 = 11 = 4.45us
0188   1029             
0189   1029 05          		DCR B
0190   102A C2 21 10    		JNZ lcdwakeup
0191   102D             
0192   102D             		;diagnostic LCD FUNCTION SET
0193   102D 36 38       		MVI M,lcdfunc   ; Function Set
0194   102F             
0195   102F             		; Wait 40us
0196   102F 0E 0A       		MVI C,10       ; Counter 10 	
0197   1031             delay2:
0198   1031 0D          		DCR C          ; Decrement C: 4
0199   1032 C2 31 10    		JNZ delay2     ; Loop until C = 0: 7 = 11 = 4.45us	
0200   1035             		
0201   1035             		;diagnostic LCD ON
0202   1035 36 0C       		MVI M,lcdon    ; LCD ON			
0203   1037             	
0204   1037             		; Wait 40us		
0205   1037 0E 0A       		MVI C,10       ; Counter 10 	
0206   1039             delay3:
0207   1039 0D          		DCR C          ; Decrement C: 4
0208   103A C2 39 10    		JNZ delay3     ; Loop until C = 0: 7 = 11 = 4.45us
0209   103D             
0210   103D             		;diagnostic LCD MODE
0211   103D 36 06       		MVI M,lcdmode  ; Set LCD mode
0212   103F             		
0213   103F             		; Wait 40us		
0214   103F 0E 0A       		MVI C,10      ; Counter 10 	
0215   1041             delay4:
0216   1041 0D          		DCR C          ; Decrement C: 4
0217   1042 C2 41 10    		JNZ delay4     ; Loop until C = 0: 7 = 11 = 4.45us
0218   1045             
0219   1045             
0220   1045             		;diagnostic LCD CLEAR
0221   1045 36 01       		MVI M,lcdclr   ; LCD Clear
0222   1047             	
0223   1047             		; Wait 1.64ms		
0224   1047             		; Wait 800us
0225   1047 06 02       		MVI B,2
0226   1049             delay5s
0227   1049 0E BE       		MVI C,190      ; Counter 190 	
0228   104B             delay5:
0229   104B 0D          		DCR C          ; Decrement C: 4
0230   104C C2 4B 10    		JNZ delay5     ; Loop until C = 0: 7 = 11 = 4.45us		
0231   104F             		
0232   104F 05          		DCR B
0233   1050 C2 49 10    		JNZ delay5s
0234   1053             
0235   1053             ; ==========================================================
0236   1053             ; Write 'CPU ' text to Diagnostic LCD
0237   1053             ; ==========================================================
0238   1053 3E 8D       		MVI A,08DH      ; Set Cursor to top RH corner
0239   1055 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
0240   1058             		; Wait 40us		
0241   1058 0E 0A       		MVI C,10        ; Counter 10 	
0242   105A             delay5a:
0243   105A 0D          		DCR C          ; Decrement C: 4
0244   105B C2 5A 10    		JNZ delay5a    ; Loop until C = 0: 7 = 11 = 4.45us
0245   105E             		
0246   105E 21 01 00    		LXI H,lcddata  ; Load LCD Data location
0247   1061 36 43       		MVI M,'C'      ; Load C to screen
0248   1063             		
0249   1063             		; Wait 40us		
0250   1063 0E 0A       		MVI C,10      ; Counter 10 	
0251   1065             delay6:
0252   1065 0D          		DCR C          ; Decrement C: 4
0253   1066 C2 65 10    		JNZ delay6    ; Loop until C = 0: 7 = 11 = 4.45us	
0254   1069             		
0255   1069 36 50       		MVI M,'P'      ; Load P to screen
0256   106B             		
0257   106B             		; Wait 40us		
0258   106B 0E 0A       		MVI C,10      ; Counter 10 	
0259   106D             delay7:
0260   106D 0D          		DCR C          ; Decrement C: 4
0261   106E C2 6D 10    		JNZ delay7    ; Loop until C = 0: 7 = 11 = 4.45us	
0262   1071             
0263   1071 36 55       		MVI M,'U'      ; Load P to screen
0264   1073             		
0265   1073             		; Wait 40us		
0266   1073 0E 0A       		MVI C,10      ; Counter 10 	
0267   1075             delay8:
0268   1075 0D          		DCR C          ; Decrement C: 4
0269   1076 C2 75 10    		JNZ delay8    ; Loop until C = 0: 7 = 11 = 4.45us			
0270   1079             
0271   1079 36 20       		MVI M,' '      ; Load space to screen
0272   107B             		
0273   107B             		; Wait 40us		
0274   107B 0E 0A       		MVI C,10      ; Counter 10 	
0275   107D             delay9:
0276   107D 0D          		DCR C          ; Decrement C: 4
0277   107E C2 7D 10    		JNZ delay9    ; Loop until C = 0: 7 = 11 = 4.45us	
0278   1081             		
0279   1081             
0280   1081             ; ==========================================================
0281   1081             ; Write 'RAM ?' text to Diagnostic LCD
0282   1081             ; ==========================================================
0283   1081 3E CC       		MVI A,0CCH      ; Set Cursor to bottom RH corner
0284   1083 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
0285   1086             		; Wait 40us		
0286   1086 0E 0A       		MVI C,10        ; Counter 10 	
0287   1088             delay9a:
0288   1088 0D          		DCR C          ; Decrement C: 4
0289   1089 C2 88 10    		JNZ delay9a    ; Loop until C = 0: 7 = 11 = 4.45us
0290   108C             		
0291   108C 21 01 00    		LXI H,lcddata  ; Load diagnostic LCD Data location
0292   108F 36 52       		MVI M,'R'      ; Load R to diagnostic screen
0293   1091             		
0294   1091             		; Wait 40us		
0295   1091 0E 0A       		MVI C,10      ; Counter 10 	
0296   1093             delay10:
0297   1093 0D          		DCR C          ; Decrement C: 4
0298   1094 C2 93 10    		JNZ delay10    ; Loop until C = 0: 7 = 11 = 4.45us	
0299   1097             		
0300   1097 36 41       		MVI M,'A'      ; Load A to diagnostic screen
0301   1099             		
0302   1099             		; Wait 40us		
0303   1099 0E 0A       		MVI C,10      ; Counter 10 	
0304   109B             delay11:
0305   109B 0D          		DCR C          ; Decrement C: 4
0306   109C C2 9B 10    		JNZ delay11    ; Loop until C = 0: 7 = 11 = 4.45us	
0307   109F             
0308   109F 36 4D       		MVI M,'M'      ; Load M to diagnostic screen
0309   10A1             		
0310   10A1             		; Wait 40us		
0311   10A1 0E 0A       		MVI C,10      ; Counter 10 	
0312   10A3             delay12:
0313   10A3 0D          		DCR C          ; Decrement C: 4
0314   10A4 C2 A3 10    		JNZ delay12    ; Loop until C = 0: 7 = 11 = 4.45us			
0315   10A7             
0316   10A7 36 3F       		MVI M,'?'      ; Load space to diagnostic screen
0317   10A9             		
0318   10A9             		; Wait 40us		
0319   10A9 0E 0A       		MVI C,10      ; Counter 10 	
0320   10AB             delay13:
0321   10AB 0D          		DCR C          ; Decrement C: 4
0322   10AC C2 AB 10    		JNZ delay13   ; Loop until C = 0: 7 = 11 = 4.45us
0323   10AF             
0324   10AF             ; ##########################################################
0325   10AF             ; ##########################################################		
0326   10AF             ; **********************************************************
0327   10AF             ; RAM TESTS
0328   10AF             ; 	Check each RAM bank
0329   10AF             ; 	Indicate which banks are present
0330   10AF             ; 	Test banks that exist by writing each byte.
0331   10AF             ; 	Indicate any failures
0332   10AF             ; 	Once tested use the stack as part of the testing 
0333   10AF             ;	if required
0334   10AF             ; **********************************************************
0335   10AF             ; Used in settings for the RAM tests
0336   10AF             goodmemch	.equ 'm' ; LC to make it more obvious
0337   10AF             badmemch  	.equ 'F' ; UC to make it stand out
0338   10AF             badpagech  	.equ 'H' ; UC to make it stand out
0339   10AF             backupch	.equ 'B'
0340   10AF             nobackupch	.equ '.'
0341   10AF             goodblock	.equ 'g'
0342   10AF             backupbyte	.equ 0AAH   ; Needs to be set to the last ram test byte
0343   10AF             
0344   10AF             ; ==============================================================
0345   10AF             ; Set up the cursor positions
0346   10AF             ; ==============================================================
0347   10AF 3E 80       		MVI A,080H      ; Set Cursor to top LH corner
0348   10B1 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
0349   10B4             		; Wait 40us				
0350   10B4 0E 0A       		MVI C,10        ; Counter 10 	
0351   10B6             delay14:
0352   10B6 0D          		DCR C          ; Decrement C: 4
0353   10B7 C2 B6 10    		JNZ delay14    ; Loop until C = 0: 7 = 11 = 4.45us
0354   10BA             		
0355   10BA             ; =============================================================
0356   10BA             ; TEST Set 1:
0357   10BA             ;   Is made up of 3 tests:
0358   10BA             ;   - Attempt to check the battery backup works.  Only works
0359   10BA             ;     on second attempt.
0360   10BA             ; 	- Test each memory location. Make sure it is OK.
0361   10BA             ;   - Test the first 256 bytes of the RAM to check A7-A0 address
0362   10BA             ;     lines for stuck faults.
0363   10BA             ; ==============================================================
0364   10BA             ; Example diagnostic screen layout
0365   10BA             ;		.text "0123456789ABCDEF"
0366   10BA             ;		.text ".mgg.mgg.mgg.Fgg" ; 080H
0367   10BA             ;		.text "mmmmmmmmmmmm1mmm" ; 0C0H
0368   10BA             
0369   10BA             ;33333333333333333333333333333
0370   10BA             ;*****************************
0371   10BA             ;*** Test RAM3	
0372   10BA             ;*****************************
0373   10BA             ;*** Test Battery Backup 3 ***
0374   10BA             ;*****************************
0375   10BA             ; Check for data retention from last run should contain 0AAH
0376   10BA 21 2C 81    		LXI H,ram3+300	 ; Standard RAM location 08064H	
0377   10BD             		
0378   10BD 7E          		MOV A,M
0379   10BE FE AA       		CPI backupbyte
0380   10C0 3E 2E       		MVI A,nobackupch
0381   10C2 C2 C7 10    		JNZ ramblktop3
0382   10C5 3E 42       		MVI A,backupch
0383   10C7             				
0384   10C7             ; Set HL to start of first RAM block location
0385   10C7             ramblktop3:
0386   10C7 32 01 00    		STA lcddata	
0387   10CA             
0388   10CA             ;*****************************
0389   10CA             ;*** Complete memory test 3 **	
0390   10CA             ;*****************************
0391   10CA 21 00 80    		LXI H,ram3		 ; Standard RAM location 08000H		
0392   10CD             								
0393   10CD             ramblktst3:
0394   10CD 11 5A 29    		LXI D,ramtstdata ; Load the RAM byte test data table
0395   10D0             tstloc3:
0396   10D0 1A          		LDAX D   		 ; D = Current RAM byte test data
0397   10D1 FE FE       		CPI eotramtests  ; 0FEH Check end of table
0398   10D3 CA E0 10    		JZ nextloc3       
0399   10D6 77          		MOV M,A			 ; Write RAM location to table entry
0400   10D7 4E          		MOV C,M          ; Read RAM location
0401   10D8 B9          		CMP C		     ; Compare locations
0402   10D9 C2 F3 10    		JNZ tstfail3     ; Not equal RAM location failed
0403   10DC 13          		INX D            ; Get next RAM test byte
0404   10DD C3 D0 10    		JMP tstloc3      
0405   10E0             nextloc3:                ; Move to next RAM location to test
0406   10E0 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0407   10E1 7C          		MOV A,H          ; Check HL == 0
0408   10E2 FE A0       		CPI 0A0H         ; Compare next block
0409   10E4 CA EA 10    		JZ tstfin3       ; Finished testing
0410   10E7 C2 CD 10    		JNZ ramblktst3
0411   10EA             		
0412   10EA             tstfin3:
0413   10EA 3E 6D       		MVI A,goodmemch   ; Test OK
0414   10EC 31 00 90    		LXI SP,ram3+1000H ; Memory Block + 1000H
0415   10EF F5          		PUSH PSW          ; Put the goodmemch on the stack
0416   10F0 C3 F5 10    		JMP exitblk3
0417   10F3             tstfail3:
0418   10F3 3E 46       		MVI A,badmemch    ; Test Fail
0419   10F5             
0420   10F5             exitblk3:
0421   10F5 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0422   10F8             									
0423   10F8             ;*****************************
0424   10F8             ;*** First page RAM test 3 ***
0425   10F8             ;*****************************
0426   10F8 21 00 80    		LXI H,ram3	; Standard RAM location 08000H
0427   10FB AF          		XRA A
0428   10FC             
0429   10FC             ; Set up the first page
0430   10FC             fpramtst3init:
0431   10FC 3C          		INR A
0432   10FD 77          		MOV M,A		; Read the value
0433   10FE 2C          		INR L		; Next one in the list
0434   10FF C2 FC 10    		JNZ fpramtst3init   ; Keep going until done
0435   1102             
0436   1102             		; Wait see if memory retains contents
0437   1102 0E C8       		MVI C,200	
0438   1104             delayfp3:
0439   1104 0D          		DCR C          ; Decrement C: 4
0440   1105 C2 04 11    		JNZ delayfp3   ; Loop until C = 0: 7 = 11 = 4.45us
0441   1108             
0442   1108 21 00 80    		LXI H,ram3     ; Standard RAM location 08000H
0443   110B AF          		XRA A
0444   110C             
0445   110C             fpramtst3:		
0446   110C 3C          		INR A
0447   110D BE          		CMP M		; Compare with memory
0448   110E C2 1A 11    		JNZ fpramtst3fail 
0449   1111             
0450   1111 2C          		INR L		; Next one in the list
0451   1112 C2 0C 11    		JNZ fpramtst3   ; Keep going until done
0452   1115 3E 67       		MVI A,goodblock
0453   1117 C3 1C 11    		JMP fpramtst3exit ; Test complete
0454   111A             
0455   111A             fpramtst3fail:
0456   111A 3E 48       		MVI A,badpagech  
0457   111C             	
0458   111C             fpramtst3exit:
0459   111C 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0460   111F             		
0461   111F             ;*****************************
0462   111F             ;****** 256byte test 3 *******	
0463   111F             ;*****************************
0464   111F             ramloopstart3:
0465   111F 21 00 80    		LXI H,ram3		 ; Standard RAM location 08000H		
0466   1122             
0467   1122             ;Write test data to boundaries to check for SA Address lines
0468   1122 36 08       		MVI M,8         ; Set 1st Location to 8
0469   1124             				
0470   1124 23          		INX H           ; Address 1
0471   1125 36 07       		MVI M,7
0472   1127             				
0473   1127 21 02 80    		LXI H,ram3+002H ; Address 2
0474   112A 36 06       		MVI M,6
0475   112C             		
0476   112C 21 04 80    		LXI H,ram3+004H ; Address 4
0477   112F 36 05       		MVI M,5
0478   1131             		
0479   1131 21 08 80    		LXI H,ram3+008H ; Address 8
0480   1134 36 04       		MVI M,4
0481   1136             		
0482   1136 21 10 80    		LXI H,ram3+010H ; Address 16
0483   1139 36 03       		MVI M,3
0484   113B             		
0485   113B 21 20 80    		LXI H,ram3+020H ; Address 32
0486   113E 36 02       		MVI M,2
0487   1140             		
0488   1140 21 40 80    		LXI H,ram3+040H	; Address 64
0489   1143 36 01       		MVI M,1
0490   1145             		
0491   1145 21 80 80    		LXI H,ram3+080H ; Address 128
0492   1148 36 00       		MVI M,0
0493   114A             
0494   114A             ;Check the contents of the tested RAM		
0495   114A 21 00 80    		LXI H,ram3	; Standard RAM location 08000H		
0496   114D 3E 08       		MVI A,8
0497   114F             		
0498   114F BE          		CMP M       ; Compare first locations				
0499   1150 C2 96 11    		JNZ ramloop3testfail ; Test failed
0500   1153             
0501   1153 23          		INX H       ; Address 1		
0502   1154 3D          		DCR A
0503   1155 BE          		CMP M       ; Compare Address 1			
0504   1156 C2 96 11    		JNZ ramloop3testfail ; Test failed
0505   1159             
0506   1159 3D          		DCR A				
0507   115A 21 02 80    		LXI H,ram3+002H ; Address 2
0508   115D BE          		CMP M           ; Compare Address 2		
0509   115E C2 96 11    		JNZ ramloop3testfail ; Test failed
0510   1161             
0511   1161 3D          		DCR A				
0512   1162 21 04 80    		LXI H,ram3+004H ; Address 4
0513   1165 BE          		CMP M           ; Compare Address 4		
0514   1166 C2 96 11    		JNZ ramloop3testfail ; Test failed
0515   1169             		
0516   1169 3D          		DCR A				
0517   116A 21 08 80    		LXI H,ram3+008H ; Address 8
0518   116D BE          		CMP M           ; Compare Address 8	
0519   116E C2 96 11    		JNZ ramloop3testfail ; Test failed
0520   1171             		
0521   1171 3D          		DCR A				
0522   1172 21 10 80    		LXI H,ram3+010H ; Address 16
0523   1175 BE          		CMP M           ; Compare Address 16		
0524   1176 C2 96 11    		JNZ ramloop3testfail ; Test failed
0525   1179             		
0526   1179 3D          		DCR A				
0527   117A 21 20 80    		LXI H,ram3+020H ; Address 32
0528   117D BE          		CMP M           ; Compare Address 32		
0529   117E C2 96 11    		JNZ ramloop3testfail ; Test failed
0530   1181             		
0531   1181 3D          		DCR A				
0532   1182 21 40 80    		LXI H,ram3+040H ; Address 64
0533   1185 BE          		CMP M           ; Compare Address 64		
0534   1186 C2 96 11    		JNZ ramloop3testfail ; Test failed
0535   1189             		
0536   1189 3D          		DCR A				
0537   118A 21 80 80    		LXI H,ram3+080H ; Address 128
0538   118D BE          		CMP M           ; Compare Address 128		
0539   118E C2 96 11    		JNZ ramloop3testfail ; Test failed		
0540   1191             
0541   1191             		;Test successful
0542   1191 3E 67       		MVI A,goodblock		
0543   1193 C3 9C 11    		JMP ramloop3testend		
0544   1196             		
0545   1196             ramloop3testfail:
0546   1196 4F          		MOV C,A
0547   1197 3E 08       		MVI A,8
0548   1199 91          		SUB C
0549   119A C6 30       		ADI '0'  		
0550   119C             
0551   119C             ramloop3testend:
0552   119C 32 01 00    		STA lcddata
0553   119F             
0554   119F             
0555   119F             		; Wait 40us				
0556   119F 0E 0A       		MVI C,10        ; Counter 10 	
0557   11A1             delayr3:
0558   11A1 0D          		DCR C          ; Decrement C: 4
0559   11A2 C2 A1 11    		JNZ delayr3    ; Loop until C = 0: 7 = 11 = 4.45us	
0560   11A5             
0561   11A5             ;22222222222222222222222222222
0562   11A5             ;*****************************
0563   11A5             ;*** Test RAM2	
0564   11A5             ;*****************************
0565   11A5             ;*** Test Battery Backup 2 ***
0566   11A5             ;*****************************
0567   11A5             ; Check for data retention from last run should contain 0AAH
0568   11A5 21 2C A1    		LXI H,ram2+300	 ; Standard RAM location 0A064H	
0569   11A8             		
0570   11A8 7E          		MOV A,M
0571   11A9 FE AA       		CPI backupbyte
0572   11AB 3E 2E       		MVI A,nobackupch
0573   11AD C2 B2 11    		JNZ ramblktop2
0574   11B0 3E 42       		MVI A,backupch
0575   11B2             					
0576   11B2             ; Set HL to start of highest memory location
0577   11B2             ramblktop2:
0578   11B2 32 01 00    		STA lcddata	
0579   11B5             
0580   11B5             ;*****************************
0581   11B5             ;*** Complete memory test 2 **	
0582   11B5             ;*****************************
0583   11B5 21 00 A0    		LXI H,ram2		 ; Standard RAM location 0A000H
0584   11B8             ramblktst2:
0585   11B8 11 5A 29    		LXI D,ramtstdata ; Load the RAM byte test data table
0586   11BB             tstloc2:
0587   11BB 1A          		LDAX D   		 ; D = Current RAM byte test data
0588   11BC FE FE       		CPI eotramtests  ; 0FEH Check end of table
0589   11BE CA CB 11    		JZ nextloc2       
0590   11C1 77          		MOV M,A		 ; Write RAM location to table entry
0591   11C2 4E          		MOV C,M          ; Read RAM location
0592   11C3 B9          		CMP C		 ; Compare locations
0593   11C4 C2 DE 11    		JNZ tstfail2   	 ; Not equal RAM location failed
0594   11C7 13          		INX D            ; Get next RAM test byte
0595   11C8 C3 BB 11    		JMP tstloc2       
0596   11CB             nextloc2:                ; Move to next RAM location to test
0597   11CB 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0598   11CC 7C          		MOV A,H          ; Check HL == 0
0599   11CD FE C0       		CPI 0C0H         ; Compare next block
0600   11CF CA D5 11    		JZ tstfin2       ; Finished testing
0601   11D2 C2 B8 11    		JNZ ramblktst2
0602   11D5             		
0603   11D5             tstfin2:
0604   11D5 3E 6D       		MVI A,goodmemch  ; Test OK
0605   11D7 31 00 B0    		LXI SP,ram2+1000H; Top Memory Block + 10
0606   11DA F5          		PUSH PSW         ; Put the 'M' on the stack
0607   11DB C3 E0 11    		JMP exitblk2
0608   11DE             tstfail2:
0609   11DE 3E 46       		MVI A,badmemch   ; Test Fail
0610   11E0             
0611   11E0             exitblk2:
0612   11E0 32 01 00    		STA lcddata    	 ; Load RAM # to screen	
0613   11E3             
0614   11E3             ;*****************************
0615   11E3             ;*** First page RAM test 2 ***
0616   11E3             ;*****************************
0617   11E3 21 00 A0    		LXI H,ram2	; Standard RAM location 0A000H
0618   11E6 AF          		XRA A
0619   11E7             
0620   11E7             ; Set up the first page
0621   11E7             fpramtst2init:
0622   11E7 3C          		INR A
0623   11E8 77          		MOV M,A		; Read the value
0624   11E9 2C          		INR L		; Next one in the list
0625   11EA C2 E7 11    		JNZ fpramtst2init   ; Keep going until done
0626   11ED             
0627   11ED 0E C8       		MVI C,200	
0628   11EF             delayfp2:
0629   11EF 0D          		DCR C          ; Decrement C: 4
0630   11F0 C2 EF 11    		JNZ delayfp2   ; Loop until C = 0: 7 = 11 = 4.45us
0631   11F3             
0632   11F3 21 00 A0    		LXI H,ram2    ; Standard RAM location 0A000H
0633   11F6 AF          		XRA A
0634   11F7             
0635   11F7             fpramtst2:		
0636   11F7 3C          		INR A
0637   11F8 BE          		CMP M		; Compare with memory
0638   11F9 C2 05 12    		JNZ fpramtst2fail 
0639   11FC             
0640   11FC 2C          		INR L		; Next one in the list
0641   11FD C2 F7 11    		JNZ fpramtst2   ; Keep going until done
0642   1200 3E 67       		MVI A,goodblock
0643   1202 C3 07 12    		JMP fpramtst2exit ; Test complete
0644   1205             
0645   1205             fpramtst2fail:
0646   1205 3E 48       		MVI A,badpagech  
0647   1207             	
0648   1207             fpramtst2exit:
0649   1207 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0650   120A             						    
0651   120A             ;*****************************
0652   120A             ;******* 256byte test 2 ******	
0653   120A             ;*****************************
0654   120A 21 00 A0    		LXI H,ram2	; Standard RAM location 0A000H		
0655   120D             
0656   120D             ;Write test data to boundaries to check for SA Address lines
0657   120D 36 08       		MVI M,8     ; Clear first location
0658   120F             				
0659   120F 23          		INX H           ; Address 1
0660   1210 36 07       		MVI M,7
0661   1212             				
0662   1212 21 02 A0    		LXI H,ram2+002H ; Address 2
0663   1215 36 06       		MVI M,6
0664   1217             		
0665   1217 21 04 A0    		LXI H,ram2+004H ; Address 4
0666   121A 36 05       		MVI M,5
0667   121C             		
0668   121C 21 08 A0    		LXI H,ram2+008H ; Address 8
0669   121F 36 04       		MVI M,4
0670   1221             		
0671   1221 21 10 A0    		LXI H,ram2+010H ; Address 16
0672   1224 36 03       		MVI M,3
0673   1226             		
0674   1226 21 20 A0    		LXI H,ram2+020H ; Address 32
0675   1229 36 02       		MVI M,2
0676   122B             		
0677   122B 21 40 A0    		LXI H,ram2+040H	; Address 64
0678   122E 36 01       		MVI M,1
0679   1230             		
0680   1230 21 80 A0    		LXI H,ram2+080H ; Address 128
0681   1233 36 00       		MVI M,0
0682   1235             
0683   1235             ;Check the contents of the tested RAM		
0684   1235 21 00 A0    		LXI H,ram2	; Standard RAM location 0A000H		
0685   1238 3E 08       		MVI A,8
0686   123A             		
0687   123A BE          		CMP M       ; Compare first locations				
0688   123B C2 81 12    		JNZ ramloop2testfail ; Test failed
0689   123E             
0690   123E 23          		INX H       ; Address 1		
0691   123F 3D          		DCR A
0692   1240 BE          		CMP M       ; Compare Address 1			
0693   1241 C2 81 12    		JNZ ramloop2testfail ; Test failed
0694   1244             
0695   1244 3D          		DCR A				
0696   1245 21 02 A0    		LXI H,ram2+002H ; Address 2
0697   1248 BE          		CMP M           ; Compare Address 2		
0698   1249 C2 81 12    		JNZ ramloop2testfail ; Test failed
0699   124C             
0700   124C 3D          		DCR A				
0701   124D 21 04 A0    		LXI H,ram2+004H ; Address 4
0702   1250 BE          		CMP M           ; Compare Address 4		
0703   1251 C2 81 12    		JNZ ramloop2testfail ; Test failed
0704   1254             		
0705   1254 3D          		DCR A				
0706   1255 21 08 A0    		LXI H,ram2+008H ; Address 8
0707   1258 BE          		CMP M           ; Compare Address 8	
0708   1259 C2 81 12    		JNZ ramloop2testfail ; Test failed
0709   125C             		
0710   125C 3D          		DCR A				
0711   125D 21 10 A0    		LXI H,ram2+010H ; Address 16
0712   1260 BE          		CMP M           ; Compare Address 16		
0713   1261 C2 81 12    		JNZ ramloop2testfail ; Test failed
0714   1264             		
0715   1264 3D          		DCR A				
0716   1265 21 20 A0    		LXI H,ram2+020H ; Address 32
0717   1268 BE          		CMP M           ; Compare Address 32		
0718   1269 C2 81 12    		JNZ ramloop2testfail ; Test failed
0719   126C             		
0720   126C 3D          		DCR A				
0721   126D 21 40 A0    		LXI H,ram2+040H ; Address 64
0722   1270 BE          		CMP M           ; Compare Address 64		
0723   1271 C2 81 12    		JNZ ramloop2testfail ; Test failed
0724   1274             		
0725   1274 3D          		DCR A				
0726   1275 21 80 A0    		LXI H,ram2+080H ; Address 128
0727   1278 BE          		CMP M           ; Compare Address 128		
0728   1279 C2 81 12    		JNZ ramloop2testfail ; Test failed		
0729   127C             
0730   127C             		;Test successful
0731   127C 3E 67       		MVI A,goodblock		
0732   127E C3 87 12    		JMP ramloop2testend		
0733   1281             		
0734   1281             ramloop2testfail:
0735   1281 4F          		MOV C,A
0736   1282 3E 08       		MVI A,8
0737   1284 91          		SUB C
0738   1285 C6 30       		ADI '0'  		
0739   1287             
0740   1287             ramloop2testend:
0741   1287 32 01 00    		STA lcddata	
0742   128A             
0743   128A             		; Wait 40us				
0744   128A 0E 0A       		MVI C,10        ; Counter 10 	
0745   128C             delayr2:
0746   128C 0D          		DCR C          ; Decrement C: 4
0747   128D C2 8C 12    		JNZ delayr2    ; Loop until C = 0: 7 = 11 = 4.45us
0748   1290             
0749   1290             ;11111111111111111111111111111
0750   1290             ;*****************************
0751   1290             ;*** Test RAM1
0752   1290             ;*****************************
0753   1290             ;*** Test Battery Backup 1 ***
0754   1290             ;*****************************
0755   1290             ; Check for data retention from last run should contain 0AAH
0756   1290 21 2C C1    		LXI H,ram1+300	 ; Standard RAM location 0C064H	
0757   1293             		
0758   1293 7E          		MOV A,M
0759   1294 FE AA       		CPI backupbyte
0760   1296 3E 2E       		MVI A,nobackupch
0761   1298 C2 9D 12    		JNZ ramblktop1
0762   129B 3E 42       		MVI A,backupch
0763   129D             					
0764   129D             ; Set HL to start of highest memory location
0765   129D             ramblktop1:
0766   129D 32 01 00    		STA lcddata	
0767   12A0             		
0768   12A0             ;*****************************
0769   12A0             ;*** Complete memory test 1 **	
0770   12A0             ;*****************************
0771   12A0 21 00 C0    		LXI H,ram1		 ; Standard RAM location 0C000H
0772   12A3             		
0773   12A3             ramblktst1:
0774   12A3 11 5A 29    		LXI D,ramtstdata ; Load the RAM byte test data table
0775   12A6             tstloc1:
0776   12A6 1A          		LDAX D   		 ; D = Current RAM byte test data
0777   12A7 FE FE       		CPI eotramtests  ; 0FEH Check end of table
0778   12A9 CA B6 12    		JZ nextloc1       
0779   12AC 77          		MOV M,A			 ; Write RAM location to table entry
0780   12AD 4E          		MOV C,M          ; Read RAM location
0781   12AE B9          		CMP C			 ; Compare locations
0782   12AF C2 C9 12    		JNZ tstfail1   	 ; Not equal RAM location failed
0783   12B2 13          		INX D            ; Get next RAM test byte
0784   12B3 C3 A6 12    		JMP tstloc1       
0785   12B6             nextloc1:                ; Move to next RAM location to test
0786   12B6 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0787   12B7 7C          		MOV A,H          ; Check HL == 0
0788   12B8 FE E0       		CPI 0E0H         ; Compare next block
0789   12BA CA C0 12    		JZ tstfin1       ; Finished testing
0790   12BD C2 A3 12    		JNZ ramblktst1
0791   12C0             		
0792   12C0             tstfin1:
0793   12C0 3E 6D       		MVI A,goodmemch  	; Test OK
0794   12C2 31 00 D0    		LXI SP,ram1+1000H	; Top Memory Block + 10
0795   12C5 F5          		PUSH PSW         	; Put the 'X' on the stack
0796   12C6 C3 CB 12    		JMP exitblk1
0797   12C9             tstfail1:
0798   12C9 3E 46       		MVI A,badmemch   ; Test Fail
0799   12CB             
0800   12CB             exitblk1:
0801   12CB 32 01 00    		STA lcddata    	 ; Load RAM # to screen		
0802   12CE 0E 0A       		MVI C,10         ; Counter 10 	
0803   12D0             delaybl11:
0804   12D0 0D          		DCR C            ; Decrement C: 4
0805   12D1 C2 D0 12    		JNZ delaybl11    ; Loop until C = 0: 7 = 11 = 4.45us	
0806   12D4             
0807   12D4             ;*****************************
0808   12D4             ;*** First page RAM test 1 ***
0809   12D4             ;*****************************
0810   12D4 21 00 C0    		LXI H,ram1	; Standard RAM location 0C000H
0811   12D7 AF          		XRA A
0812   12D8             
0813   12D8             ; Set up the first page
0814   12D8             fpramtst1init:
0815   12D8 3C          		INR A
0816   12D9 77          		MOV M,A		; Read the value
0817   12DA 2C          		INR L		; Next one in the list
0818   12DB C2 D8 12    		JNZ fpramtst1init   ; Keep going until done
0819   12DE             
0820   12DE 0E C8       		MVI C,200	
0821   12E0             delayfp1:
0822   12E0 0D          		DCR C          ; Decrement C: 4
0823   12E1 C2 E0 12    		JNZ delayfp1   ; Loop until C = 0: 7 = 11 = 4.45us
0824   12E4             
0825   12E4 21 00 C0    		LXI H,ram1    ; Standard RAM location 0C000H
0826   12E7 AF          		XRA A
0827   12E8             
0828   12E8             fpramtst1:		
0829   12E8 3C          		INR A
0830   12E9 BE          		CMP M		; Compare with memory
0831   12EA C2 F6 12    		JNZ fpramtst1fail 
0832   12ED             
0833   12ED 2C          		INR L		    ; Next one in the list
0834   12EE C2 E8 12    		JNZ fpramtst1   ; Keep going until done
0835   12F1 3E 67       		MVI A,goodblock
0836   12F3 C3 F8 12    		JMP fpramtst1exit ; Test complete
0837   12F6             
0838   12F6             fpramtst1fail:
0839   12F6 3E 48       		MVI A,badpagech  
0840   12F8             	
0841   12F8             fpramtst1exit:
0842   12F8 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0843   12FB             		
0844   12FB             ;*****************************
0845   12FB             ;****** 256byte test 1 *******	
0846   12FB             ;*****************************
0847   12FB 21 00 C0    		LXI H,ram1		 ; Standard RAM location 0C000H		
0848   12FE             
0849   12FE             ;Write test data to boundaries to check for SA Address lines
0850   12FE 36 08       		MVI M,8     ; Clear first location
0851   1300             				
0852   1300 23          		INX H           ; Address 1
0853   1301 36 07       		MVI M,7
0854   1303             				
0855   1303 21 02 C0    		LXI H,ram1+002H ; Address 2
0856   1306 36 06       		MVI M,6
0857   1308             		
0858   1308 21 04 C0    		LXI H,ram1+004H ; Address 4
0859   130B 36 05       		MVI M,5
0860   130D             		
0861   130D 21 08 C0    		LXI H,ram1+008H ; Address 8
0862   1310 36 04       		MVI M,4
0863   1312             		
0864   1312 21 10 C0    		LXI H,ram1+010H ; Address 16
0865   1315 36 03       		MVI M,3
0866   1317             		
0867   1317 21 20 C0    		LXI H,ram1+020H ; Address 32
0868   131A 36 02       		MVI M,2
0869   131C             		
0870   131C 21 40 C0    		LXI H,ram1+040H	; Address 64
0871   131F 36 01       		MVI M,1
0872   1321             		
0873   1321 21 80 C0    		LXI H,ram1+080H ; Address 128
0874   1324 36 00       		MVI M,0
0875   1326             
0876   1326             ;Check the contents of the tested RAM		
0877   1326 21 00 C0    		LXI H,ram1	; Standard RAM location 0C000H		
0878   1329 3E 08       		MVI A,8
0879   132B             		
0880   132B BE          		CMP M       ; Compare first locations				
0881   132C C2 72 13    		JNZ ramloop1testfail ; Test failed
0882   132F             
0883   132F 23          		INX H       ; Address 1		
0884   1330 3D          		DCR A
0885   1331 BE          		CMP M       ; Compare Address 1			
0886   1332 C2 72 13    		JNZ ramloop1testfail ; Test failed
0887   1335             
0888   1335 3D          		DCR A				
0889   1336 21 02 C0    		LXI H,ram1+002H ; Address 2
0890   1339 BE          		CMP M           ; Compare Address 2		
0891   133A C2 72 13    		JNZ ramloop1testfail ; Test failed
0892   133D             
0893   133D 3D          		DCR A				
0894   133E 21 04 C0    		LXI H,ram1+004H ; Address 4
0895   1341 BE          		CMP M           ; Compare Address 4		
0896   1342 C2 72 13    		JNZ ramloop1testfail ; Test failed
0897   1345             		
0898   1345 3D          		DCR A				
0899   1346 21 08 C0    		LXI H,ram1+008H ; Address 8
0900   1349 BE          		CMP M           ; Compare Address 8	
0901   134A C2 72 13    		JNZ ramloop1testfail ; Test failed
0902   134D             		
0903   134D 3D          		DCR A				
0904   134E 21 10 C0    		LXI H,ram1+010H ; Address 16
0905   1351 BE          		CMP M           ; Compare Address 16		
0906   1352 C2 72 13    		JNZ ramloop1testfail ; Test failed
0907   1355             		
0908   1355 3D          		DCR A				
0909   1356 21 20 C0    		LXI H,ram1+020H ; Address 32
0910   1359 BE          		CMP M           ; Compare Address 32		
0911   135A C2 72 13    		JNZ ramloop1testfail ; Test failed
0912   135D             		
0913   135D 3D          		DCR A				
0914   135E 21 40 C0    		LXI H,ram1+040H ; Address 64
0915   1361 BE          		CMP M           ; Compare Address 64		
0916   1362 C2 72 13    		JNZ ramloop1testfail ; Test failed
0917   1365             		
0918   1365 3D          		DCR A				
0919   1366 21 80 C0    		LXI H,ram1+080H ; Address 128
0920   1369 BE          		CMP M           ; Compare Address 128		
0921   136A C2 72 13    		JNZ ramloop1testfail ; Test failed		
0922   136D             
0923   136D             		;Test successful
0924   136D 3E 67       		MVI A,goodblock		
0925   136F C3 78 13    		JMP ramloop1testend		
0926   1372             		
0927   1372             ramloop1testfail:
0928   1372 4F          		MOV C,A
0929   1373 3E 08       		MVI A,8
0930   1375 91          		SUB C
0931   1376 C6 30       		ADI '0'  		
0932   1378             
0933   1378             ramloop1testend:
0934   1378 32 01 00    		STA lcddata	
0935   137B             
0936   137B             		; Wait 40us				
0937   137B 0E 0A       		MVI C,10        ; Counter 10 	
0938   137D             delayr1:
0939   137D 0D          		DCR C          ; Decrement C: 4
0940   137E C2 7D 13    		JNZ delayr1    ; Loop until C = 0: 7 = 11 = 4.45us
0941   1381             
0942   1381             ;00000000000000000000000000000
0943   1381             ;*****************************
0944   1381             ;*** RAM 0
0945   1381             ;*****************************
0946   1381             ;*** Test Battery Backup 0 ***
0947   1381             ;*****************************
0948   1381             ; Check for data retention from last run should contain 0AAH		
0949   1381 21 2C E1    		LXI H,ram0+300	 ; Standard RAM location 0E064H	
0950   1384             		
0951   1384 7E          		MOV A,M
0952   1385 FE AA       		CPI backupbyte
0953   1387 3E 2E       		MVI A,nobackupch
0954   1389 C2 8E 13    		JNZ ramblktop
0955   138C 3E 42       		MVI A,backupch
0956   138E             
0957   138E             ; Set HL to start of highest memory location
0958   138E             ramblktop:
0959   138E 32 01 00    		STA lcddata
0960   1391             
0961   1391             ;*****************************
0962   1391             ;*** Complete memory test 0 **
0963   1391             ;*****************************
0964   1391 21 00 E0    		LXI H,ram0   ; Standard RAM location 0E000H	
0965   1394             ramblktst:
0966   1394 11 5A 29    		LXI D,ramtstdata ; Load the RAM byte test data table
0967   1397             tstloc:
0968   1397 1A          		LDAX D   	     ; D = Current RAM byte test data
0969   1398 FE FE       		CPI eotramtests  ;0FEH Check end of table
0970   139A CA A7 13    		JZ nextloc       
0971   139D 77          		MOV M,A			 ; Write RAM location to table entry
0972   139E 4E          		MOV C,M          ; Read RAM location
0973   139F B9          		CMP C			 ; Compare locations
0974   13A0 C2 BA 13    		JNZ tstfail   	 ; Not equal RAM location failed
0975   13A3 13          		INX D            ; Get next RAM test byte
0976   13A4 C3 97 13    		JMP tstloc       
0977   13A7             nextloc:                 ; Move to next RAM location to test
0978   13A7 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0979   13A8 7C          		MOV A,H          ; Check HL == 0
0980   13A9 FE 00       		CPI 0H
0981   13AB CA B1 13    		JZ tstfin        ; Finished testing if HL == 0
0982   13AE C2 94 13    		JNZ ramblktst
0983   13B1             		
0984   13B1             tstfin:
0985   13B1 3E 6D       		MVI A,goodmemch   ; Test OK
0986   13B3 31 00 F0    		LXI SP,ram0+1000H ; Top Memory Block + 1000H
0987   13B6 F5          		PUSH PSW          ; Put the char on the stack
0988   13B7 C3 BC 13    		JMP exitblk
0989   13BA             tstfail:
0990   13BA 3E 46       		MVI A,badmemch    ; Test Fail
0991   13BC             
0992   13BC             exitblk:
0993   13BC 32 01 00    		STA lcddata    	 ; Load RAM # to screen	
0994   13BF             	
0995   13BF             ;*****************************
0996   13BF             ;*** First page RAM test 0 ***
0997   13BF             ;*****************************
0998   13BF 21 00 E0    		LXI H,ram0	; Standard RAM location 0E000H
0999   13C2 AF          		XRA A
1000   13C3             
1001   13C3             ; Set up the first page
1002   13C3             fpramtst0init:
1003   13C3 3C          		INR A
1004   13C4 77          		MOV M,A		; Read the value
1005   13C5 2C          		INR L		; Next one in the list
1006   13C6 C2 C3 13    		JNZ fpramtst0init   ; Keep going until done
1007   13C9             
1008   13C9 0E C8       		MVI C,200	
1009   13CB             delayfp0:
1010   13CB 0D          		DCR C          ; Decrement C: 4
1011   13CC C2 CB 13    		JNZ delayfp0   ; Loop until C = 0: 7 = 11 = 4.45us
1012   13CF             
1013   13CF 21 00 E0    		LXI H,ram0    ; Standard RAM location 0E000H
1014   13D2 AF          		XRA A
1015   13D3             
1016   13D3             fpramtst0:		
1017   13D3 3C          		INR A
1018   13D4 BE          		CMP M		; Compare with memory
1019   13D5 C2 E1 13    		JNZ fpramtst0fail 
1020   13D8             
1021   13D8 2C          		INR L			; Next one in the list
1022   13D9 C2 D3 13    		JNZ fpramtst0   ; Keep going until done
1023   13DC 3E 67       		MVI A,goodblock
1024   13DE C3 E3 13    		JMP fpramtst0exit ; Test complete
1025   13E1             
1026   13E1             fpramtst0fail:
1027   13E1 3E 48       		MVI A,badpagech  
1028   13E3             	
1029   13E3             fpramtst0exit:
1030   13E3 32 01 00    		STA lcddata    	 ; Load RAM # to screen
1031   13E6             
1032   13E6             ;*****************************
1033   13E6             ;******* 256byte test 0 ******	
1034   13E6             ;*****************************
1035   13E6 21 00 E0    		LXI H,ram0		 ; Standard RAM location 0E000H		
1036   13E9             
1037   13E9             ;Write test data to boundaries to check for SA Address lines
1038   13E9 36 08       		MVI M,8         ; Clear first location
1039   13EB             				
1040   13EB 23          		INX H           ; Address 1
1041   13EC 36 07       		MVI M,7
1042   13EE             				
1043   13EE 21 02 E0    		LXI H,ram0+002H ; Address 2
1044   13F1 36 06       		MVI M,6
1045   13F3             		
1046   13F3 21 04 E0    		LXI H,ram0+004H ; Address 4
1047   13F6 36 05       		MVI M,5
1048   13F8             		
1049   13F8 21 08 E0    		LXI H,ram0+008H ; Address 8
1050   13FB 36 04       		MVI M,4
1051   13FD             		
1052   13FD 21 10 E0    		LXI H,ram0+010H ; Address 16
1053   1400 36 03       		MVI M,3
1054   1402             		
1055   1402 21 20 E0    		LXI H,ram0+020H ; Address 32
1056   1405 36 02       		MVI M,2
1057   1407             		
1058   1407 21 40 E0    		LXI H,ram0+040H	; Address 64
1059   140A 36 01       		MVI M,1
1060   140C             		
1061   140C 21 80 E0    		LXI H,ram0+080H ; Address 128
1062   140F 36 00       		MVI M,0
1063   1411             
1064   1411             ;Check the contents of the tested RAM		
1065   1411 21 00 E0    		LXI H,ram0	; Standard RAM location 0E000H		
1066   1414 3E 08       		MVI A,8
1067   1416             		
1068   1416 BE          		CMP M       ; Compare first locations				
1069   1417 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1070   141A             
1071   141A 23          		INX H       ; Address 1		
1072   141B 3D          		DCR A
1073   141C BE          		CMP M       ; Compare Address 1			
1074   141D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1075   1420             
1076   1420 3D          		DCR A				
1077   1421 21 02 E0    		LXI H,ram0+002H ; Address 2
1078   1424 BE          		CMP M           ; Compare Address 2		
1079   1425 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1080   1428             
1081   1428 3D          		DCR A				
1082   1429 21 04 E0    		LXI H,ram0+004H ; Address 4
1083   142C BE          		CMP M           ; Compare Address 4		
1084   142D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1085   1430             		
1086   1430 3D          		DCR A				
1087   1431 21 08 E0    		LXI H,ram0+008H ; Address 8
1088   1434 BE          		CMP M           ; Compare Address 8	
1089   1435 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1090   1438             		
1091   1438 3D          		DCR A				
1092   1439 21 10 E0    		LXI H,ram0+010H ; Address 16
1093   143C BE          		CMP M           ; Compare Address 16		
1094   143D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1095   1440             		
1096   1440 3D          		DCR A				
1097   1441 21 20 E0    		LXI H,ram0+020H ; Address 32
1098   1444 BE          		CMP M           ; Compare Address 32		
1099   1445 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1100   1448             		
1101   1448 3D          		DCR A				
1102   1449 21 40 E0    		LXI H,ram0+040H ; Address 64
1103   144C BE          		CMP M           ; Compare Address 64		
1104   144D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1105   1450             		
1106   1450 3D          		DCR A				
1107   1451 21 80 E0    		LXI H,ram0+080H ; Address 128
1108   1454 BE          		CMP M           ; Compare Address 128		
1109   1455 C2 5D 14    		JNZ ramloop0testfail ; Test failed		
1110   1458             
1111   1458             		;Test successful
1112   1458 3E 67       		MVI A,goodblock		
1113   145A C3 63 14    		JMP ramloop0testend		
1114   145D             		
1115   145D             ramloop0testfail:
1116   145D 4F          		MOV C,A
1117   145E 3E 08       		MVI A,8
1118   1460 91          		SUB C
1119   1461 C6 30       		ADI '0'  		
1120   1463             
1121   1463             ramloop0testend:
1122   1463 32 01 00    		STA lcddata	
1123   1466             
1124   1466 0E 0A       		MVI C,10       ; Counter 10 	
1125   1468             delayr0:
1126   1468 0D          		DCR C          ; Decrement C: 4
1127   1469 C2 68 14    		JNZ delayr0    ; Loop until C = 0: 7 = 11 = 4.45us
1128   146C             
1129   146C             ; ==============================================================
1130   146C             ; TEST 2:
1131   146C             ;  Write to each individual 256 block, make sure the block
1132   146C             ;  is correctly selected.  May also show the RAM is bad.
1133   146C             ;  This will test address lines A14-A8 = 128 blocks.
1134   146C             ;  The Address lines A10-A8 are directly attached to the chip
1135   146C             ;  and can be identified as to the part they are identified as
1136   146C             ;  LKJ when failing.  
1137   146C             ;  The Address lines A14-A11 are  indirectly used to access the RAMs 
1138   146C             ;  via decoders.  Consequently if these lines fail they are limited
1139   146C             ;  to the failed CE.
1140   146C             ;  The char 'm' is used to indicate a passing block.
1141   146C             ;  The test will stop on the first block to fail in the 2K RAM
1142   146C             ;  block.
1143   146C             ; ==============================================================	
1144   146C 3E C0       		MVI A,0C0H      ; Set Cursor to bottom LH corner
1145   146E 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
1146   1471             
1147   1471 0E 0A       		MVI C,10       ; Counter 10 	
1148   1473             delay14a:
1149   1473 0D          		DCR C          ; Decrement C: 4
1150   1474 C2 73 14    		JNZ delay14a   ; Loop until C = 0: 7 = 11 = 4.45us
1151   1477             							
1152   1477 21 00 80    		LXI H,ramstart  ; Start of RAM
1153   147A             ;		LXI SP,800H     ; 2K Blocks
1154   147A             ;		MVI D,16        ; Number of banks to test 16 for 2K blocks
1155   147A 31 00 01    		LXI SP,100H     ; 256byte Blocks this will store 128 numbers in the RAM
1156   147D 16 80       		MVI D,128       ; Number of banks to test = 128 * 256 = 32K
1157   147F             						; 
1158   147F AF          		XRA A           ; Clear A
1159   1480             		
1160   1480             ; Set up the RAM banks with unique numbers to check indvidual CS- lines
1161   1480             ramloop:
1162   1480 3C          		INR A           ; 
1163   1481 77          		MOV M,A
1164   1482 39          		DAD SP          ; Add on preset block size to get the next block
1165   1483 15          		DCR D
1166   1484 C2 80 14    		JNZ ramloop     ; 
1167   1487             
1168   1487 21 00 80    		LXI H,ramstart  ; Start of RAM
1169   148A             ;		MVI D,16        ; Number of banks to test
1170   148A             ;		MVI D,128       ; Number of banks to test
1171   148A AF          		XRA A           ; Clear A
1172   148B             	
1173   148B             ; Test the ram banks CS- lines are working correctly
1174   148B             ; Print M if correct or the numeric location of the failing
1175   148B             ; RAM chip Address line.
1176   148B             	
1177   148B             ramloop128:
1178   148B 3C          		INR A           ; Increment A
1179   148C 5F          		MOV E,A         ; Move RAM byte to E
1180   148D BE          		CMP M
1181   148E C2 A2 14    		JNZ ramfail
1182   1491 E6 07       		ANI 007H        ; See if this is the end of the 2K RAM block
1183   1493 FE 07       		CPI 007H        ;
1184   1495 7B          		MOV A,E
1185   1496 C2 F1 14    		JNZ contloop    ; Next location
1186   1499 3E 6D       		MVI A,goodmemch  ; Char for diag LCD to indicate 2K RAM block is OK
1187   149B 32 01 00    		STA lcddata
1188   149E 7B          		MOV A,E
1189   149F C3 EB 14    		JMP prtdelay
1190   14A2             
1191   14A2             ramfail:
1192   14A2 E6 07       		ANI 7          ; Get the Address that failed
1193   14A4             		
1194   14A4             ;IF 2,3 or 5 then A8, A9, A10 = JKL
1195   14A4             ;IF 1 then need to SUB 1 /8 and add 1 to give CE line		
1196   14A4 FE 01       		CPI 1
1197   14A6 CA CC 14    		JZ idchipenable  ; Check if CE- Failure.
1198   14A9 FE 02       		CPI 2            ; Check for A8
1199   14AB C2 B3 14    		JNZ nextaddr
1200   14AE 3E 4A       		MVI A,'J'   
1201   14B0 C3 DF 14    		JMP sendtodiag
1202   14B3             		
1203   14B3             nextaddr:
1204   14B3 FE 03       		CPI 3            ; Check for A9
1205   14B5 C2 BD 14    		JNZ nextaddr1
1206   14B8 3E 4B       		MVI A,'K'   
1207   14BA C3 DF 14    		JMP sendtodiag
1208   14BD             		
1209   14BD             nextaddr1:
1210   14BD FE 05       		CPI 5            ; Check for A10
1211   14BF C2 C7 14    		JNZ nextaddr2
1212   14C2 3E 4C       		MVI A,'L'   
1213   14C4 C3 DF 14    		JMP sendtodiag
1214   14C7             
1215   14C7             nextaddr2:		
1216   14C7 3E 3F       		MVI A,'?'        ; Unkown memory fault could be dual failure
1217   14C9 C3 DF 14    		JMP sendtodiag
1218   14CC             				
1219   14CC             ;ID the failed chip enable:1 - F
1220   14CC             idchipenable:
1221   14CC 7B          		MOV A,E        ; Retrieve the failing address ID
1222   14CD DE 01       		SBI 1          ; Subtract 1
1223   14CF 1F          		RAR
1224   14D0 1F          		RAR
1225   14D1 1F          		RAR            ; Divide by 8
1226   14D2 C6 01       		ADI 1          ; Add 1 to give CEx value
1227   14D4             
1228   14D4             ;Print out HEX value of Chip Enable
1229   14D4 E6 0F       		ANI 00FH 		; Get Bottom Digit
1230   14D6 FE 0A       		CPI 0AH 		; A > 10
1231   14D8 DA DD 14    		JC  hexdigit 	
1232   14DB C6 07       		ADI 07H 	    ; Add 7 as this is A-F
1233   14DD             hexdigit: 
1234   14DD C6 30       		ADI 30H
1235   14DF             
1236   14DF             sendtodiag:
1237   14DF 32 01 00    		STA lcddata    ; Print character
1238   14E2 7C          		MOV A,H        ; Skip the 2K RAM block as it failed
1239   14E3 F6 07       		ORI 007H       
1240   14E5 67          		MOV H,A
1241   14E6 7B          		MOV A,E        ; Restore test number
1242   14E7 E6 F8       		ANI 0F8H       ; Increment to next 2K RAM block
1243   14E9 C6 08       		ADI 008H
1244   14EB             
1245   14EB             prtdelay:
1246   14EB 0E 0A       		MVI C,10       ; Counter 10 	
1247   14ED             delay15:
1248   14ED 0D          		DCR C          ; Decrement C: 4
1249   14EE C2 ED 14    		JNZ delay15    ; Loop until C = 0: 7 = 11 = 4.45us	
1250   14F1             
1251   14F1             contloop:	
1252   14F1 39          		DAD SP
1253   14F2 FE 80       		CPI 128
1254   14F4 C2 8B 14    		JNZ ramloop128
1255   14F7             
1256   14F7             ; ==============================================================				
1257   14F7             ; Now pick a RAM module to use for the next set of tests. 
1258   14F7             ; ==============================================================
1259   14F7             ramcheck:
1260   14F7 31 FE EF    		LXI SP,ram0+1000H - 2 ; Module 0				
1261   14FA F1          		POP PSW	
1262   14FB FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1263   14FD 3E 30       		MVI A,'0'
1264   14FF 11 DA 30    		LXI D,optram0load
1265   1502 CA 32 15    		JZ ramfnd
1266   1505             
1267   1505 31 FE CF    		LXI SP,ram1+1000H - 2 ; Module 1				
1268   1508 F1          		POP PSW			
1269   1509 FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1270   150B 3E 31       		MVI A,'1'
1271   150D 11 C3 30    		LXI D,optram1load
1272   1510 CA 32 15    		JZ ramfnd
1273   1513             						
1274   1513 31 FE AF    		LXI SP,ram2+1000H - 2; Module 2				
1275   1516 F1          		POP PSW			
1276   1517 FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1277   1519 3E 32       		MVI A,'2'
1278   151B 11 AC 30    		LXI D,optram2load
1279   151E CA 32 15    		JZ ramfnd		
1280   1521             
1281   1521 31 FE 8F    		LXI SP,ram3+1000H -2 ; Module 3				
1282   1524 F1          		POP PSW			
1283   1525 FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1284   1527 3E 33       		MVI A,'3'		
1285   1529 11 DA 30    		LXI D,optram0load
1286   152C CA 32 15    		JZ ramfnd
1287   152F             
1288   152F C3 40 23    		JMP cpuhlt      ; No useful RAM
1289   1532             
1290   1532             ; SP is now set up with valid RAM location	
1291   1532             ramfnd:
1292   1532 CD B9 23    		CALL stromlocation ; Temp use this location to store A for later use
1293   1535 77          		MOV M,A
1294   1536             		
1295   1536             ;Insert OPTROM Detect Code into selected RAM Block	
1296   1536 21 00 00    		LXI H,0
1297   1539 39          		DAD SP
1298   153A 01 00 01    		LXI B,100H
1299   153D 2E 00       		MVI L,0
1300   153F 09          		DAD B           ; HL points to Free RAM
1301   1540 EB          		XCHG            ; DE = Free RAM, HL = Code to load	
1302   1541 06 19       		MVI B,25        ; Number of bytes to move
1303   1543 CD 27 24    		CALL movemem    ; B bytes to (DE) from (HL)
1304   1546             	
1305   1546             		;Finish the ram tests		
1306   1546 CD E4 24    		CALL diagscreenpause	
1307   1549 CD C3 24    		CALL clrscreen
1308   154C             
1309   154C 3E 80       		MVI A,080H     ; Set diag screen cursor to home
1310   154E CD 66 24    		CALL putins    ; Send to the diag screen			
1311   1551             
1312   1551             ; Set the STROM Resgister Location = 0	
1313   1551 CD B9 23    		CALL stromlocation
1314   1554             		
1315   1554 7E          		MOV A,M        ; Recover A
1316   1555 CD 5B 24    		CALL putch     ; Print out the selected RAM block
1317   1558             		
1318   1558 3E 20       		MVI A,' '
1319   155A CD 5B 24    		CALL putch
1320   155D             		
1321   155D             		; Reset location to 0
1322   155D AF          		XRA A
1323   155E 77          		MOV M,A
1324   155F D3 E8       		OUT CtrlReg
1325   1561             
1326   1561             ; Set the countdown timer for the RST 7.5 interrupt					
1327   1561 CD AC 23    		CALL getcountdown
1328   1564 36 D7       		MVI M,0D7H
1329   1566             		
1330   1566             		;JMP lcdtest   ; Next test, used for debugging test code
1331   1566 C3 69 15    		JMP piotest   ; Next test
1332   1569             
1333   1569             ; ##########################################################
1334   1569             ; ##########################################################
1335   1569             ; **********************************************************
1336   1569             ; Test PIO 81C55
1337   1569             ;	Write to the PIO registers and read back. 
1338   1569             ;	
1339   1569             ; **********************************************************
1340   1569             piotest:
1341   1569 21 1E 25    		LXI H,piostr   ; Output test name
1342   156C CD 71 24    		CALL putstr
1343   156F             
1344   156F             		; Setup the Control Register
1345   156F             ;		MVI A,43H      ; Load configuration for PIO (A=OUT, B=OUT, C=IN, Stop Timer counter)
1346   156F             ;		OUT PIOCR      ; Set PIO chip configuration
1347   156F             
1348   156F             ; ==========================================================
1349   156F             ; Test Port A write RAM test data
1350   156F             ; ==========================================================
1351   156F 21 5A 29    		LXI H,piotstdata ; Reuse RAM byte test data table
1352   1572             tstpioa:
1353   1572 7E          		MOV A,M          ; H = Current RAM byte test data
1354   1573 FE FE       		CPI 0FEH         ; Check end of table
1355   1575 CA 84 15    		JZ tstpioaok       
1356   1578 D3 B1       		OUT PIOA	     ; Write to PIOA Register
1357   157A DB B1       		IN  PIOA         ; Read PIOA location
1358   157C BE          		CMP M		     ; Compare locations
1359   157D C2 89 15    		JNZ tstpioafail  ; Not equal RAM location failed
1360   1580 23          		INX H            ; Get next RAM test byte
1361   1581 C3 72 15    		JMP tstpioa       
1362   1584             		
1363   1584             tstpioaok:
1364   1584 3E 41       		MVI A,'A'  	 ; Test OK
1365   1586 C3 8B 15    		JMP exitpioa
1366   1589             tstpioafail:
1367   1589 3E 46       		MVI A,'F'        ; Test Fail
1368   158B             exitpioa:
1369   158B 57          		MOV D,A          ; Save status of test
1370   158C CD 5B 24    		CALL putch
1371   158F             
1372   158F             		;Set the LPT test register it might work
1373   158F 3E 83       		MVI A,083H       ;Set the BCR, BUSY and BUSY- bits high
1374   1591 D3 B1       		OUT PIOA
1375   1593             
1376   1593 AF          		XRA A
1377   1594 F6 02       		ORI 02H
1378   1596 D3 E8       		OUT CtrlReg 	 ; E8H
1379   1598 AF          		XRA A
1380   1599 D3 E8       		OUT CtrlReg 	 ; E8H		
1381   159B             	
1382   159B             ; ==========================================================
1383   159B             ; Test Port B write RAM test data do not test power off
1384   159B             ; ==========================================================
1385   159B 21 5A 29    		LXI H,piotstdata ; Reuse the RAM byte test data table
1386   159E             tstpiob:
1387   159E 7E          		MOV A,M   	     ; H = Current RAM test byte  data
1388   159F FE FE       		CPI 0FEH         ; Check end of table
1389   15A1 CA B3 15    		JZ tstpiobok 
1390   15A4 E6 EF       		ANI 0EFH         ; No power off  
1391   15A6 5F          		MOV E,A        
1392   15A7 D3 B2       		OUT PIOB         ; Write to PIOB Register
1393   15A9 DB B2       		IN  PIOB         ; Read PIOB location		
1394   15AB BB          		CMP E		     ; Compare locations
1395   15AC C2 B8 15    		JNZ tstpiobfail  ; Not equal RAM location failed
1396   15AF 23          		INX H            ; Get next RAM test byte
1397   15B0 C3 9E 15    		JMP tstpiob       
1398   15B3             		
1399   15B3             tstpiobok:
1400   15B3 3E 42       		MVI A,'B'  	 ; Test OK
1401   15B5 C3 BA 15    		JMP exitpiob
1402   15B8             tstpiobfail:
1403   15B8 3E 46       		MVI A,'F'        ; Test Fail
1404   15BA             exitpiob:
1405   15BA CD 5B 24    		CALL putch		
1406   15BD             
1407   15BD 3E E4       		MVI A,0E4H       ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=RS232, Keyscan col 9 enable)
1408   15BF D3 B2       		OUT PIOB         ; Set PIO chip port B configuration	
1409   15C1             
1410   15C1             ; ==========================================================
1411   15C1             ; Check for Port A or B Failure. 
1412   15C1             ; Jump to REMOTE test on failure.
1413   15C1             ; ==========================================================
1414   15C1             		;Check for failure of PIO B		
1415   15C1 FE 46       		CPI 'F'
1416   15C3 CA EA 15    		JZ piofail
1417   15C6             		
1418   15C6             		;Check for failure of PIO A	
1419   15C6 7A          		MOV A,D
1420   15C7 FE 46       		CPI 'F'
1421   15C9 CA EA 15    		JZ piofail
1422   15CC             		
1423   15CC 3E FF       		MVI A,0FFH      ; PIO A configuration (Used for Key scan, LCD data, etc.)
1424   15CE D3 B1       		OUT PIOA        ; Initialize PIO chip port A			        
1425   15D0              
1426   15D0             ; ==========================================================
1427   15D0             ; Check PIO C
1428   15D0             ; Ignore modem bits and serial port bits - tested in serial test
1429   15D0             ; ==========================================================      
1430   15D0             tstpioc:        
1431   15D0 DB B3       		IN PIOC     	; Check PIO chip port C
1432   15D2 E6 06       		ANI 006H        ; Ignore top bits they will be tested with the serial port. Modem will not be tested.
1433   15D4 FE 06       		CPI 006H        ; 0x06 magic port C read
1434   15D6 C2 EA 15    		JNZ piofail
1435   15D9 3E 43       		MVI A,'C'  	; Test OK
1436   15DB CD 5B 24    		CALL putch
1437   15DE             	
1438   15DE             ;		MVI A,'L'
1439   15DE             ;		OUT PIOT1
1440   15DE             ;		IN  PIOT1
1441   15DE             ;	CALL putch
1442   15DE             ;		CPI 'L'
1443   15DE             ;		JNZ piofail
1444   15DE             ;		MVI A,'1'  		; Test OK
1445   15DE             ;		CALL putch
1446   15DE             ;
1447   15DE             ;		MVI A,'H'
1448   15DE             ;		OUT PIOT2
1449   15DE             ;		IN  PIOT2
1450   15DE             ;	CALL putch
1451   15DE             ;		CPI 'H'
1452   15DE             ;		JNZ piofail
1453   15DE             ;		MVI A,'2'  		; Test OK
1454   15DE             ;		CALL putch
1455   15DE             
1456   15DE             piotestdone:	
1457   15DE 21 06 25    		LXI H,passstr
1458   15E1 CD 71 24    		CALL putstr
1459   15E4             
1460   15E4 CD E4 24    		CALL diagscreenpause
1461   15E7             	
1462   15E7 C3 2C 16    		JMP chklcd     ; Test the M100/102 main LCD
1463   15EA             	
1464   15EA             ; ==========================================================
1465   15EA             ; PIO Fail
1466   15EA             ; If either PIO registers fail test flow needs to change
1467   15EA             ; ========================================================== 		
1468   15EA             piofail:		
1469   15EA 21 0C 25    		LXI H,piofailstr
1470   15ED CD 71 24    		CALL putstr	
1471   15F0             		
1472   15F0             ;Write and read the A & B locations
1473   15F0             ;Print to the bottom of the screen
1474   15F0 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1475   15F2 CD 66 24    		CALL putins
1476   15F5             
1477   15F5             ; Test the PIO A register		
1478   15F5 AF          		XRA A
1479   15F6 CD 91 24    		CALL prthex
1480   15F9             		
1481   15F9 D3 B1       		OUT PIOA
1482   15FB DB B1       		IN PIOA
1483   15FD             		
1484   15FD CD 91 24    		CALL prthex
1485   1600             		
1486   1600 3E FF       		MVI A,0FFH
1487   1602             		
1488   1602 CD 91 24    		CALL prthex
1489   1605             		
1490   1605 D3 B1       		OUT PIOA
1491   1607 DB B1       		IN PIOA
1492   1609             		
1493   1609 CD 91 24    		CALL prthex		
1494   160C             
1495   160C             ; Test the PIO B register	
1496   160C             
1497   160C AF          		XRA A	
1498   160D CD 91 24    		CALL prthex
1499   1610             		
1500   1610 D3 B2       		OUT PIOB
1501   1612 DB B2       		IN PIOB
1502   1614             		
1503   1614 CD 91 24    		CALL prthex
1504   1617             		
1505   1617 3E EF       		MVI A,0EFH  ; Might accidentally power off the board!!!
1506   1619             		
1507   1619 CD 91 24    		CALL prthex
1508   161C             		
1509   161C D3 B2       		OUT PIOB
1510   161E DB B2       		IN PIOB
1511   1620             				
1512   1620 CD 91 24    		CALL prthex			
1513   1623 CD E4 24    		CALL diagscreenpause
1514   1626             
1515   1626 C3 11 1E    		JMP stromtestpiofail
1516   1629             		;CALL buzzer     ; Test the buzzer now the PIO is working		
1517   1629 C3 40 23    		JMP cpuhlt      ; Stop here for now
1518   162C             
1519   162C             ; ##########################################################
1520   162C             ; ##########################################################
1521   162C             ; **********************************************************
1522   162C             ; Screen Verification
1523   162C             ;  Determine if real screen or test dongle
1524   162C             ; **********************************************************
1525   162C             ; Write 00 to PIOA to set CS20-CS27 to 0 
1526   162C             ; Set the data register with 00H this will set the dongle to ins1
1527   162C             ; Read Instruction register 1 should be 00H 
1528   162C             
1529   162C             chklcd:
1530   162C AF          		XRA A  		   ; Set PIO A port to 0, this sets CSx lines	
1531   162D D3 B1       		OUT PIOA	
1532   162F             	
1533   162F D3 FF       		OUT scrdata ; Set the data portion to 0, sets D0 if dongle
1534   1631 DB FE       		IN scrins
1535   1633             		
1536   1633 FE 00       		CPI 0
1537   1635 C2 85 17    		JNZ lcdtest ; If not 0 then real LCD is present	
1538   1638             					; else continue test using dongle
1539   1638             					
1540   1638             ; **********************************************************
1541   1638             ; Test Screen dongle
1542   1638             ;  Test the LCD interface using the LCD test dongle.
1543   1638             ;  Dongle contains registers to perform loopbacks of the data
1544   1638             ;  connector bus.  The test also checks the individual CSx
1545   1638             ;  lines to the LCD memory chips.
1546   1638             ;      Data Read - LCD  scrdata (test Data) 0FFH
1547   1638             ;      Inst Read - LCD  scrins  (test CSx)  0FEH
1548   1638             ; 
1549   1638             ;  There are two Inst registers that are selected by D0
1550   1638             ;  of the data register.  
1551   1638             ;  
1552   1638             ; **********************************************************
1553   1638             dongletest:
1554   1638 CD C3 24    		CALL clrscreen  ; Clear the diag screen
1555   163B             
1556   163B 3E 80       		MVI A,080H      ; Set Cursor to top line
1557   163D CD 66 24    		CALL putins
1558   1640             		
1559   1640 21 46 25    		LXI H,donglestrdata ; Indicate this is a dongle test
1560   1643 CD 71 24    		CALL putstr
1561   1646             	
1562   1646             ; ==========================================================
1563   1646             ; Test data lines to LCD screen, AD0-AD7
1564   1646             ; ==========================================================
1565   1646 21 5A 29    		LXI H,dongletestdata ; Reuse RAM byte test data table
1566   1649             		
1567   1649             tstdongle:
1568   1649 7E          		MOV A,M          ; H = Current RAM byte test data
1569   164A FE FE       		CPI 0FEH         ; Check end of table
1570   164C CA 5B 16    		JZ tstdongleok       
1571   164F D3 FF       		OUT scrdata	     ; Write to LCD Data Register
1572   1651 DB FF       		IN  scrdata      ; Read LCD Data register
1573   1653 BE          		CMP M		     ; Compare locations
1574   1654 C2 64 16    		JNZ tstdonglefail; Not equal location failed
1575   1657 23          		INX H            ; Get next RAM test byte
1576   1658 C3 49 16    		JMP tstdongle  
1577   165B             		
1578   165B             tstdongleok:
1579   165B 21 06 25    		LXI H,passstr    ; Output PASS to diag LCD
1580   165E CD 71 24    		CALL putstr      ; Indicate LCD Data bus pass
1581   1661 C3 8A 16    		JMP dongletestend
1582   1664             			
1583   1664             tstdonglefail:
1584   1664 F5          		PUSH PSW         ; Save the failing data
1585   1665 E5          		PUSH H
1586   1666             		
1587   1666 21 0C 25    		LXI H,dongledatafail ; Output FAIL to diag LCD
1588   1669 CD 71 24    		CALL putstr
1589   166C             		
1590   166C 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1591   166E CD 66 24    		CALL putins
1592   1671             		
1593   1671 21 7A 25    		LXI H,donglestrstat ; Output WR RD text to diag LCD
1594   1674 CD 71 24    		CALL putstr		
1595   1677             
1596   1677 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
1597   1679 CD 66 24    		CALL putins
1598   167C             		
1599   167C             		; Print the data written
1600   167C E1          		POP H         ; Retrieve the data written
1601   167D 7E          		MOV A,M        						
1602   167E CD 91 24    		CALL prthex
1603   1681             
1604   1681 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
1605   1683 CD 66 24    		CALL putins				
1606   1686             		
1607   1686             		; Print out Read value
1608   1686 F1          		POP PSW        ; Retrieve the data read
1609   1687 CD 91 24    		CALL prthex
1610   168A             
1611   168A             dongletestend:		
1612   168A CD E4 24    		CALL diagscreenpause 	;Delay to allow review
1613   168D             
1614   168D             ; ==========================================================
1615   168D             ; Test CSx lines to LCD screen, CS20-27 label as INS1
1616   168D             ; ==========================================================				
1617   168D             dongletestins:		
1618   168D             		;MVI A,0
1619   168D             		;OUT scrdata     ; Set to read instruction register 1
1620   168D             
1621   168D CD C3 24    		CALL clrscreen		
1622   1690 21 52 25    		LXI H,donglestrins1 ; Indicate this is a dongle test
1623   1693 CD 71 24    		CALL putstr
1624   1696             			
1625   1696 21 5A 29    		LXI H,dongletestdata ; Reuse RAM byte test data table	
1626   1699             tstdongleins:
1627   1699 7E          		MOV A,M          ; H = Current RAM byte test data
1628   169A FE FE       		CPI 0FEH         ; Check end of table
1629   169C CA AB 16    		JZ tstdongleinsok       
1630   169F D3 B1       		OUT PIOA	     ; Write to PIOA Register
1631   16A1 DB FE       		IN  scrins       ; Read the lower instruction register
1632   16A3 BE          		CMP M		     ; Compare locations
1633   16A4 C2 B4 16    		JNZ tstdongleinsfail  ; Not equal RAM location failed
1634   16A7 23          		INX H            ; Get next RAM test byte
1635   16A8 C3 99 16    		JMP tstdongleins  
1636   16AB             
1637   16AB             tstdongleinsok:
1638   16AB 21 06 25    		LXI H,passstr ; Output PASS to diag LCD
1639   16AE CD 71 24    		CALL putstr         ; Indicate Data bus pass
1640   16B1 C3 DA 16    		JMP dongletestinsend
1641   16B4             			
1642   16B4             tstdongleinsfail:
1643   16B4 F5          		PUSH PSW         ; Save the failing data
1644   16B5 E5          		PUSH H
1645   16B6             		
1646   16B6 21 0C 25    		LXI H,dongledatafail ; Output FAIL to diag LCD
1647   16B9 CD 71 24    		CALL putstr
1648   16BC             		
1649   16BC 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1650   16BE CD 66 24    		CALL putins
1651   16C1             		
1652   16C1 21 7A 25    		LXI H,donglestrstat ; Output WR RD text to diag LCD
1653   16C4 CD 71 24    		CALL putstr		
1654   16C7             
1655   16C7 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
1656   16C9 CD 66 24    		CALL putins
1657   16CC             		
1658   16CC             		; Print the data written
1659   16CC E1          		POP H          ; Retrieve the data written
1660   16CD 7E          		MOV A,M        						
1661   16CE CD 91 24    		CALL prthex
1662   16D1             
1663   16D1 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
1664   16D3 CD 66 24    		CALL putins				
1665   16D6             		
1666   16D6             		; Print out Read value
1667   16D6 F1          		POP PSW        ; Retrieve the data read
1668   16D7 CD 91 24    		CALL prthex
1669   16DA             
1670   16DA             dongletestinsend:		
1671   16DA CD E4 24    		CALL diagscreenpause 	;Delay to allow review
1672   16DD             
1673   16DD             ; ==========================================================
1674   16DD             ; Test other CSx and ctl lines to LCD screen 
1675   16DD             ;   1, 1, 1, 1, 1, RST-, C29, C28 (D7-D0) 4 and E
1676   16DD             ; ==========================================================		
1677   16DD             dongletestins2:
1678   16DD CD C3 24    		CALL clrscreen		
1679   16E0 21 5E 25    		LXI H,donglestrins2 ; Indicate this is a dongle test
1680   16E3 CD 71 24    		CALL putstr
1681   16E6             
1682   16E6 3E 01       		MVI A,01H
1683   16E8 D3 FF       		OUT scrdata ; Set to read instruction register 2
1684   16EA             		
1685   16EA 3E EC       		MVI A,0ECH  ; 
1686   16EC D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 0.
1687   16EE DB FE       		IN scrins   ; Read back the settings.
1688   16F0             		
1689   16F0 E6 03       		ANI 003H    ;
1690   16F2 C2 4E 17    		JNZ  tstdongleins2fail	
1691   16F5             		
1692   16F5 3E ED       		MVI A,0EDH  ; 
1693   16F7 D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 1 0.
1694   16F9 DB FE       		IN scrins   ; Read back the settings.
1695   16FB             		
1696   16FB E6 03       		ANI 003H    ;
1697   16FD FE 01       		CPI 001H
1698   16FF C2 4E 17    		JNZ  tstdongleins2fail	
1699   1702             
1700   1702 3E EE       		MVI A,0EEH  ; 
1701   1704 D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 0 1.
1702   1706 DB FE       		IN scrins   ; Read back the settings.
1703   1708             		
1704   1708 E6 03       		ANI 003H    ;
1705   170A FE 02       		CPI 002H
1706   170C C2 4E 17    		JNZ  tstdongleins2fail					
1707   170F             		
1708   170F 3E EF       		MVI A,0EFH  ; 
1709   1711 D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 1.
1710   1713             		
1711   1713 DB FE       		IN scrins   ; Read back the settings.
1712   1715 E6 03       		ANI 003H    ;
1713   1717 FE 03       		CPI 003H
1714   1719 C2 4E 17    		JNZ  tstdongleins2fail
1715   171C             		
1716   171C             			
1717   171C             		
1718   171C             tstdonglins2ok:
1719   171C 21 06 25    		LXI H,passstr ; Output PASS to diag LCD
1720   171F CD 71 24    		CALL putstr         ; Indicate Data bus pass
1721   1722 3E C0       		MVI A,0C0H          ; Set Cursor to next line
1722   1724 CD 66 24    		CALL putins
1723   1727             
1724   1727 21 6A 25    		LXI H,dongleins2data ; Reuse RAM byte test data table
1725   172A CD 71 24    		CALL putstr          ; Indicate Data bus pass	
1726   172D             		
1727   172D 3E C4       		MVI A,0C4H           ; Set Cursor to print out RESET- state	
1728   172F CD 66 24    		CALL putins
1729   1732             
1730   1732 DB FE       		IN scrins            ; Read back the resgister.
1731   1734             		
1732   1734 E6 04       		ANI 004H				 ; Retrieve the Reset state should always be 1
1733   1736 1F          		RAR
1734   1737 1F          		RAR
1735   1738 C6 30       		ADI 030H             ; Make into ASCII 0 or 1
1736   173A CD 5B 24    		CALL putch
1737   173D             		
1738   173D 3E CE       		MVI A,0CEH           ; Set Cursor to print out RESET- state	
1739   173F CD 66 24    		CALL putins
1740   1742             
1741   1742 DB FE       		IN scrins            ; Read back the register state.
1742   1744             		
1743   1744 E6 03       		ANI 003H				 ; Retrieve the Reset state should always be 1
1744   1746 C6 30       		ADI 030H             ; Make into ASCII 0 or 1
1745   1748 CD 5B 24    		CALL putch
1746   174B             				
1747   174B C3 77 17    		JMP dongletestins2end
1748   174E             			
1749   174E             tstdongleins2fail:		
1750   174E 21 0C 25    		LXI H,dongledatafail ; Output FAIL to diag LCD
1751   1751 CD 71 24    		CALL putstr
1752   1754             		
1753   1754 3E C0       		MVI A,0C0H           ; Set Cursor to next line
1754   1756 CD 66 24    		CALL putins
1755   1759             		
1756   1759 21 7A 25    		LXI H,donglestrstat  ; Output WR RD text to diag LCD
1757   175C CD 71 24    		CALL putstr		
1758   175F             
1759   175F 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
1760   1761 CD 66 24    		CALL putins
1761   1764             		
1762   1764             		; Print the data written
1763   1764 DB B2       		IN PIOB        ; Read the data written to the PIOB  
1764   1766 E6 03       		ANI 003H       ; Get D1, D0  						
1765   1768 CD 91 24    		CALL prthex
1766   176B             
1767   176B 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
1768   176D CD 66 24    		CALL putins				
1769   1770             		
1770   1770             		; Print out Read value
1771   1770 DB FE       		IN scrins      ; Retrieve the data from the screen
1772   1772 E6 03       		ANI 003H       ; Put the CS29 and CS28 bits in D1 and D0
1773   1774 CD 91 24    		CALL prthex
1774   1777             
1775   1777             dongletestins2end:		
1776   1777             
1777   1777 3E E4       		MVI A,0E4H       ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=RS232, Keyscan col 9 enable)
1778   1779 D3 B2       		OUT PIOB         ; Set PIO chip port B configuration
1779   177B             		
1780   177B 3E FF       		MVI A,0FFH
1781   177D D3 B1       		OUT PIOA         ; Reset PIO to 0FFH
1782   177F             		
1783   177F CD E4 24    		CALL diagscreenpause ; Delay to allow review
1784   1782 C3 23 19    		JMP clktest          ; Continue with clock test
1785   1785             		
1786   1785             ; **********************************************************
1787   1785             ; Test Screen
1788   1785             ;  Check the screen can be accessed and write to screen RAM.
1789   1785             ;  Write the all 1's pattern and then all 0's
1790   1785             ;  Write a set of test chars on all 8 lines.
1791   1785             ; **********************************************************
1792   1785             ; Write to screen check it can read back status
1793   1785             lcdtest:
1794   1785 3E 00       		MVI A,00H	    ; Set PIO A port to 0, this sets CSx lines to 1	
1795   1787 D3 B1       		OUT PIOA
1796   1789             		
1797   1789 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1798   178B CD 66 24    		CALL putins
1799   178E             		
1800   178E 21 28 25    		LXI H,lcdstr    ; Output to diag LCD text
1801   1791 CD 71 24    		CALL putstr
1802   1794             
1803   1794             		;Init screen 6D02H
1804   1794 CD 05 19    		CALL lcdshortdelay ; 7533H Enable LCD drivers after short delay
1805   1797 AF          		XRA A              ; OUT 0 to LCD
1806   1798 D3 FE       		OUT scrins
1807   179A CD 05 19    		CALL lcdshortdelay ; 7533H Enable LCD drivers after short delay
1808   179D 3E 3B       		MVI A,03BH	       ; OUT 3BH to LCD UP mode
1809   179F D3 FE       		OUT scrins
1810   17A1 CD FD 18    		CALL lcdsettopline ; 752BH Set the display top line to zero for all LCD controllers
1811   17A4 CD 05 19    		CALL lcdshortdelay ; 7533H Enable LCD drivers after short delay
1812   17A7 3E 39       		MVI A,39H          ; OUT 39H to LCD Display ON
1813   17A9 D3 FE       		OUT scrins
1814   17AB             
1815   17AB 3E 49       		MVI A,'I'          ; Indicate LCD init complete.  Should see random text on LCD
1816   17AD CD 5B 24    		CALL putch
1817   17B0             		
1818   17B0 DB FE       		IN scrins          ; Check the LCD has completed init
1819   17B2             		; If LCD present read back should be X100 0000, else X111 1111
1820   17B2             
1821   17B2 E6 7F       		ANI 07FH
1822   17B4 FE 40       		CPI 040H           ; Check for valid LCD present
1823   17B6 C2 BE 17    		JNZ LCDfail
1824   17B9             
1825   17B9 3E 55       		MVI A,'U'          ; LCD Success
1826   17BB C3 CA 17    		JMP LCDprt
1827   17BE             		
1828   17BE             		;LCD fail or is not present
1829   17BE             LCDfail:
1830   17BE 21 0C 25    		LXI H,lcdfailstr     ; Output fail to diag LCD text
1831   17C1 CD 71 24    		CALL putstr
1832   17C4 CD E4 24    		CALL diagscreenpause ;Delay to allow review
1833   17C7 C3 23 19    		JMP clktest 
1834   17CA             LCDprt:
1835   17CA CD 5B 24    		CALL putch
1836   17CD             
1837   17CD             		;Fill screen with dark pattern
1838   17CD 0E EF       		MVI C,0EFH      ; Clear screen
1839   17CF CD E3 18    		CALL fillscreen
1840   17D2             	
1841   17D2 CD F0 24    		CALL longdelay
1842   17D5             
1843   17D5             		;Clear the screen with space ie clear screen
1844   17D5 0E 58       		MVI C,'X'      ; Fill screen with 'X'
1845   17D7 CD E3 18    		CALL fillscreen
1846   17DA             
1847   17DA             		;Output 8 lines of text.  Text is stored below
1848   17DA 21 4B 28    		LXI H,tstline0
1849   17DD 11 01 01    		LXI D,0101H
1850   17E0 CD 2E 18    		CALL putlcdstr
1851   17E3             
1852   17E3 21 75 28    		LXI H,tstline1
1853   17E6 11 02 01    		LXI D,0102H
1854   17E9 CD 2E 18    		CALL putlcdstr
1855   17EC             
1856   17EC 21 97 28    		LXI H,tstline2
1857   17EF 11 03 01    		LXI D,0103H
1858   17F2 CD 2E 18    		CALL putlcdstr
1859   17F5             
1860   17F5 21 B7 28    		LXI H,tstline3
1861   17F8 11 04 01    		LXI D,0104H
1862   17FB CD 2E 18    		CALL putlcdstr
1863   17FE             
1864   17FE 21 D6 28    		LXI H,tstline4
1865   1801 11 05 01    		LXI D,0105H
1866   1804 CD 2E 18    		CALL putlcdstr
1867   1807             
1868   1807 21 F7 28    		LXI H,tstline5
1869   180A 11 06 01    		LXI D,0106H
1870   180D CD 2E 18    		CALL putlcdstr
1871   1810             
1872   1810 21 18 29    		LXI H,tstline6
1873   1813 11 07 01    		LXI D,0107H
1874   1816 CD 2E 18    		CALL putlcdstr
1875   1819             
1876   1819 21 39 29    		LXI H,tstline7
1877   181C 11 08 01    		LXI D,0108H
1878   181F CD 2E 18    		CALL putlcdstr
1879   1822             
1880   1822 21 35 25    		LXI H,lcddone        ; Output diagnostic LCD text
1881   1825 CD 71 24    		CALL putstr
1882   1828             		
1883   1828 CD E4 24    		CALL diagscreenpause ;Delay to allow review
1884   182B             
1885   182B C3 23 19    		JMP clktest 
1886   182E             
1887   182E             ; ==========================================================
1888   182E             ; PUT String to the main LCD screen. D,E should point to location
1889   182E             ; 	Does not word wrap for end of line
1890   182E             ; ==========================================================
1891   182E             putlcdstr:		
1892   182E F5          		PUSH PSW
1893   182F             putlcdloop:
1894   182F AF          		XRA A           ; A = 0
1895   1830 4E          		MOV C,M   	; H = Current Character
1896   1831 BE          		CMP M           ; Check end of table
1897   1832 CA 41 18    		JZ putlcdexit 
1898   1835 E5          		PUSH H
1899   1836 D5          		PUSH D      
1900   1837 CD 43 18    		CALL plotchar   ; Write to main screen
1901   183A D1          		POP D
1902   183B E1          		POP H
1903   183C 23          		INX H           ; Get next Char
1904   183D 14          		INR D           ; Next row entry
1905   183E C3 2F 18    		JMP putlcdloop
1906   1841             		
1907   1841             putlcdexit:
1908   1841 F1          		POP PSW
1909   1842 C9          		RET
1910   1843             		
1911   1843             ; ======================================================
1912   1843             ; Plot character in C on LCD at (D,E)
1913   1843             ; All regiters are destroyed
1914   1843             ; ======================================================
1915   1843             plotchar: ;73EEH
1916   1843 15          		DCR D          ; DCR D COL - 1?
1917   1844 1D          		DCR E          ; DCR E ROW - 1?
1918   1845             ;		XCHG           ; DE <-> HL 
1919   1845 D5          		PUSH D         ; save COL-1,ROW-1
1920   1846 79          		MOV A,C        ; A = C Character
1921   1847 11 72 2A    		LXI D,lcdasciitable - 1 ; 7710H Load top of Char FONT table - 1
1922   184A D6 20       		SUI 20H        ; A = A - 32
1923   184C CA 58 18    		JZ charfound   ; 7410H If char = SPACE
1924   184F 13          		INX D          ; INC D
1925   1850 FE 60       		CPI 60H        ; A = 60H => 80H Graphics 
1926   1852 DA 58 18    		JC charfound   ; 7410H If less then must be a char
1927   1855 11 13 2A    		LXI D,lcdasciitable - 60H ; 76B1H = 7711H - 60H Load top of Graphic FONT table
1928   1858             
1929   1858             ;Printable Character found. 
1930   1858             charfound: ;7410H
1931   1858 F5          		PUSH PSW       ; Save status from Compare CPI 60H
1932   1859 6F          		MOV L,A        ; L = A
1933   185A 26 00       		MVI H,00H      ; H = 0 => HL = char - 32
1934   185C 44          		MOV B,H        ; B = 0
1935   185D 4D          		MOV C,L        ; C = L => BC = char - 32
1936   185E 29          		DAD H          ; HL + HL
1937   185F 29          		DAD H          ; HL + HL  = 4 x HL
1938   1860 09          		DAD B          ; HL + BC  = 5 x HL
1939   1861 F1          		POP PSW        ; POP A
1940   1862 F5          		PUSH PSW       ; PUSH A  Get status to check for character type ASCII or Graphic
1941   1863 DA 67 18    		JC asciichar   ; 741FH  < 60H
1942   1866 09          		DAD B          ; HL + BC = 6 x HL
1943   1867             
1944   1867             ;ASCII Char
1945   1867             asciichar: ;741FH
1946   1867 19          		DAD D          ; HL + DC = Table + Char x 5 or Graphics x 6
1947   1868 F1          		POP PSW        ; POP A
1948   1869 E5          		PUSH H
1949   186A             		
1950   186A D2 79 18    		JNC printlcdchar ; 7430H
1951   186D             
1952   186D             ;If ASCII Char put into buffer
1953   186D E1          		POP H
1954   186E CD 83 23    		CALL ramsblockstart  ;Get the start of the RAM in DE
1955   1871             ;Move ASCII Char into RAM space
1956   1871 D5          		PUSH D
1957   1872 06 05       		MVI B,05H
1958   1874 CD 27 24    		CALL movemem ; 2542H Move B bytes from M to (DE)
1959   1877 AF          		XRA A
1960   1878 12          		STAX D
1961   1879             	
1962   1879             ;Graphics char
1963   1879             printlcdchar:   ;7430H
1964   1879 C1          		POP B          ; Either Graphic Font Table Pointer or RAM Table for ASCII Char
1965   187A E1          		POP H          ; Retrieve the COL-1,ROW-1
1966   187B CD 83 18    		CALL printchar ; 74A2H Byte Plot - Send bit pattern to LCD for character
1967   187E AF          		XRA A          ; CLR A
1968   187F CD FD 18    		CALL lcdsettopline ; 752BH Set the display top line to zero for all LCD controllers
1969   1882 C9          		RET
1970   1883             
1971   1883             ; ======================================================
1972   1883             ; Send bit pattern to Main LCD for the character
1973   1883             ; ======================================================
1974   1883             printchar: ;74A2H
1975   1883 C5          		PUSH B     ; Save Font Table Pointer
1976   1884 1E 06       		MVI E,06H  ; E = 6  Number of bytes for a Graphic
1977   1886             ;74A5H  (3AH) LDA FFF5H  ; COL
1978   1886 7C          		MOV A,H    ; A = H = COL - 1
1979   1887 FE 08       		CPI 08H    ; A = 8   Col is a bridge
1980   1889 CA 96 18    		JZ decfour ; 74B7H E = E - 4
1981   188C FE 10       		CPI 10H    ; A = 16  Col is a bridge
1982   188E CA 98 18    		JZ dectwo  ; 74B9H E = E - 2
1983   1891 FE 21       		CPI 21H    ; A = 33 Col is a bridge E - 4
1984   1893 C2 9A 18    		JNZ nodec  ; 74BBH E = E  
1985   1896             decfour: ;74B7H
1986   1896 1D          		DCR E      ; E--
1987   1897 1D          		DCR E      ; E--
1988   1898             dectwo:  ;74B9H
1989   1898 1D          		DCR E      ; E--
1990   1899 1D          		DCR E      ; E--
1991   189A             nodec:   ;74BBH
1992   189A 4F          		MOV C,A    ; C = A COL - 1
1993   189B 81          		ADD C      ; A + A
1994   189C 81          		ADD C      ; 2A + A
1995   189D 4F          		MOV C,A    ; C = 3*COL - 3  
1996   189E 06 00       		MVI B,00H  ; B = 0  
1997   18A0 7D          		MOV A,L    ; ROW
1998   18A1 1F          		RAR        ; /2
1999   18A2 1F          		RAR        ; /4
2000   18A3 1F          		RAR        ; /8  0 1 2 3   4 5 6 7 See which section upper or lower RAM modules 
2001   18A4             				   ; 2 -> 7 -> C0
2002   18A4             				   		
2003   18A4 21 DF 29    		LXI H,lcdlowercs ; 75C9H 8155 PIO chip bit patterns for Lower LCD drivers
2004   18A7 DA AD 18    		JC setuptable    ; 74D0H
2005   18AA 21 67 29    		LXI H,lcduppercs ; 7551H 8155 PIO chip bit patterns for Upper LCD drivers
2006   18AD             		
2007   18AD             setuptable:   ;74D0H
2008   18AD 09          		DAD B       ; HL + BC  HL + 3xCOL 75C9 Set pointer to LCD PIO Tables: PIOA, PIOB and RAM Address  
2009   18AE             
2010   18AE 47          	    MOV B,A     ; Save LCD RAM Address
2011   18AF             
2012   18AF CD 0D 19    		CALL enablelcd ; 753BH Enable LCD driver(s) specified by (HL)
2013   18B2             
2014   18B2 54          		MOV D,H
2015   18B3 4D          		MOV C,L    ; Save HL to D,C as PIO address field table pointer
2016   18B4             		
2017   18B4 78          		MOV A,B     ; 
2018   18B5 B6          		ORA M       ; OR with 3rd entry in PIO table to set address
2019   18B6 47          		MOV B,A     ; Save B = A, Address setting
2020   18B7             		
2021   18B7 E1          		POP H       ;Get font data bits pointer
2022   18B8 D5          		PUSH D		
2023   18B9 CD CE 18    		CALL writebyteslcd ; 74F7H Send E bytes from HL to the LCD RAM
2024   18BC             
2025   18BC D1          		POP D
2026   18BD             ;Finish the print
2027   18BD 3E 06       		MVI A,006H 	; See how many have been missed
2028   18BF 93          		SUB E
2029   18C0 C8          		RZ        	; Return if all done
2030   18C1             	
2031   18C1             ;Complete the missing bits on the next RAM Chip
2032   18C1 5F          		MOV E,A      ; E = Missing byte cnt  
2033   18C2             
2034   18C2 E5          		PUSH H
2035   18C3 62          		MOV H,D
2036   18C4 69          		MOV L,C      ; Restore HL form D,C as PIO address field table pointer
2037   18C5             
2038   18C5 23          		INX H          ; Get the next PIO field 
2039   18C6 CD 0D 19    		CALL enablelcd ; 753BH Enable LCD driver(s) specified by (HL) 
2040   18C9             		
2041   18C9 78          		MOV A,B
2042   18CA E6 C0       		ANI 0C0H       ; clr lower address leave row address ok
2043   18CC 47          		MOV B,A        ; save 
2044   18CD             
2045   18CD E1          		POP H
2046   18CE             						
2047   18CE             ;		MOV E,C
2048   18CE              
2049   18CE             ; Write the selected bytes
2050   18CE             writebyteslcd:  ;74F7H
2051   18CE 78          		MOV A,B
2052   18CF CD 1A 19    		CALL lcdbusy   ; 7548H Wait for LCD driver to be available
2053   18D2 D3 FE       		OUT scrins     ; FEH Set Address for the LCD RAM Chip
2054   18D4             lcdwrite:       
2055   18D4             lcdwait:
2056   18D4 DB FE       		IN scrins 		; FEH Wait for LCD 
2057   18D6 17          		RAL
2058   18D7 DA D4 18    		JC lcdwait     ; 750BH
2059   18DA 7E          		MOV A,M        ; Put font byte to A
2060   18DB D3 FF       		OUT scrdata    ; FFH Output to LCD
2061   18DD 23          		INX H          ; Next byte
2062   18DE 1D          		DCR E          ; Byte count
2063   18DF C2 D4 18    		JNZ lcdwait    ; 750BH      ; Next byte
2064   18E2 C9          		RET
2065   18E3             			
2066   18E3             ; ======================================================
2067   18E3             ; Fill Screen use DE and print char in C
2068   18E3             ; ======================================================
2069   18E3             fillscreen:    ;4601H
2070   18E3 1E 01       		MVI E,1      ; Prepare to point to LCD RAM (1,1) ROW
2071   18E5             nextlcdrow:
2072   18E5 16 01       		MVI D,1      ;   " 				   COL
2073   18E7             nextlcdchar:
2074   18E7 C5          		PUSH B
2075   18E8 D5          		PUSH D
2076   18E9 CD 43 18    		CALL plotchar  ; 73EEH  or 4566H Call Level 6 Character Draw routine
2077   18EC D1          		POP D
2078   18ED C1          		POP B
2079   18EE 14          		INR D          ; Increment column
2080   18EF 7A          		MOV A,D        ; Prepare to test for column 40
2081   18F0 FE 29       		CPI 41         ; Test if beyond column 40
2082   18F2 C2 E7 18    		JNZ nextlcdchar; 4608H Jump if more columns on this line
2083   18F5 1C          		INR E          ; Increment line
2084   18F6 7B          		MOV A,E        ; Prepare to test if last line refreshed
2085   18F7 FE 09       		CPI 9          ; Test if beyond line 8
2086   18F9 C2 E5 18    		JNZ nextlcdrow ; 4606H Jump back to refresh next line if not on line 9
2087   18FC C9          		RET
2088   18FD             
2089   18FD             ; ======================================================
2090   18FD             ; Set the display top line to zero for all LCD controllers
2091   18FD             ; This configures the HW scrolling to start displaying
2092   18FD             ; from the natural ROW 0 (i.e. not scrolled).
2093   18FD             ; ======================================================
2094   18FD             lcdsettopline: ;752BH
2095   18FD CD 05 19    		CALL lcdshortdelay    ; 7533H Enable LCD drivers after short delay
2096   1900 3E 3E       		MVI A,03EH            ; Load command to set top line = 0
2097   1902 D3 FE       		OUT scrins            ; FEH Send the command
2098   1904 C9          		RET
2099   1905             	
2100   1905             ; ======================================================
2101   1905             ; Enable LCD drivers after short delay
2102   1905             ; ======================================================
2103   1905             lcdshortdelay: ;7533H
2104   1905 0E 03       		MVI C,03H            ; Prepare for a short delay 
2105   1907 CD B8 24    		CALL shortdelay      ; 7657H Delay routine - decrement C until zero
2106   190A 21 57 2A    		LXI H,lcdalldrivers  ; 7641H Point to LCD enable bits to enable all 
2107   190D             
2108   190D             ; ======================================================
2109   190D             ; Enable LCD drivers specified by (HL)
2110   190D             ; ======================================================
2111   190D             enablelcd:     ;753BH
2112   190D 7E          		MOV A,M        ; Get Bit pattern for 8 drivers
2113   190E D3 B1       		OUT PIOA       ; B9H OUTput the bit pattern for 8 drivers
2114   1910 23          		INX H          ; Increment to bit pattern for next 2 LCD drivers
2115   1911 DB B2       		IN PIOB        ; BAH Get current value of I/O port with 2 LCD drivers
2116   1913 E6 FC       		ANI 0FCH       ; Mask off LCD driver bit positions
2117   1915 B6          		ORA M          ; OR in selected LCD driver enable bits
2118   1916 D3 B2       		OUT PIOB       ; BAH OUTput selected LCD driver bits
2119   1918 23          		INX H          ; Increment to next set of LCD driver enable bits
2120   1919 C9          		RET
2121   191A             
2122   191A             ; ======================================================
2123   191A             ; Wait for LCD driver to be available
2124   191A             ; ======================================================
2125   191A             lcdbusy:        ;7548H
2126   191A F5          		PUSH PSW       ; Save A on stack
2127   191B             lcdrdbusy:
2128   191B DB FE       		IN scrins      ; FEH Read the LCD driver input port
2129   191D 17          		RAL            ; Rotate the busy bit into the C flag
2130   191E DA 1B 19    		JC lcdrdbusy   ; Jump to keep waiting until not busy
2131   1921 F1          		POP PSW        ; Restore A
2132   1922 C9          		RET
2133   1923             
2134   1923             ; ##########################################################
2135   1923             ; ##########################################################		
2136   1923             ; **********************************************************
2137   1923             ; Test CLK chip
2138   1923             ; Write and read back from the clk chip
2139   1923             ; Check the chip is ticking
2140   1923             ; **********************************************************
2141   1923             clktest:
2142   1923 F3          		DI
2143   1924             		 
2144   1924 3E 1F       		MVI A,01FH
2145   1926 30          		SIM
2146   1927             
2147   1927 CD 6D 19    		CALL initclock  ; Set the clock ticking with defaults
2148   192A             
2149   192A CD C3 24    		CALL clrscreen
2150   192D             
2151   192D 21 3E 25    		LXI H,clkteststr
2152   1930 CD 71 24    		CALL putstr
2153   1933 CD F0 24     		CALL longdelay  ; Let the LCD Screen
2154   1936             	
2155   1936 3E 80       		MVI A,080H      ; Set Cursor to top line
2156   1938 CD 66 24    		CALL putins   
2157   193B             			
2158   193B CD 79 19    		CALL printclkdata  ; Print the clock data		
2159   193E             
2160   193E CD F0 24    		CALL longdelay  ; Let the clock tick
2161   1941 CD F0 24    		CALL longdelay  ; Let the clock tick
2162   1944 CD F0 24    		CALL longdelay  ; Let the clock tick
2163   1947 CD F0 24    		CALL longdelay  ; Let the clock tick
2164   194A             
2165   194A 3E C0       		MVI A,0C0H         ; Set Cursor to bottom line
2166   194C CD 66 24    		CALL putins	
2167   194F             
2168   194F CD 79 19    		CALL printclkdata ; Print the clock data
2169   1952             
2170   1952             		;MVI A,' '
2171   1952             		;CALL putch
2172   1952             
2173   1952 CD A5 23    		CALL clocklocation
2174   1955             
2175   1955 7E          		MOV A,M
2176   1956             
2177   1956 21 06 25    		LXI H,passstr ; Output PASS string to Diag Screen
2178   1959             
2179   1959 FE 00       		CPI 0H
2180   195B CA 61 19    		JZ clkfail
2181   195E             
2182   195E C3 64 19    		JMP clkdone
2183   1961             
2184   1961             clkfail:		
2185   1961 21 0C 25    		LXI H,clkfailstr
2186   1964             clkdone:		
2187   1964 CD 71 24    		CALL putstr
2188   1967             
2189   1967 CD E4 24    		CALL diagscreenpause ;Delay to allow review
2190   196A             
2191   196A C3 0F 1A    		JMP rst75test
2192   196D             		
2193   196D             ; ======================================================
2194   196D             ; Init the clock chip
2195   196D             ; ======================================================
2196   196D             initclock: ;7E9DH
2197   196D 21 01 1A    		LXI H,clockinitvalues ; 7F01H Initial clock chip register values
2198   1970 CD 9C 19    		CALL updatetime       ; 732AH Update clock chip regs from M
2199   1973 3E 05       		MVI A,05H
2200   1975 CD F0 19    		CALL setclkmode       ; 7383H Set clock chip mode
2201   1978 C9          		RET
2202   1979             		
2203   1979             ; ======================================================
2204   1979             ; Print raw clock data to Test LCD
2205   1979             ; ======================================================
2206   1979             ; m100_rtc Stucture
2207   1979             ; Month/DOW/DayH/DayL/HourH/HourL/MinH/MinL/SecH/SecsL
2208   1979             ; All BCD except Month is Hex
2209   1979             ; 00 - 0F
2210   1979             ; 40 - 4F
2211   1979             printclkdata:
2212   1979 CD A5 23    		CALL clocklocation ; HL points to start or clock data RAM
2213   197C CD 9B 19    		CALL copytime2mem
2214   197F             	       
2215   197F 2B          		DCX H		
2216   1980 7E          		MOV A,M	       ; Get Month
2217   1981 CD 91 24    		CALL prthex    ; Print as HEX
2218   1984 0E 09       		MVI C,009H	
2219   1986             			
2220   1986             printclkloop:			
2221   1986 2B          		DCX H
2222   1987 7E          		MOV A,M 	;Get Next Value
2223   1988 C6 30       		ADI '0'   ;Convert to ASCII number
2224   198A CD 5B 24    		CALL putch	;Print it out		
2225   198D 0D          		DCR C
2226   198E C2 86 19    		JNZ printclkloop
2227   1991 C9          		RET
2228   1992             
2229   1992             ; ======================================================
2230   1992             ; Update in-memory (F923H) clock values
2231   1992             ; ======================================================
2232   1992             updateclock:  ;19A0H
2233   1992 E5          		PUSH H         ; Preserve BASIC string pointer to stack
2234   1993             ;		LXI H,F923H    ; Seconds (ones)
2235   1993 CD A5 23    		CALL clocklocation
2236   1996             
2237   1996             		;DI             ; Disable interrupts during copy
2238   1996 CD 9B 19    		CALL copytime2mem ; 7329H Copy clock chip regs to M
2239   1999             		;EI             ; Re-enable interrupts
2240   1999 E1          		POP H          ; Restore BASIC string pointer
2241   199A C9          		RET
2242   199B             	
2243   199B             ; ======================================================
2244   199B             ; Copy clock chip regs to M pointed to by HL
2245   199B             ; ======================================================
2246   199B             copytime2mem: ;7329H
2247   199B             ;7329H  (F6H) ORI AFH       
2248   199B F6          		.db 0F6H        ; Copy Clock   registers to Memory
2249   199C             updatetime:   ;732AH
2250   199C AF          		XRA A           ; Update clock registers from Memory
2251   199D F5          		PUSH PSW
2252   199E             		;CALL disablebackground ; 765CH Disable Background task & barcode interrupts
2253   199E 3E 03       		MVI A,03H       ; Read Time
2254   19A0 C4 F0 19    		CNZ setclkmode  ; 7383H      ; If A! = 0 Read the time registers 7329H
2255   19A3 3E 01       		MVI A,01H       ; Register Shift mode
2256   19A5 CD F0 19    		CALL setclkmode ; 7383H     ; Set clock chip mode 
2257   19A8             	
2258   19A8 0E 07       		MVI C,07H       
2259   19AA CD B8 24    		CALL shortdelay ; 7657H     ; Delay routine - decrement C until zero
2260   19AD             	
2261   19AD             ;Init the data read
2262   19AD 06 0A       		MVI B,0AH      ; 10 Digits to read
2263   19AF             
2264   19AF             ; Read 4 bits
2265   19AF             next4bits: ;7340H
2266   19AF 0E 04       		MVI C,04H      ; Number of bits
2267   19B1 56          		MOV D,M        ; Move memory to D
2268   19B2             
2269   19B2             nextbits:  ;7343H
2270   19B2 F1          		POP PSW
2271   19B3 F5          		PUSH PSW
2272   19B4 CA C1 19    		JZ readnextbit ; 7352H Read next bit from Clock Chip
2273   19B7 DB B3       		IN PIOC        ; BBH/B3H Get CLK DataIN
2274   19B9 1F          		RAR            ; Put bit into Carry
2275   19BA 7A          		MOV A,D        ; A = D
2276   19BB 1F          		RAR            ; C -> A -> C 
2277   19BC 57          		MOV D,A        ; D = A
2278   19BD AF          		XRA A          ; CLR
2279   19BE C3 CC 19    		JMP readclkbit ; 735DH Next bit
2280   19C1             
2281   19C1             ; ======================================================
2282   19C1             ; Read next bit from Clock Chip
2283   19C1             ; ======================================================
2284   19C1             readnextbit: ;7352H
2285   19C1 7A          		MOV A,D  ; Put CLK Memory to A
2286   19C2 0F          		RRC      ; Get LSB to CY
2287   19C3 57          		MOV D,A  ; Save A to D
2288   19C4 3E 10       		MVI A,10H ;
2289   19C6 1F          		RAR      ; 
2290   19C7 1F          		RAR
2291   19C8 1F          		RAR
2292   19C9 1F          		RAR      ; 0000CY001
2293   19CA D3 B1       		OUT PIOA ; B9H Write PIO CLK bit
2294   19CC             
2295   19CC             ; Read bit
2296   19CC             readclkbit: ;735DH
2297   19CC             ;Clock the data into the Chip
2298   19CC F6 09       		ORI 09H  ; CLK and C0 bits
2299   19CE D3 B1       		OUT PIOA ; B9H  ; PIO A
2300   19D0 E6 F7       		ANI 0F7H  ; Reset CLK bits
2301   19D2 D3 B1       		OUT PIOA ; B9H  ; PIO A
2302   19D4             
2303   19D4 0D          		DCR C    ; Bits -- 
2304   19D5 C2 B2 19    		JNZ nextbits ; 7343H ; 
2305   19D8 7A          		MOV A,D  ; A = D Top 4 bits are the new data
2306   19D9 0F          		RRC      ; 
2307   19DA 0F          		RRC
2308   19DB 0F          		RRC
2309   19DC 0F          		RRC      ; Move Top 4 bits to bottom 4 bis
2310   19DD E6 0F       		ANI 0FH  ; Get the bottom 4 bits
2311   19DF 77          		MOV M,A  ; Store in Memory 
2312   19E0 23          		INX H    ; Next memory locations
2313   19E1 05          		DCR B    ; Number of loops
2314   19E2 C2 AF 19    		JNZ next4bits   ; 7340H
2315   19E5 F1          		POP PSW
2316   19E6 3E 02       		MVI A,02H ; 
2317   19E8 CC F0 19    		CZ setclkmode   ; 7383H     ; Set clock chip mode
2318   19EB AF          		XRA A
2319   19EC CD F0 19    		CALL setclkmode ; 7383H     ; Set clock chip mode
2320   19EF             ; Enable the background tasks
2321   19EF             		;MVI A,09H  ;743CH
2322   19EF             		;SIM
2323   19EF C9          		RET
2324   19F0             
2325   19F0             ; ======================================================
2326   19F0             ; Set clock chip mode
2327   19F0             ; ======================================================
2328   19F0             setclkmode: ;7383H
2329   19F0 D3 B1       		OUT PIOA     ; B9H PIO A
2330   19F2             ;7385H  (3AH) LDA FF45H      ; Contents of port E8H
2331   19F2 E5          		PUSH H
2332   19F3 CD B9 23    		CALL stromlocation
2333   19F6 7E          		MOV A,M 
2334   19F7 F6 04       		ORI 04H      ; CLK Strobe HI
2335   19F9 D3 E8       		OUT CtrlReg  ; E8H 
2336   19FB E6 FB       		ANI 0FBH     ; CLK Strobe LO
2337   19FD D3 E8       		OUT CtrlReg  ; E8H
2338   19FF E1          		POP H
2339   1A00 C9          		RET    
2340   1A01             
2341   1A01             ; ======================================================
2342   1A01             ; Initial clock chip register values
2343   1A01             ; ======================================================
2344   1A01             clockinitvalues: ;7F01H
2345   1A01             ; Order is in reverse:
2346   1A01             ; SecL/SecH/MinL/MinH/HourL/HourH/DayL/DayH/DOW/Month
2347   1A01             ;                  M D Dy Ho Mi Se
2348   1A01             ; Setting below => 1 0 01 11 53 50
2349   1A01 00 05 03 05 	.db 000H,005H,0003H,005H,001H,001H,001H,000H
2349   1A05 01 01 01 00 
2350   1A09 00 01 CF 9D 	.db 000H,001H,0CFH,09DH,0CFH,0DDH	
2350   1A0D CF DD 
2351   1A0F             ;	.db 000H,000H,000H,000H,000H,000H,001H,000H
2352   1A0F             ;	.db 000H,001H,0CFH,09DH,0CFH,0DDH
2353   1A0F             
2354   1A0F             ; ##########################################################
2355   1A0F             ; ##########################################################
2356   1A0F             ; **********************************************************
2357   1A0F             ; Test timer interrupt
2358   1A0F             ; 	Initial set up of the test.
2359   1A0F             ; **********************************************************
2360   1A0F             ; Set interrupt.
2361   1A0F             rst75test:
2362   1A0F CD C3 24    		CALL clrscreen
2363   1A12             
2364   1A12 CD C6 23    		CALL rst75testlocation
2365   1A15 36 00       		MVI M,0
2366   1A17             		
2367   1A17 21 DA 25    		LXI H,rst75teststr
2368   1A1A CD 71 24    		CALL putstr
2369   1A1D CD F0 24     		CALL longdelay  ; Let the clock tick
2370   1A20              		
2371   1A20 3E 80        		MVI A,080H         ; Set Cursor to top line
2372   1A22 CD 66 24    		CALL putins
2373   1A25 CD 79 19    		CALL printclkdata  ; Print the clock data	
2374   1A28             		
2375   1A28 3E 1B       		MVI A,1BH      ; Prepare to re-enable RST 7.5 interrupt, Set bit 0
2376   1A2A 30          		SIM            ; Re-enable RST 7.5 interrupt
2377   1A2B FB          		EI             ; Re-enable interrupts
2378   1A2C             	
2379   1A2C             		;Approx 6s delay. Clock should tick ~6s & Test location should reach 2x that
2380   1A2C             		
2381   1A2C CD F0 24    		CALL longdelay
2382   1A2F CD F0 24    		CALL longdelay
2383   1A32 CD F0 24    		CALL longdelay
2384   1A35 CD F0 24    		CALL longdelay
2385   1A38 CD F0 24    		CALL longdelay
2386   1A3B CD F0 24    		CALL longdelay
2387   1A3E             
2388   1A3E F3          		DI
2389   1A3F 3E 1F       		MVI A,1FH      ; Load to disble interrupts
2390   1A41 30          		SIM            ; Disable all interrupts
2391   1A42             
2392   1A42 3E C0        		MVI A,0C0H         ; Set Cursor to bottom line
2393   1A44 CD 66 24    		CALL putins
2394   1A47 CD 79 19    		CALL printclkdata  ; Print the clock data
2395   1A4A             			
2396   1A4A 3E 8C       		MVI A,08CH         ; Set cursor to top line
2397   1A4C CD 66 24    		CALL putins
2398   1A4F             			
2399   1A4F             		;Check the operation of the interrupt		
2400   1A4F CD C6 23    		CALL rst75testlocation
2401   1A52 7E          		MOV A,M
2402   1A53 FE 06       		CPI 6   	; Make sure it is ticking should > 6s	
2403   1A55             				
2404   1A55 F5          		PUSH PSW
2405   1A56             		
2406   1A56 1F          		RAR	       ; /2 This should match the difference in seconds
2407   1A57             
2408   1A57 CD 91 24    		CALL prthex    ; Print the count
2409   1A5A             
2410   1A5A 3E CB        		MVI A,0CBH     ; Set Cursor to bottom line
2411   1A5C CD 66 24    		CALL putins
2412   1A5F             		
2413   1A5F 21 06 25    		LXI H,passstr
2414   1A62             		
2415   1A62 F1          		POP PSW
2416   1A63 D2 69 1A    		JNC rst75testdone
2417   1A66 21 0C 25    		LXI H,testfailstr
2418   1A69             
2419   1A69             rst75testdone:
2420   1A69 CD 71 24    		CALL putstr
2421   1A6C             	
2422   1A6C CD E4 24    		CALL diagscreenpause ;Delay to allow review
2423   1A6F C3 8C 1A    		JMP rst65test
2424   1A72             
2425   1A72             ; ======================================================
2426   1A72             ; RST 7.5 interrupt routine (Background tick)
2427   1A72             ; ======================================================
2428   1A72             timint:
2429   1A72 E5          		PUSH H         ; \
2430   1A73 D5          		PUSH D         ;  \ Save all registers on stack
2431   1A74 C5          		PUSH B         ;  /
2432   1A75 F5          		PUSH PSW       ; /
2433   1A76 3E 1B       		MVI A,01BH     ; Prepare to re-enable RST 7.5 interrupt
2434   1A78 30          		SIM            ; Re-enable RST 7.5 interrupt
2435   1A79 FB          		EI             ; Re-enable interrupts
2436   1A7A             
2437   1A7A CD AC 23    		CALL getcountdown
2438   1A7D 35          		DCR M           ; Decrement the 2Hz count-down counter
2439   1A7E C2 87 1A    		JNZ timintdone  ; 1BAEH Jump if not zero to skip 10Hz background logic
2440   1A81 36 7D       		MVI M,07DH      ; Re-load count-down value for 2 Hz
2441   1A83             
2442   1A83 CD C6 23    		CALL rst75testlocation
2443   1A86 34          		INR M
2444   1A87             
2445   1A87             timintdone:
2446   1A87 F1          		POP PSW     ; \
2447   1A88 C1          		POP B       ;  \ Retrieve all registers on stack
2448   1A89 D1          		POP D       ;  /
2449   1A8A E1          		POP H		; /
2450   1A8B C9          		RET
2451   1A8C             
2452   1A8C             
2453   1A8C             ; ##########################################################
2454   1A8C             ; ##########################################################
2455   1A8C             ; **********************************************************
2456   1A8C             ; Test Serial Port
2457   1A8C             ; Send and receive a character in loopback
2458   1A8C             ; Use interrupt to receive character
2459   1A8C             ; Switch to modem and check serial port does not work.
2460   1A8C             ; **********************************************************
2461   1A8C             rst65test:
2462   1A8C CD C3 24    		CALL clrscreen
2463   1A8F             		
2464   1A8F 21 05 26    		LXI H,rst65teststr
2465   1A92 CD 71 24    		CALL putstr
2466   1A95             
2467   1A95 3E C0        		MVI A,0C0H     ; Set Cursor to back to start
2468   1A97 CD 66 24    		CALL putins	
2469   1A9A 21 16 26    		LXI H,dsrteststr
2470   1A9D CD 71 24    		CALL putstr	
2471   1AA0             
2472   1AA0             ; ======================================================		
2473   1AA0             ; Test CTS/RTS/DSR/DTS
2474   1AA0             ;  CTS - PC4 10H, DSR - PC5 20H 4E
2475   1AA0             ;  RTS - PB7 80H, DTR - PB6 40H 46
2476   1AA0             ; ======================================================
2477   1AA0             
2478   1AA0 06 00       		MVI B,0        ; Use B for failure count
2479   1AA2             ;Test setting 1		
2480   1AA2 DB B2       		IN PIOB        ; Read PIOB port
2481   1AA4 F6 C0       		ORI 0C0H       ; Set RTS and DTR = 1
2482   1AA6 D3 B2       		OUT PIOB  
2483   1AA8             		
2484   1AA8             ;RTS Set 1
2485   1AA8 3E C6        		MVI A,0C6H     ; Set Cursor to back to start
2486   1AAA CD 66 24    		CALL putins	
2487   1AAD             
2488   1AAD DB B3       		IN PIOC        ; Read Port C	
2489   1AAF E6 10       		ANI 010H       ; Get CTS-RTS	
2490   1AB1             		
2491   1AB1 CA B9 1A    		JZ rtsonefail
2492   1AB4 3E 31       		MVI A,'1'
2493   1AB6 C3 BD 1A    		JMP rtsonedone
2494   1AB9             rtsonefail:
2495   1AB9 3E 46       		MVI A,'F'
2496   1ABB 06 01       		MVI B,1
2497   1ABD             rtsonedone:		
2498   1ABD CD 5B 24    		CALL putch
2499   1AC0             		
2500   1AC0             ;DTR Set 1
2501   1AC0 3E CE        		MVI A,0CEH     ; Set Cursor to back to slot
2502   1AC2 CD 66 24    		CALL putins	
2503   1AC5             		
2504   1AC5 DB B3       		IN PIOC
2505   1AC7 E6 20       		ANI 020H       ; Get DSR-DTR	
2506   1AC9             
2507   1AC9 CA D1 1A    		JZ dtronefail
2508   1ACC 3E 31       		MVI A,'1'
2509   1ACE C3 D5 1A    		JMP dtronedone
2510   1AD1             dtronefail:
2511   1AD1 3E 46       		MVI A,'F'
2512   1AD3 06 01       		MVI B,1
2513   1AD5             dtronedone:
2514   1AD5 CD 5B 24    		CALL putch
2515   1AD8             
2516   1AD8 CD F0 24    		CALL longdelay
2517   1ADB CD F0 24     		CALL longdelay
2518   1ADE CD F0 24     		CALL longdelay
2519   1AE1             		
2520   1AE1             ;Test setting 0	
2521   1AE1 DB B2       		IN PIOB        ; Read PIOB port
2522   1AE3 E6 3F       		ANI 03FH       ; Set RTS and DSR = 0
2523   1AE5 D3 B2       		OUT PIOB  
2524   1AE7             		
2525   1AE7             ;RTS Set 0
2526   1AE7 3E C6        		MVI A,0C6H     ; Set Cursor to back to RTS position
2527   1AE9 CD 66 24    		CALL putins	
2528   1AEC             
2529   1AEC DB B3       		IN PIOC        ; Read Port C	
2530   1AEE E6 10       		ANI 010H       ; Get CTS-RTS	
2531   1AF0             		
2532   1AF0 C2 F8 1A    		JNZ rtszerofail
2533   1AF3 3E 30       		MVI A,'0'
2534   1AF5 C3 FC 1A    		JMP rtszerodone
2535   1AF8             rtszerofail:
2536   1AF8 3E 46       		MVI A,'F'
2537   1AFA 06 01       		MVI B,1
2538   1AFC             rtszerodone:
2539   1AFC CD 5B 24    		CALL putch
2540   1AFF             		
2541   1AFF             ;DTR Set 0
2542   1AFF 3E CE       		MVI A,0CEH     ; Set Cursor to DTR position	
2543   1B01 CD 66 24    		CALL putins	
2544   1B04             		
2545   1B04 DB B3       		IN PIOC
2546   1B06 E6 20       		ANI 020H       ; Get DTR	
2547   1B08             
2548   1B08 C2 10 1B    		JNZ dtrzerofail
2549   1B0B 3E 30       		MVI A,'0'
2550   1B0D C3 14 1B    		JMP dtrzerodone
2551   1B10             dtrzerofail:
2552   1B10 3E 46       		MVI A,'F'
2553   1B12 06 01       		MVI B,1
2554   1B14             dtrzerodone:
2555   1B14 CD 5B 24    		CALL putch	
2556   1B17             
2557   1B17 CD F0 24    		CALL longdelay
2558   1B1A CD F0 24     		CALL longdelay
2559   1B1D CD F0 24     		CALL longdelay
2560   1B20             
2561   1B20 3E 8B       		MVI A,08BH     ; Set Cursor to back to start
2562   1B22 CD 66 24    		CALL putins		
2563   1B25             
2564   1B25 21 06 25    		LXI H,passstr
2565   1B28 78          		MOV A,B
2566   1B29 FE 00       		CPI 0
2567   1B2B CA 31 1B    		JZ rst65dtrdone
2568   1B2E             
2569   1B2E             rst65testfail:		
2570   1B2E 21 0C 25    		LXI H,testfailstr
2571   1B31             rst65dtrdone:
2572   1B31 CD 71 24    		CALL putstr
2573   1B34             		
2574   1B34 3E 80       		MVI A,080H     ; Set Cursor to back to start
2575   1B36 CD 66 24    		CALL putins	
2576   1B39             				
2577   1B39 CD E4 24     		CALL diagscreenpause ;Delay to allow review
2578   1B3C              		
2579   1B3C CD E2 23     		CALL rxbuffer  ; Store received character
2580   1B3F 36 00       		MVI M,0
2581   1B41             
2582   1B41             ; ======================================================		
2583   1B41             ; Configure serial port loopback test
2584   1B41             ; ======================================================		
2585   1B41 21 27 26    		LXI H,loopbackteststr
2586   1B44 CD 71 24      		CALL putstr
2587   1B47             
2588   1B47 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
2589   1B49 CD 66 24    		CALL putins	  		
2590   1B4C               				
2591   1B4C 21 38 26      		LXI H,loopbackstatstr
2592   1B4F CD 71 24      		CALL putstr
2593   1B52             
2594   1B52             		; Reset buffer
2595   1B52 AF          		XRA A
2596   1B53 CD E2 23    		CALL rxbuffer  ; Store received character
2597   1B56 77          		MOV M,A
2598   1B57 23          		INX H
2599   1B58 77          		MOV M,A    
2600   1B59             	
2601   1B59             ; Set baud rate 19200 using PIO Timer	
2602   1B59 3E 08       		MVI A,008H
2603   1B5B D3 B4       		OUT PIOT1     ; BCH Timer 0
2604   1B5D 3E 40       		MVI A,040H
2605   1B5F D3 B5       		OUT PIOT2	  ; BDH Timer 1
2606   1B61 3E C3       		MVI A,0C3H
2607   1B63 D3 B0       		OUT PIOCR	  ; B8H Control Reg
2608   1B65             		
2609   1B65             ; Configure UART Chip
2610   1B65             ; B11100: 8bits + No Parity + 1 stop
2611   1B65 3E 1C       		MVI A,01CH
2612   1B67 D3 D8       		OUT UARTmode  ; D8H
2613   1B69             
2614   1B69 3E 1D       		MVI A,01DH     ; Prepare to re-enable RST 6.5 interrupt
2615   1B6B 30          		SIM  
2616   1B6C FB          		EI
2617   1B6D             ; ======================================================
2618   1B6D             ; Begin the loopback test	
2619   1B6D             ; ======================================================
2620   1B6D 06 00       		MVI B,0		
2621   1B6F             		
2622   1B6F             txnewchar:
2623   1B6F             ;TX Byte      ;6E3AH
2624   1B6F 3E C2       		MVI A,0C2H     ; Set Cursor to C gap
2625   1B71 CD 66 24    		CALL putins	 
2626   1B74             		
2627   1B74 DB D8       		IN UARTmode   ; D8H
2628   1B76 CD 91 24    		CALL prthex
2629   1B79             	
2630   1B79 E6 10       		ANI 010H      ; TX Buffer empty - High buffer empty
2631   1B7B CA BE 1B    		JZ txfail     ; 6E3AH       ; Send character in C to serial port
2632   1B7E             
2633   1B7E 3E C8       		MVI A,0C8H     ; Set Cursor  TX gap
2634   1B80 CD 66 24    		CALL putins			
2635   1B83 78          		MOV A,B
2636   1B84 D3 C8       		OUT UARTsend ; C8H
2637   1B86 CD 91 24    		CALL prthex
2638   1B89             
2639   1B89 3E CA       		MVI A,0CAH     ; Set Cursor  RX gap
2640   1B8B CD 66 24    		CALL putins		
2641   1B8E             
2642   1B8E             		; Short delay to make sure char is there
2643   1B8E 16 0A       		MVI D,10
2644   1B90             TXdelay:
2645   1B90 0E FF       		MVI C,255   ;
2646   1B92 CD B8 24    		CALL shortdelay ; Wait ~1ms to allow char to be received
2647   1B95 15          		DCR D
2648   1B96 C2 90 1B    		JNZ TXdelay
2649   1B99             
2650   1B99             ;RX Char
2651   1B99             ;RXwait:		
2652   1B99 CD E2 23    		CALL rxbuffer  ; Get Received Char
2653   1B9C 23          		INX H
2654   1B9D 7E          		MOV A,M
2655   1B9E FE BF       		CPI 0BFH
2656   1BA0             		;No character RX failed
2657   1BA0 C2 C4 1B    		JNZ rxfail
2658   1BA3 2B          		DCX H
2659   1BA4              
2660   1BA4 3E CE       		MVI A,0CEH     ; Set Cursor to RX gap
2661   1BA6 CD 66 24    		CALL putins 
2662   1BA9             
2663   1BA9 7E          		MOV A,M
2664   1BAA CD 91 24    		CALL prthex
2665   1BAD             		
2666   1BAD B8          		CMP B
2667   1BAE C2 C4 1B    		JNZ rxfail
2668   1BB1             		
2669   1BB1             		;Reset Char received
2670   1BB1 23          		INX H
2671   1BB2 36 00       		MVI M,0
2672   1BB4             ;Next Char				
2673   1BB4 05          		DCR B
2674   1BB5 C2 6F 1B    		JNZ txnewchar
2675   1BB8             
2676   1BB8             rst65loopbacksuccess:				
2677   1BB8 21 5A 26    		LXI H,loopbackpassstr	
2678   1BBB C3 CD 1B    		JMP rst65testdone
2679   1BBE             
2680   1BBE             txfail:
2681   1BBE 21 6B 26    		LXI H,txfailstr
2682   1BC1 C3 CD 1B    		JMP rst65testdone
2683   1BC4             
2684   1BC4             rxfail:
2685   1BC4 21 7C 26    		LXI H,rxfailstr
2686   1BC7 C3 CD 1B    		JMP rst65testdone
2687   1BCA             		
2688   1BCA             rst65loopbackfail:
2689   1BCA 21 49 26    		LXI H,loopbackfailstr	
2690   1BCD             			
2691   1BCD             rst65testdone:
2692   1BCD F3          		DI
2693   1BCE 3E 1F       		MVI A,01FH     ; Prepare to re-enable RST 7.5 interrupt
2694   1BD0 30          		SIM            ; Re-enable RST 7.5 interrupt
2695   1BD1             		
2696   1BD1 3E 43               MVI A,43H      ; Stop timer
2697   1BD3 D3 B0       		OUT PIOCR      ; B8H Control Reg
2698   1BD5             
2699   1BD5 3E 80       		MVI A,080H     ; Set Cursor to upper line
2700   1BD7 CD 66 24    		CALL putins			
2701   1BDA CD 71 24    		CALL putstr
2702   1BDD             waiting:
2703   1BDD CD E4 24    		CALL diagscreenpause ;Delay to allow review
2704   1BE0 C3 F6 1B    		JMP sysbustest
2705   1BE3             
2706   1BE3             ; ==========================================================
2707   1BE3             ; Serial port (6.5) Interrupt Service routine 	
2708   1BE3             ; ==========================================================	
2709   1BE3             serint:
2710   1BE3 E5          		PUSH H         ; \
2711   1BE4 D5          		PUSH D         ;  \ Save all registers on stack
2712   1BE5 C5          		PUSH B         ;  /
2713   1BE6 F5          		PUSH PSW       ; /
2714   1BE7             
2715   1BE7 DB C8       		IN UARTread    ; C8H         ; Serial Register
2716   1BE9             
2717   1BE9 CD E2 23    		CALL rxbuffer  ; Store received character
2718   1BEC 77          		MOV M,A
2719   1BED 23          		INX H
2720   1BEE 36 BF       		MVI M,0BFH     ; Char received 
2721   1BF0             
2722   1BF0 F1          		POP PSW     ; \
2723   1BF1 C1          		POP B       ;  \ Retrieve all registers on stack
2724   1BF2 D1          		POP D       ;  /
2725   1BF3 E1          		POP H		; /
2726   1BF4             		
2727   1BF4 FB          		EI
2728   1BF5 C9          		RET
2729   1BF6             
2730   1BF6             ; ##########################################################
2731   1BF6             ; ##########################################################
2732   1BF6             ; **********************************************************
2733   1BF6             ; Test Sys BUS @ 80H
2734   1BF6             ;  Read and write to the sysbus
2735   1BF6             ; **********************************************************
2736   1BF6             ;Write to the sys bus register
2737   1BF6             sysbustest:
2738   1BF6 F3          		DI 
2739   1BF7 CD C3 24    		CALL clrscreen
2740   1BFA             		
2741   1BFA 21 E3 25    		LXI H, sysbusteststr
2742   1BFD CD 71 24    		CALL putstr
2743   1C00             		
2744   1C00 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
2745   1C02 CD 66 24    		CALL putins	
2746   1C05             		
2747   1C05 21 F4 25    		LXI H, systeststr
2748   1C08 CD 71 24    		CALL putstr
2749   1C0B             
2750   1C0B 21 5A 29    		LXI H,ramtstdata ; Load the RAM byte test data table
2751   1C0E             sysbus1:
2752   1C0E 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
2753   1C10 CD 66 24    		CALL putins
2754   1C13             
2755   1C13 7E          		MOV A,M   	     ; Get first entry
2756   1C14 FE FE       		CPI 0FEH         ; Check end of table
2757   1C16 CA 43 1C    		JZ sysbustestdone    
2758   1C19             	
2759   1C19 D3 80        		OUT sysreg     ; Send to the Sys bus port
2760   1C1B              		 	
2761   1C1B CD 91 24     		CALL prthex    ; Print the written character
2762   1C1E             
2763   1C1E 3E C9       		MVI A,0C9H     ; Set Cursor to RD back
2764   1C20 CD 66 24    		CALL putins	
2765   1C23             		 			
2766   1C23 DB 80        		IN sysreg       ; Read from the sys bus port
2767   1C25             
2768   1C25 CD 91 24     		CALL prthex     ; Print the rd character
2769   1C28             
2770   1C28 BE          		CMP M 
2771   1C29 C2 3D 1C    		JNZ sysbustestfail
2772   1C2C CD F0 24    		CALL longdelay  ; Brief wait
2773   1C2F             
2774   1C2F 23          		INX H           ; Get next RAM test byte
2775   1C30             
2776   1C30             		;Print out the settings
2777   1C30 3E CE       		MVI A,0CEH     ; Set Cursor to Settings slot
2778   1C32 CD 66 24    		CALL putins
2779   1C35             		
2780   1C35 DB 81       		IN setreg
2781   1C37 CD 91 24    		CALL prthex
2782   1C3A             
2783   1C3A C3 0E 1C    		JMP sysbus1
2784   1C3D             
2785   1C3D             sysbustestfail:
2786   1C3D 21 0C 25    		LXI H,sysfailstr
2787   1C40 C3 46 1C    		JMP sysbustestprt
2788   1C43             		
2789   1C43             sysbustestdone:				
2790   1C43 21 06 25    		LXI H,passstr
2791   1C46             		
2792   1C46             sysbustestprt:
2793   1C46 3E 8A       		MVI A,08AH     ; Set Cursor to back to upper line
2794   1C48 CD 66 24    		CALL putins	
2795   1C4B             		
2796   1C4B CD 71 24    		CALL putstr
2797   1C4E CD E4 24    		CALL diagscreenpause ;Delay to allow review
2798   1C51 C3 54 1C    		JMP lpttest	
2799   1C54             
2800   1C54             ; ##########################################################
2801   1C54             ; ##########################################################	
2802   1C54             ; **********************************************************
2803   1C54             ; Test Printer Port
2804   1C54             ; Write to the LPT port
2805   1C54             ; Check the strobe works
2806   1C54             ; Check busy- and busy works.
2807   1C54             ; **********************************************************
2808   1C54             lpttest:
2809   1C54 CD C3 24    		CALL clrscreen  ; Reset the screen for the new test
2810   1C57             		
2811   1C57 21 8D 26    		LXI H,lptteststr
2812   1C5A CD 71 24    		CALL putstr
2813   1C5D             
2814   1C5D 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
2815   1C5F CD 66 24    		CALL putins	
2816   1C62             		
2817   1C62 21 96 26    		LXI H, lptloopteststr ;
2818   1C65 CD 71 24    		CALL putstr
2819   1C68             		
2820   1C68 11 5A 29    		LXI D,ramtstdata ; Load the RAM byte test data table
2821   1C6B             lpttest1:
2822   1C6B 3E C3        		MVI A,0C3H     ; Set Cursor to back for new count
2823   1C6D CD 66 24    		CALL putins	
2824   1C70             		
2825   1C70 1A          		LDAX D   	 ; D = Current RAM byte test data
2826   1C71 FE FE       		CPI 0FEH     ; Check end of table
2827   1C73 CA 9E 1C    		JZ lpttestdone1
2828   1C76             
2829   1C76             		;CMA         ; Complement
2830   1C76 D3 B1       		OUT PIOA   	 ; B9H 
2831   1C78 CD 91 24    		CALL prthex  ; Print the data
2832   1C7B             			
2833   1C7B 4F          		MOV C,A      ; Save A
2834   1C7C             	    
2835   1C7C             		; Pulse the strobe line to write data to register   
2836   1C7C CD B9 23    		CALL stromlocation
2837   1C7F 7E          		MOV A,M
2838   1C80 47          		MOV B,A
2839   1C81 F6 02       		ORI 02H
2840   1C83 D3 E8       		OUT CtrlReg 	 ; E8H
2841   1C85 78          		MOV A,B
2842   1C86 D3 E8       		OUT CtrlReg 	 ; E8H
2843   1C88             
2844   1C88 1A          		LDAX D
2845   1C89             
2846   1C89 3E C9        		MVI A,0C9H     ; Set Cursor to back for new count
2847   1C8B CD 66 24    		CALL putins		
2848   1C8E             
2849   1C8E DB 82       		IN lptreg      ; Read the LPT reg
2850   1C90             		
2851   1C90             		;CMA 
2852   1C90 CD 91 24    		CALL prthex    ; Print the data
2853   1C93             
2854   1C93 CD F0 24    		CALL longdelay
2855   1C96             
2856   1C96 B9          		CMP C
2857   1C97 C2 48 1D    		JNZ lpttestfail		
2858   1C9A 13          		INX D          ; Get next RAM test byte
2859   1C9B C3 6B 1C    		JMP lpttest1
2860   1C9E             		
2861   1C9E             		
2862   1C9E             lpttestdone1:				
2863   1C9E 3E 8A       		MVI A,08AH     ; Set Cursor to back upper line
2864   1CA0 CD 66 24    		CALL putins	
2865   1CA3             		
2866   1CA3 21 06 25    		LXI H,passstr
2867   1CA6             		
2868   1CA6 CD 71 24    		CALL putstr
2869   1CA9 CD E4 24    		CALL diagscreenpause ;Delay to allow review
2870   1CAC             		
2871   1CAC             ; *********************************************
2872   1CAC             ; ** Test the two busy lines, busy and busy- **
2873   1CAC             ; *********************************************
2874   1CAC             lpttestnext:
2875   1CAC             ;Check Busy and Busy- lines PC1 Busy- PC2 Busy
2876   1CAC 3E 80        		MVI A,080H     ; Set Cursor to back to start
2877   1CAE CD 66 24    		CALL putins	
2878   1CB1 21 A2 26    		LXI H,nbusyteststr
2879   1CB4 CD 71 24    		CALL putstr	
2880   1CB7             
2881   1CB7             
2882   1CB7 3E C0        		MVI A,0C0H     ; Set Cursor to back to start
2883   1CB9 CD 66 24    		CALL putins	
2884   1CBC 21 B3 26    		LXI H,busyteststr
2885   1CBF CD 71 24    		CALL putstr	
2886   1CC2             
2887   1CC2 3E 86        		MVI A,086H     ; Set Cursor to BUSY-
2888   1CC4 CD 66 24    		CALL putins	
2889   1CC7             
2890   1CC7             ; Set up BUSY line tests
2891   1CC7 AF          		XRA A         ; Set Busy and Busy- to 0
2892   1CC8 4F          		MOV C,A
2893   1CC9 D3 B1       		OUT PIOA   	  ; B9H 
2894   1CCB             
2895   1CCB             		; Pulse the strobe line to write data to register   
2896   1CCB CD B9 23    		CALL stromlocation
2897   1CCE 7E          		MOV A,M
2898   1CCF 47          		MOV B,A
2899   1CD0 F6 02       		ORI 02H
2900   1CD2 D3 E8       		OUT CtrlReg 	 ; E8H
2901   1CD4 78          		MOV A,B
2902   1CD5 D3 E8       		OUT CtrlReg 	 ; E8H
2903   1CD7             
2904   1CD7             		; Read the state of the busy lines				
2905   1CD7 DB B3       		IN PIOC        ; Read Port C
2906   1CD9             	
2907   1CD9 47          		MOV B,A
2908   1CDA             			
2909   1CDA E6 02       		ANI 002H       ; Get Busy-	
2910   1CDC CA E6 1C    		JZ nbusyzero
2911   1CDF             		
2912   1CDF 3E 46       		MVI A,'F'
2913   1CE1 0E 01       		MVI C,1
2914   1CE3 C3 E8 1C    		JMP nbusydone
2915   1CE6             		
2916   1CE6             nbusyzero:
2917   1CE6 3E 30       		MVI A,'0'
2918   1CE8             nbusydone:
2919   1CE8 CD 5B 24    		CALL putch
2920   1CEB             
2921   1CEB 3E C6        		MVI A,0C6H     ; Set Cursor to BUSY
2922   1CED CD 66 24    		CALL putins	
2923   1CF0             				
2924   1CF0 78          		MOV A,B
2925   1CF1             		
2926   1CF1 E6 04       		ANI 004H       ; Get Busy	
2927   1CF3 CA FD 1C    		JZ busyzero
2928   1CF6 3E 46       		MVI A,'F'
2929   1CF8 0E 01       		MVI C,1
2930   1CFA C3 FF 1C    		JMP busydone
2931   1CFD             busyzero:
2932   1CFD 3E 30       		MVI A,'0'
2933   1CFF             busydone:
2934   1CFF CD 5B 24    		CALL putch
2935   1D02             
2936   1D02             
2937   1D02 3E 87        		MVI A,087H     ; Set Cursor to BUSY-
2938   1D04 CD 66 24    		CALL putins	
2939   1D07             		
2940   1D07 3E 03       		MVI A,3       ; Set Busy and Busy- to 1
2941   1D09 D3 B1       		OUT PIOA   	  ; B9H 
2942   1D0B             
2943   1D0B             lpttestbusy:
2944   1D0B             		; Pulse the strobe line to write data to register   
2945   1D0B CD B9 23    		CALL stromlocation
2946   1D0E 7E          		MOV A,M
2947   1D0F 47          		MOV B,A
2948   1D10 F6 02       		ORI 02H
2949   1D12 D3 E8       		OUT CtrlReg 	 ; E8H
2950   1D14 78          		MOV A,B
2951   1D15 D3 E8       		OUT CtrlReg 	 ; E8H
2952   1D17             
2953   1D17             		; Read the state of the busy lines				
2954   1D17 DB B3       		IN PIOC        ; Read Port C
2955   1D19             	
2956   1D19 47          		MOV B,A
2957   1D1A             			
2958   1D1A E6 02       		ANI 002H       ; Get Busy-	
2959   1D1C C2 26 1D    		JNZ nbusyone
2960   1D1F             		
2961   1D1F 3E 46       		MVI A,'F'
2962   1D21 0E 01       		MVI C,1
2963   1D23 C3 28 1D    		JMP nbusydone1
2964   1D26             		
2965   1D26             nbusyone:
2966   1D26 3E 31       		MVI A,'1'
2967   1D28             nbusydone1:
2968   1D28 CD 5B 24    		CALL putch
2969   1D2B             
2970   1D2B 3E C7        		MVI A,0C7H     ; Set Cursor to BUSY
2971   1D2D CD 66 24    		CALL putins	
2972   1D30             				
2973   1D30 78          		MOV A,B
2974   1D31             		
2975   1D31 E6 04       		ANI 004H       ; Get Busy	
2976   1D33 C2 3D 1D    		JNZ busyone
2977   1D36 3E 46       		MVI A,'F'
2978   1D38 0E 01       		MVI C,1
2979   1D3A C3 3F 1D    		JMP busydone1
2980   1D3D             		
2981   1D3D             busyone:
2982   1D3D 3E 31       		MVI A,'1'
2983   1D3F             busydone1:
2984   1D3F CD 5B 24    		CALL putch
2985   1D42             				
2986   1D42             ;Check C for failures
2987   1D42 79          		MOV A,C
2988   1D43 FE 00       		CPI 0
2989   1D45 CA 4E 1D    		JZ lpttestdone
2990   1D48             
2991   1D48             lpttestfail:  
2992   1D48 21 0C 25    		LXI H,lptfailstr
2993   1D4B C3 51 1D    		JMP lptprtdone
2994   1D4E             		
2995   1D4E             lpttestdone:
2996   1D4E 21 06 25    		LXI H,passstr
2997   1D51             
2998   1D51             lptprtdone:
2999   1D51 3E 89       		MVI A,089H     ; Set Cursor to back upper line
3000   1D53 CD 66 24    		CALL putins	
3001   1D56 CD 71 24    		CALL putstr
3002   1D59             
3003   1D59             		;Set up for the BCR test
3004   1D59 3E 80       		MVI A,080H
3005   1D5B D3 B1       		OUT PIOA
3006   1D5D             
3007   1D5D             		; Pulse the strobe line to write data to register   
3008   1D5D CD B9 23    		CALL stromlocation
3009   1D60 7E          		MOV A,M
3010   1D61 47          		MOV B,A
3011   1D62 F6 02       		ORI 02H
3012   1D64 D3 E8       		OUT CtrlReg 	 ; E8H
3013   1D66 78          		MOV A,B
3014   1D67 D3 E8       		OUT CtrlReg 	 ; E8H
3015   1D69             
3016   1D69 CD E4 24    		CALL diagscreenpause ;Delay to allow review
3017   1D6C C3 6F 1D    		JMP rst55test	
3018   1D6F             
3019   1D6F             ; ##########################################################
3020   1D6F             ; ##########################################################
3021   1D6F             ; **********************************************************
3022   1D6F             ; Test BCR
3023   1D6F             ; Read the port bit
3024   1D6F             ; Check the interrupt works.
3025   1D6F             ; **********************************************************
3026   1D6F             bcrloopcnt .equ 250
3027   1D6F             
3028   1D6F             rst55test:
3029   1D6F CD C3 24    		CALL clrscreen
3030   1D72             		
3031   1D72 21 C4 26    		LXI H,rst55teststr
3032   1D75 CD 71 24    		CALL putstr
3033   1D78              		;CALL longdelay  ; Let the clock tick
3034   1D78             
3035   1D78 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
3036   1D7A CD 66 24    		CALL putins
3037   1D7D             
3038   1D7D 21 CD 26    		LXI H,rst55loopteststr
3039   1D80 CD 71 24    		CALL putstr
3040   1D83             
3041   1D83 CD EF 23    		CALL rst55testlocation
3042   1D86 36 00       		MVI M,0        ; Reset button counter
3043   1D88             		 				
3044   1D88 3E 0E       		MVI A,00EH     ; Prepare to re-enable RST 5.5 interrupt, Set bit 0
3045   1D8A 30          		SIM            ; Re-enable RST 5.5 interrupt
3046   1D8B FB          		EI             ; Enable Interrupts
3047   1D8C              
3048   1D8C 06 FA        		MVI B,bcrloopcnt
3049   1D8E             rst55wait:
3050   1D8E             
3051   1D8E 3E 00       		MVI A,000H    ; Set BCR to 0
3052   1D90 D3 B1       		OUT PIOA      ; B9H 
3053   1D92             
3054   1D92             		; Pulse the strobe line to write data to ctrl register   
3055   1D92 CD B9 23    		CALL stromlocation
3056   1D95 7E          		MOV A,M
3057   1D96 4F          		MOV C,A
3058   1D97 F6 02       		ORI 02H
3059   1D99 D3 E8       		OUT CtrlReg 	 ; E8H
3060   1D9B 79          		MOV A,C
3061   1D9C D3 E8       		OUT CtrlReg 	 ; E8H
3062   1D9E             				
3063   1D9E             		; Short delay to let the interrupt happen
3064   1D9E 16 01       		MVI D,1
3065   1DA0             BCRdelay:
3066   1DA0 0E FF       		MVI C,255   ;
3067   1DA2 CD B8 24    		CALL shortdelay ; Wait ~1ms to allow interrupt
3068   1DA5 15          		DCR D
3069   1DA6 C2 A0 1D    		JNZ BCRdelay
3070   1DA9             
3071   1DA9             		; Print the loop count and interrupt counts
3072   1DA9 3E C3        		MVI A,0C3H     ; Set Cursor to loop location
3073   1DAB CD 66 24    		CALL putins
3074   1DAE             
3075   1DAE 78          		MOV A,B
3076   1DAF 3D          		DCR A
3077   1DB0             
3078   1DB0 CD 91 24    		CALL prthex   ; Print the count
3079   1DB3             
3080   1DB3 3E C9        		MVI A,0C9H     ; Set Interrupt count prt location
3081   1DB5 CD 66 24    		CALL putins
3082   1DB8             
3083   1DB8 CD EF 23    		CALL rst55testlocation
3084   1DBB 7E          		MOV A,M
3085   1DBC             				
3086   1DBC CD 91 24    		CALL prthex    ; Print the interrupt count
3087   1DBF             				
3088   1DBF 05          		DCR B		
3089   1DC0 C2 8E 1D    		JNZ rst55wait
3090   1DC3             
3091   1DC3             
3092   1DC3             ;Complete test the results
3093   1DC3 F3          		DI              ; Disable interrupts
3094   1DC4 3E 1F       		MVI A,01FH      ; Prepare to disable all interrupts
3095   1DC6 30          		SIM  
3096   1DC7             
3097   1DC7 3E 87       		MVI A,087H     ; Set Cursor to top line
3098   1DC9 CD 66 24    		CALL putins	
3099   1DCC             
3100   1DCC CD EF 23    		CALL rst55testlocation
3101   1DCF 7E          		MOV A,M
3102   1DD0             			
3103   1DD0 21 06 25    		LXI H,passstr
3104   1DD3             		
3105   1DD3 FE FA       		CPI bcrloopcnt				
3106   1DD5 CA DB 1D    		JZ rst55testdone  ; If count == loopcount then Pass
3107   1DD8             		
3108   1DD8 21 0C 25    		LXI H,testfailstr ; Else failed
3109   1DDB             		
3110   1DDB             rst55testdone:
3111   1DDB CD 71 24    		CALL putstr
3112   1DDE CD E4 24    		CALL diagscreenpause ;Delay to allow review
3113   1DE1             
3114   1DE1 C3 14 1E    		JMP stromtest
3115   1DE4             
3116   1DE4             ; ==========================================================
3117   1DE4             ; BCR Interrupt Service routine
3118   1DE4             ; 	BCR PC3. Low level interrupt
3119   1DE4             ; ==========================================================	
3120   1DE4             bcrint:
3121   1DE4 E5          		PUSH H      ; \
3122   1DE5 D5          		PUSH D      ;  \ Save all registers on stack
3123   1DE6 C5          		PUSH B      ;  /
3124   1DE7 F5          		PUSH PSW    ; /
3125   1DE8             
3126   1DE8             
3127   1DE8 3E CE        		MVI A,0CEH     ; Set PIOC to count
3128   1DEA CD 66 24    		CALL putins
3129   1DED             
3130   1DED             		;MVI A,'>'
3131   1DED             		;CALL putch		
3132   1DED             
3133   1DED CD EF 23    		CALL rst55testlocation
3134   1DF0             
3135   1DF0             		;Check the BCR bit is 0
3136   1DF0 DB B3       		IN PIOC        ; Read the PIO PC3 
3137   1DF2 CD 91 24        	CALL prthex
3138   1DF5 E6 08       		ANI 008H 	   ; Access the BCR Bit it is inverted so should be '1'
3139   1DF7 CA FB 1D    		JZ bcrintdone  ; If not zero do not inc count
3140   1DFA             				
3141   1DFA 34          		INR M				
3142   1DFB             		
3143   1DFB             bcrintdone:
3144   1DFB             		;Clear the interrupt
3145   1DFB 3E 80       		MVI A,080H    ; Set BCR to 1
3146   1DFD D3 B1       		OUT PIOA      ; B9H 
3147   1DFF             
3148   1DFF             		; Pulse the strobe line to write data to register   
3149   1DFF CD B9 23    		CALL stromlocation
3150   1E02 7E          		MOV A,M
3151   1E03 4F          		MOV C,A
3152   1E04 F6 02       		ORI 02H
3153   1E06 D3 E8       		OUT CtrlReg 	 ; E8H
3154   1E08 79          		MOV A,C
3155   1E09 D3 E8       		OUT CtrlReg 	 ; E8H
3156   1E0B             
3157   1E0B F1          		POP PSW     ; \
3158   1E0C C1          		POP B       ;  \ Retrieve all registers on stack
3159   1E0D D1          		POP D       ;  /
3160   1E0E E1          		POP H		; /		
3161   1E0F FB          		EI
3162   1E10 C9          		RET
3163   1E11             		
3164   1E11             ; ##########################################################
3165   1E11             ; ##########################################################
3166   1E11             ; **********************************************************
3167   1E11             ; Test STROM register
3168   1E11             ; The STROM register controls: CLK, LPT, REMOTE, ROM selection
3169   1E11             ;  CLK bit is tested in Clock test
3170   1E11             ;  LPT bit is tested in the LPT test
3171   1E11             ;  REMOTE bit is tested in the cassette test
3172   1E11             ;
3173   1E11             ; STROM bit switches to the OPTROM.  During the switch the
3174   1E11             ; Range 0040-0048H is read to RAM. If the switch works 
3175   1E11             ; the data will be random based on the absence/presence of an
3176   1E11             ; OPTROM.  This location contains 'NO OPTROM' in the main test
3177   1E11             ; ROM.  If 'NO OPTROM' is read then the switch did not work.
3178   1E11             ; Code is run from the RAM in order to read the ROM contents.
3179   1E11             ; **********************************************************
3180   1E11             stromtestpiofail:
3181   1E11 3E 77       		MVI A,077H
3182   1E13 F5          		PUSH PSW
3183   1E14             stromtest:
3184   1E14 CD C3 24    		CALL clrscreen  ; Reset the screen for the new test
3185   1E17             		
3186   1E17 21 BD 27    		LXI H,stromteststr ; 
3187   1E1A CD 71 24    		CALL putstr	
3188   1E1D             
3189   1E1D 3E C0        		MVI A,0C0H      ; Set Cursor to Bottom line
3190   1E1F CD 66 24    		CALL putins
3191   1E22             		
3192   1E22             ;Find which memory version is being used
3193   1E22 CD 93 23    		CALL stackstart	  ;Which RAM is being used 9, B, D, F (80,A0,C0,E0) 
3194   1E25             		
3195   1E25 7A          		MOV A,D
3196   1E26             
3197   1E26 E6 F0       		ANI 0F0H
3198   1E28             ;RAM3 is the active one	
3199   1E28 FE 90       		CPI 090H
3200   1E2A C2 39 1E    		JNZ ram2loc
3201   1E2D CD 00 91    		CALL optram3
3202   1E30 21 08 28    		LXI H,ram3used
3203   1E33 11 17 91    		LXI D,optram3open
3204   1E36 C3 72 1E    		JMP stromdetect
3205   1E39             		
3206   1E39             ;RAM2 is the active one	
3207   1E39             ram2loc:		
3208   1E39 FE B0       		CPI 0B0H
3209   1E3B C2 4A 1E    		JNZ ram1loc
3210   1E3E CD 00 B1    		CALL optram2
3211   1E41 21 02 28    		LXI H,ram2used	
3212   1E44 11 17 B1    		LXI D,optram2open
3213   1E47 C3 72 1E    		JMP stromdetect
3214   1E4A             
3215   1E4A             ;RAM1 is the active one	
3216   1E4A             ram1loc:		
3217   1E4A FE D0       		CPI 0D0H
3218   1E4C C2 5B 1E    		JNZ ram0loc
3219   1E4F CD 00 D1    		CALL optram1
3220   1E52 21 FC 27    		LXI H,ram1used	
3221   1E55 11 17 D1    		LXI D,optram1open
3222   1E58 C3 72 1E    		JMP stromdetect
3223   1E5B             
3224   1E5B             ;RAM0 is the active one	
3225   1E5B             ram0loc:	
3226   1E5B FE F0       		CPI 0F0H
3227   1E5D C2 6C 1E    		JNZ ramnotfound
3228   1E60 CD 00 F1    		CALL optram0
3229   1E63 21 F6 27    		LXI H,ram0used	
3230   1E66 11 17 F1    		LXI D,optram0open
3231   1E69 C3 72 1E    		JMP stromdetect	
3232   1E6C             
3233   1E6C             ramnotfound:
3234   1E6C 21 EF 27    		LXI H,stromfailurestr
3235   1E6F C3 97 1E    		JMP stromtestdone
3236   1E72             			
3237   1E72             stromdetect:	
3238   1E72 CD 71 24    		CALL putstr
3239   1E75 3E 80        		MVI A,080H      ; Set Cursor to top line
3240   1E77 CD 66 24    		CALL putins				
3241   1E7A EB          		XCHG
3242   1E7B 11 40 00    		LXI D,040H
3243   1E7E 06 06       		MVI B,6
3244   1E80             optromloop:
3245   1E80 1A          		LDAX D
3246   1E81 BE          		CMP M
3247   1E82 C2 8E 1E    		JNZ optromfound
3248   1E85 13          		INX D
3249   1E86 23          		INX H
3250   1E87 05          		DCR B
3251   1E88 CA 94 1E    		JZ stromtestfail
3252   1E8B C3 80 1E    		JMP optromloop
3253   1E8E             optromfound:
3254   1E8E 21 CE 27    		LXI H,optromfoundstr
3255   1E91 C3 97 1E    		JMP stromtestdone
3256   1E94             		
3257   1E94             stromtestfail:
3258   1E94 21 DF 27    		LXI H,nooptromstr
3259   1E97             		
3260   1E97             stromtestdone:
3261   1E97 CD 71 24    		CALL putstr
3262   1E9A CD E4 24    		CALL diagscreenpause ;Delay to allow review
3263   1E9D             
3264   1E9D F1          		POP PSW
3265   1E9E FE 77       		CPI 077H
3266   1EA0 CA FE 20    		JZ castest					
3267   1EA3             
3268   1EA3 C3 A6 1E    		JMP chkkbd
3269   1EA6             
3270   1EA6             
3271   1EA6             ; ##########################################################
3272   1EA6             ; ##########################################################
3273   1EA6             ; **********************************************************
3274   1EA6             ; Test Keyboard
3275   1EA6             ;  Determine if there is a real keyboard or loop back.
3276   1EA6             ;  A real keyboard or loopback maybe used to test the port.
3277   1EA6             ;  The loopback connects PA0-PA7 to KR0-KR7, this allows a 
3278   1EA6             ;  direct validation that the connectors are good and that
3279   1EA6             ;  M13 and M15 are functional.  
3280   1EA6             :  NOTE: PB0 is not tested using the loopback.  It is however
3281   1EA6             ;  exercised in the LCD test.  
3282   1EA6             ;
3283   1EA6             ; **********************************************************
3284   1EA6             ; write 0H to Port A 
3285   1EA6             ; read back the keyboard port. 
3286   1EA6             ;	If keybd = 00H then loopback test 
3287   1EA6             ;	else keyboard test
3288   1EA6             ;   
3289   1EA6             chkkbd:
3290   1EA6 CD C3 24    		CALL clrscreen ; Clear the diag screen for the test
3291   1EA9             		
3292   1EA9 AF          		XRA A  		; Set PIO A port to 0, this sets CSx lines	
3293   1EAA D3 B1       		OUT PIOA	
3294   1EAC             	
3295   1EAC DB E8       		IN readkbd  ; Read the keyboard register
3296   1EAE             				
3297   1EAE FE FF       		CPI 0FFH
3298   1EB0 CA 0B 1F    		JZ kbdtest  ; If not 0 then real Keyboard is present	
3299   1EB3             					; else continue test using loopback
3300   1EB3             
3301   1EB3             ; **********************************************************
3302   1EB3             ; Test keyboard loopback
3303   1EB3             ;  Keyboard ports looped back run through the 256 possible 
3304   1EB3             ;  values check they are valid. 
3305   1EB3             ; **********************************************************
3306   1EB3             loopbacktest:
3307   1EB3 3E 80       		MVI A,080H      ; Set Cursor to top line
3308   1EB5 CD 66 24    		CALL putins
3309   1EB8             		
3310   1EB8 21 8B 25    		LXI H,loopbackstrdata ; Indicate this is a loopback test
3311   1EBB CD 71 24    		CALL putstr
3312   1EBE             	
3313   1EBE             ; ==========================================================
3314   1EBE             ; Test data lines to Keyboard driver KR0-KR7 to PA0-PA7
3315   1EBE             ; ==========================================================
3316   1EBE 21 5A 29    		LXI H,loopbacktstdata ; Reuse RAM byte test data table
3317   1EC1             		
3318   1EC1             tstloopback:
3319   1EC1 7E          		MOV A,M          ; H = Current RAM byte test data
3320   1EC2 FE FE       		CPI 0FEH         ; Check end of table
3321   1EC4 CA D3 1E    		JZ tstloopbackok       
3322   1EC7 D3 B1       		OUT PIOA	     ; Write to Keyboard loopback
3323   1EC9 DB E8       		IN readkbd       ; Read Keyboard register
3324   1ECB BE          		CMP M		     ; Compare locations
3325   1ECC C2 DC 1E    		JNZ tstloopbackfail ; Not equal location failed
3326   1ECF 23          		INX H            ; Get next RAM test byte
3327   1ED0 C3 C1 1E    		JMP tstloopback  
3328   1ED3             		
3329   1ED3             tstloopbackok:
3330   1ED3 21 06 25    		LXI H,passstr    ; Output PASS to diag LCD
3331   1ED6 CD 71 24    		CALL putstr      ; Indicate LCD Data bus pass
3332   1ED9 C3 05 1F    		JMP loopbacktestend
3333   1EDC             			
3334   1EDC             tstloopbackfail:
3335   1EDC F5          		PUSH PSW         ; Save the failing data
3336   1EDD E5          		PUSH H
3337   1EDE             		
3338   1EDE 21 0C 25    		LXI H,loopbackfail ; Output FAIL to diag LCD
3339   1EE1 CD 71 24    		CALL putstr
3340   1EE4             		
3341   1EE4 3E C0       		MVI A,0C0H      ; Set Cursor to next line
3342   1EE6 CD 66 24    		CALL putins
3343   1EE9             		
3344   1EE9 21 97 25    		LXI H,loopbackstrstat ; Output WR RD text to diag LCD
3345   1EEC CD 71 24    		CALL putstr		
3346   1EEF             
3347   1EEF 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
3348   1EF1 CD 66 24    		CALL putins
3349   1EF4             		
3350   1EF4             		; Print the data written
3351   1EF4 E1          		POP H         ; Retrieve the data written
3352   1EF5 7E          		MOV A,M        						
3353   1EF6 CD 91 24    		CALL prthex
3354   1EF9             
3355   1EF9 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
3356   1EFB CD 66 24    		CALL putins				
3357   1EFE             		
3358   1EFE             		; Print out Read value
3359   1EFE F1          		POP PSW        ; Retrieve the data read
3360   1EFF CD 91 24    		CALL prthex
3361   1F02 CD E4 24    		CALL diagscreenpause ;Delay to allow review
3362   1F05             
3363   1F05             loopbacktestend:		
3364   1F05 CD E4 24    		CALL diagscreenpause ;Delay to allow review
3365   1F08 C3 FE 20    		JMP castest
3366   1F0B             
3367   1F0B             ; **********************************************************
3368   1F0B             ; Test Keyboard
3369   1F0B             ;  Real keyboard present use this set of tests.
3370   1F0B             ; **********************************************************
3371   1F0B             ; Press key on keyboard
3372   1F0B             kbdtest:
3373   1F0B             		; CALL clrscreen
3374   1F0B             		
3375   1F0B 21 A8 25    		LXI H,kbdteststr
3376   1F0E CD 71 24    		CALL putstr
3377   1F11             		
3378   1F11 3E C0        		MVI A,0C0H     ; Set Cursor to back to start lower line
3379   1F13 CD 66 24    		CALL putins	
3380   1F16             
3381   1F16 21 B2 25    		LXI H,keypressedstr ; 0C6H
3382   1F19 CD 71 24    		CALL putstr
3383   1F1C             
3384   1F1C CD D3 23    		CALL rst75testlocationreset ; Reset the timeout
3385   1F1F             	
3386   1F1F 3E 1B       		MVI A,1BH      ; Prepare to re-enable RST 7.5 interrupt, Set bit 0
3387   1F21 30          		SIM            ; Re-enable RST 7.5 interrupt
3388   1F22 FB          		EI
3389   1F23             			
3390   1F23             kbdtestloop:		
3391   1F23 CD 78 1F    		CALL scankeyboard
3392   1F26             		
3393   1F26             		;Wait for 10s after last key press
3394   1F26 CD DB 23    		CALL rst75testlocationget
3395   1F29 FE 14       		CPI 20   ; See if 10s is up
3396   1F2B DA 31 1F    		JC kbdtestcont
3397   1F2E C3 37 1F    		JMP kbdtestdone
3398   1F31             
3399   1F31             kbdtestcont:		
3400   1F31 CD 4C 1F    		CALL ctrlbreak ; See if CTRL-BREAK pressed
3401   1F34 C2 23 1F    		JNZ kbdtestloop
3402   1F37             		
3403   1F37             kbdtestdone:
3404   1F37 F3          		DI
3405   1F38 3E 1F       		MVI A,1FH      ; Prepare to disable RST 7.5 interrupt, Set bit 0
3406   1F3A 30          		SIM            ; Disable RST 7.5 interrupt
3407   1F3B             				
3408   1F3B 3E C0        		MVI A,0C0H     ; Set Cursor to back to start lower line
3409   1F3D CD 66 24    		CALL putins	
3410   1F40 21 C9 25    		LXI H,kbdtestdonestr
3411   1F43 CD 71 24    		CALL putstr
3412   1F46             		
3413   1F46 CD E4 24    		CALL diagscreenpause ;Delay to allow review
3414   1F49             
3415   1F49 C3 FE 20    		JMP castest
3416   1F4C             			
3417   1F4C             ; ======================================================
3418   1F4C             ; Check for CTRL-BREAK
3419   1F4C             ;  Z flag set if CTRL-BREAK pressed
3420   1F4C             ; ======================================================
3421   1F4C             ctrlbreak:
3422   1F4C 3E E4       		MVI A,0E4H      ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=serial, Keyscan col 9 enable)
3423   1F4E D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3424   1F50 3E FF       		MVI A,0FFH      ; PIO A configuration (Used for Key scan, LCD data, etc.)
3425   1F52 D3 B1       		OUT PIOA	    ; B9H Initialize PIO chip port A
3426   1F54 DB E8       		IN readkbd      ; E8H  Scan Keyboard to test for CTRL-BREAK (cold boot indicator)
3427   1F56 2F          		CMA
3428   1F57 E6 82       		ANI 082H        ; Mask all but CTRL-BREAK keys
3429   1F59 FE 82       		CPI 082H
3430   1F5B F5          		PUSH PSW
3431   1F5C 3E E5       		MVI A,0E5H      ; Load code to disable key-scan col 9 (for CTRL-BREAK)
3432   1F5E D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3433   1F60 F1          		POP PSW
3434   1F61 C9          		RET
3435   1F62             
3436   1F62             ; ======================================================
3437   1F62             ; Check for SHIFT-BREAK
3438   1F62             ;  Z flag set if CTRL-BREAK pressed
3439   1F62             ; ======================================================
3440   1F62             shiftbreak:
3441   1F62 3E E4       		MVI A,0E4H      ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=serial, Keyscan col 9 enable)
3442   1F64 D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3443   1F66 3E FF       		MVI A,0FFH      ; PIO A configuration (Used for Key scan, LCD data, etc.)
3444   1F68 D3 B1       		OUT PIOA	    ; B9H Initialize PIO chip port A
3445   1F6A DB E8       		IN readkbd      ; E8H  Scan Keyboard to test for SHIFT-BREAK (cold boot indicator)
3446   1F6C 2F          		CMA
3447   1F6D E6 81       		ANI 081H        ; Mask all but SHIFT-BREAK keys
3448   1F6F FE 81       		CPI 081H
3449   1F71 F5          		PUSH PSW
3450   1F72 3E E5       		MVI A,0E5H      ; Load code to disable key-scan col 9 (for SHIFT-BREAK)
3451   1F74 D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3452   1F76 F1          		POP PSW
3453   1F77 C9          		RET
3454   1F78             		
3455   1F78             ; ======================================================
3456   1F78             ; Keyboard scanning management routine
3457   1F78             ; ======================================================
3458   1F78             scankeyboard: ;7055H
3459   1F78             		
3460   1F78             ; ======================================================
3461   1F78             ; Scan the Mod keys
3462   1F78             ; ======================================================	
3463   1F78 CD E9 20    		CALL scancol9  	  ; 72B1H Scan BREAK,CAPS,NUM,CODE,GRAPH,CTRL,SHIFT & set bits in A
3464   1F7B FE 00       		CPI 0
3465   1F7D             		
3466   1F7D C2 D5 1F    		JNZ modkeydecode  ; Print the key type 
3467   1F80             
3468   1F80             ; ======================================================
3469   1F80             ; Scan the regular keyboard
3470   1F80             ; ======================================================	
3471   1F80             ;Scan the keyboard for other keys
3472   1F80 AF          		XRA A          ; Clear A
3473   1F81 D3 B1       		OUT PIOA       ; B9H PORT A
3474   1F83 DB E8       		IN readkbd     ; E8H KBD Check any keys pressed ROWs
3475   1F85 3C          		INR A          ; A++ If FFH set to 0
3476   1F86 3E FF       		MVI A,0FFH     ; Reset A to FFH
3477   1F88 D3 B1       		OUT PIOA       ; B9H 
3478   1F8A C8          		RZ             ; Return no further keys pressed
3479   1F8B             		
3480   1F8B             ;Carry on with key check				
3481   1F8B 3E 7F       		MVI A,07FH      ; Keyboard mask   
3482   1F8D 0E 07       		MVI C,007H      ; Col Count
3483   1F8F             
3484   1F8F CD FC 23    		CALL getkeyboardstorage ; ROW, COL 
3485   1F92             
3486   1F92             keyscanloop:
3487   1F92 47          		MOV B,A	       ; Save A 7FH
3488   1F93 D3 B1       		OUT PIOA       ; B9H PORT A
3489   1F95 DB E8       		IN readkbd     ; E8H KBD
3490   1F97 2F          		CMA            ;     
3491   1F98 FE 00       		CPI 0          ; See if there is a Key in this column
3492   1F9A CA A7 1F    		JZ resetcolscan ;7092H      ; Key different to stored key
3493   1F9D 77          		MOV M,A        ; Save ROW 
3494   1F9E CD 91 24    		CALL prthex
3495   1FA1 23          		INX H
3496   1FA2 79          		MOV A,C
3497   1FA3 77          		MOV M,A        ; Save COLUMN
3498   1FA4              	
3499   1FA4 C3 B2 1F    		JMP keydecode
3500   1FA7             
3501   1FA7             ;Reset port and DEC count
3502   1FA7             resetcolscan:
3503   1FA7 3E FF       		MVI A,0FFH ; Restore port
3504   1FA9 D3 B1       		OUT PIOA  ; B9H PORT A
3505   1FAB 78          		MOV A,B   ; 
3506   1FAC 0F          		RRC       ; Shift mask to right
3507   1FAD 0D          		DCR C     ; Shift for 7 bits
3508   1FAE F2 92 1F    		JP keyscanloop ;
3509   1FB1 C9          		RET
3510   1FB2             
3511   1FB2             ; ======================================================
3512   1FB2             ; Decode the Normal Keys
3513   1FB2             ; ======================================================
3514   1FB2             keydecode:	
3515   1FB2 7E          		MOV A,M
3516   1FB3             
3517   1FB3 4F          		MOV C,A
3518   1FB4 0C          		INR C
3519   1FB5             
3520   1FB5 AF          		XRA A		
3521   1FB6 16 18       		MVI D,24   ; Char count per row
3522   1FB8             mult24:
3523   1FB8 0D          		DCR C
3524   1FB9 CA C0 1F    		JZ rowdone
3525   1FBC 82          		ADD D
3526   1FBD C3 B8 1F    		JMP mult24
3527   1FC0             rowdone: 
3528   1FC0             		; A=C*24
3529   1FC0 57          		MOV D,A  ; Save A in D
3530   1FC1             
3531   1FC1 2B          		DCX H    ; Get ROW
3532   1FC2 7E          		MOV A,M 
3533   1FC3 CD 03 20    		CALL rowdecode
3534   1FC6 0D          		DCR C
3535   1FC7 CD 0C 20    		CALL mult3  ; COL * 3
3536   1FCA             		
3537   1FCA 82          		ADD D ; A points to string
3538   1FCB              
3539   1FCB 4F          		MOV C,A
3540   1FCC 06 00       		MVI B,00H
3541   1FCE 21 29 20    		LXI H,kbdchars
3542   1FD1 09          		DAD B
3543   1FD2 C3 E7 1F    		JMP printchars
3544   1FD5             		
3545   1FD5             ; ======================================================
3546   1FD5             ; Decode the Mod Keys
3547   1FD5             ; ======================================================
3548   1FD5             modkeydecode:
3549   1FD5 CD 03 20    		CALL rowdecode
3550   1FD8 C8          		RZ                ;If 0 then false alarm
3551   1FD9             		
3552   1FD9 CD 91 24    		CALL prthex
3553   1FDC             		
3554   1FDC 0D          		DCR C
3555   1FDD CD 0C 20    		CALL mult3  ; COL * 3
3556   1FE0             	 
3557   1FE0             modfound:
3558   1FE0 21 10 20    		LXI H,modkeystr
3559   1FE3 06 00       		MVI B,00H
3560   1FE5 4F          		MOV C,A
3561   1FE6 09          		DAD B
3562   1FE7             
3563   1FE7             ; Print out the 				
3564   1FE7             printchars:
3565   1FE7             		
3566   1FE7 3E 20       		MVI A,' '
3567   1FE9 CD 5B 24    		CALL putch
3568   1FEC             
3569   1FEC 7E          		MOV A,M
3570   1FED CD 5B 24    		CALL putch
3571   1FF0 23          		INX H 
3572   1FF1 7E          		MOV A,M
3573   1FF2 CD 5B 24    		CALL putch
3574   1FF5 23          		INX H 
3575   1FF6 7E          		MOV A,M
3576   1FF7 CD 5B 24    		CALL putch
3577   1FFA CD D3 23    		CALL rst75testlocationreset ; Reset the timeout
3578   1FFD             		
3579   1FFD 3E C5       		MVI A,0C5H ;0C5H     ; Set Cursor to start of line for new key
3580   1FFF CD 66 24    		CALL putins
3581   2002             		
3582   2002 C9          		RET
3583   2003             
3584   2003             ; ======================================================		
3585   2003             ; Determine the row number
3586   2003             ; 	A = Raw ROW data
3587   2003             ; 	C = ROW number
3588   2003             ; ======================================================		
3589   2003             rowdecode:
3590   2003 0E 08       		MVI C,08H
3591   2005              
3592   2005             modkeydecodeloop:
3593   2005 07          		RLC
3594   2006 D8          		RC 
3595   2007 0D          		DCR C
3596   2008 C2 05 20    		JNZ modkeydecodeloop
3597   200B C9          		RET
3598   200C             
3599   200C             ; ======================================================		
3600   200C             ; Mult3
3601   200C             ;	A = 3*A
3602   200C             ; ======================================================		
3603   200C             mult3:
3604   200C 79          		MOV A,C
3605   200D 81          		ADD C ; 2A
3606   200E 81          		ADD C ; 3A
3607   200F C9          		RET
3608   2010             ; ======================================================		
3609   2010             ; Key string data
3610   2010             ; ======================================================		
3611   2010             			
3612   2010             modkeystr:
3613   2010 53 48 20 43 		.text "SH CTLGRHCODNUMCAPXXXBRK"
3613   2014 54 4C 47 52 
3613   2018 48 43 4F 44 
3613   201C 4E 55 4D 43 
3613   2020 41 50 58 58 
3613   2024 58 42 52 4B 
3614   2028             ;              012345678901234567890123
3615   2028 00          		.db 0	
3616   2029             			
3617   2029             kbdchars:  ;7BF1H
3618   2029             ;              COL
3619   2029             ;              012345678901234567890123  ROWs
3620   2029 20 5A 20 20 		.text " Z  X  C  V  B  N  M  L "   0  - 0
3620   202D 58 20 20 43 
3620   2031 20 20 56 20 
3620   2035 20 42 20 20 
3620   2039 4E 20 20 4D 
3620   203D 20 20 4C 20 
3621   2041 20 41 20 20 		.text " A  S  D  F  G  H  J  K "   1  - 24
3621   2045 53 20 20 44 
3621   2049 20 20 46 20 
3621   204D 20 47 20 20 
3621   2051 48 20 20 4A 
3621   2055 20 20 4B 20 
3622   2059 20 51 20 20 		.text " Q  W  E  R  T  Y  U  I "   2  - 48
3622   205D 57 20 20 45 
3622   2061 20 20 52 20 
3622   2065 20 54 20 20 
3622   2069 59 20 20 55 
3622   206D 20 20 49 20 
3623   2071 20 4F 20 20 		.text " O  P  [  ;  '  ,  .  / "   3  - 72
3623   2075 50 20 20 5B 
3623   2079 20 20 3B 20 
3623   207D 20 27 20 20 
3623   2081 2C 20 20 2E 
3623   2085 20 20 2F 20 
3624   2089 20 31 20 20 		.text " 1  2  3  4  5  6  7  8 "   4  - 96
3624   208D 32 20 20 33 
3624   2091 20 20 34 20 
3624   2095 20 35 20 20 
3624   2099 36 20 20 37 
3624   209D 20 20 38 20 
3625   20A1 20 39 20 20 		.text " 9  0  -  = LFTRHTUP DWN"   5  - 120
3625   20A5 30 20 20 2D 
3625   20A9 20 20 3D 20 
3625   20AD 4C 46 54 52 
3625   20B1 48 54 55 50 
3625   20B5 20 44 57 4E 
3626   20B9 53 50 43 44 		.text "SPCDELTABESCPASLABPRICR "   6  - 144
3626   20BD 45 4C 54 41 
3626   20C1 42 45 53 43 
3626   20C5 50 41 53 4C 
3626   20C9 41 42 50 52 
3626   20CD 49 43 52 20 
3627   20D1 46 31 20 46 		.text "F1 F2 F3 F4 F5 F6 F7 F8 "   7  - 168 192
3627   20D5 32 20 46 33 
3627   20D9 20 46 34 20 
3627   20DD 46 35 20 46 
3627   20E1 36 20 46 37 
3627   20E5 20 46 38 20 
3628   20E9             			
3629   20E9             ; ======================================================
3630   20E9             ; Scan BREAK,CAPS,NUM,CODE,GRAPH,CTRL,SHIFT & set bits in A
3631   20E9             ; ======================================================
3632   20E9             scancol9: ;72B1H
3633   20E9 3E FF       		MVI A,0FFH
3634   20EB D3 B1       		OUT PIOA	;B9H PIO A
3635   20ED DB B2       		IN PIOB	    ;BAH PIO B
3636   20EF E6 FE       		ANI 0FEH
3637   20F1 47          		MOV B,A
3638   20F2 D3 B2       		OUT PIOB   ;BAH
3639   20F4 DB E8       		IN readkbd ;E8H
3640   20F6 F5          		PUSH PSW
3641   20F7 78          		MOV A,B
3642   20F8 3C          		INR A
3643   20F9 D3 B2       		OUT PIOB 	;BAH
3644   20FB F1          		POP PSW
3645   20FC 2F          		CMA
3646   20FD C9          		RET
3647   20FE             
3648   20FE             ; ##########################################################
3649   20FE             ; ##########################################################
3650   20FE             ; **********************************************************
3651   20FE             ; Test the cassette port
3652   20FE             ; Check remote clicks the relay
3653   20FE             ; Read in data from the port using Audacity, check header 
3654   20FE             ; Write out data to audacity check  
3655   20FE             ; **********************************************************
3656   20FE             castest:
3657   20FE CD C3 24    		CALL clrscreen  ; Reset the screen for the new test
3658   2101             		
3659   2101 21 55 27    		LXI H,castestoffstr ; 11 chars
3660   2104 CD 71 24    		CALL putstr		
3661   2107             
3662   2107 CD B9 23    		CALL stromlocation
3663   210A 7E          		MOV A,M
3664   210B             		
3665   210B             ;OFF 
3666   210B E6 F1       		ANI 0F1H
3667   210D F6 08       		ORI 08H
3668   210F D3 E8       		OUT CtrlReg 	; E8H	
3669   2111 F5          		PUSH PSW
3670   2112             
3671   2112 3E 80        		MVI A,080H      ; Set Cursor to top line
3672   2114 CD 66 24    		CALL putins	
3673   2117             
3674   2117 CD F0 24    		CALL longdelay  
3675   211A             
3676   211A DB 81       		IN setreg
3677   211C E6 80       		ANI 080H
3678   211E C2 56 21    		JNZ remtestfail
3679   2121             
3680   2121             ;ON		
3681   2121 21 66 27    		LXI H,castestonstr ; 11 chars
3682   2124 CD 71 24    		CALL putstr	
3683   2127 F1          		POP PSW
3684   2128 F5          		PUSH PSW		
3685   2129 E6 F1       		ANI 0F1H
3686   212B D3 E8       		OUT CtrlReg 	; E8H
3687   212D             
3688   212D 3E 80        		MVI A,080H      ; Set Cursor to top line
3689   212F CD 66 24    		CALL putins
3690   2132             
3691   2132 CD F0 24    		CALL longdelay  ; Let the clock tick
3692   2135             		
3693   2135 DB 81       		IN setreg
3694   2137 E6 80       		ANI 080H
3695   2139 CA 56 21    		JZ remtestfail
3696   213C             
3697   213C             ;OFF 
3698   213C 21 55 27    		LXI H,castestoffstr ; 11 chars
3699   213F CD 71 24    		CALL putstr	
3700   2142             		
3701   2142 F1          		POP PSW
3702   2143 E6 F1       		ANI 0F1H
3703   2145 F6 08       		ORI 08H
3704   2147 D3 E8       		OUT CtrlReg ; E8H	
3705   2149             	
3706   2149 CD F0 24    		CALL longdelay
3707   214C             
3708   214C DB 81       		IN setreg
3709   214E E6 80       		ANI 080H
3710   2150 C2 56 21    		JNZ remtestfail
3711   2153 C3 5C 21    		JMP remtestpass
3712   2156             
3713   2156             remtestfail:
3714   2156 21 EF 26    		LXI H,castestfailstr
3715   2159 C3 5F 21    		JMP remtestdone
3716   215C             
3717   215C             remtestpass:
3718   215C 21 00 27    		LXI H,castestpassstr
3719   215F             
3720   215F             remtestdone:		
3721   215F 3E 80       		MVI A,080H      ; Set Cursor to top line
3722   2161 CD 66 24    		CALL putins
3723   2164             		
3724   2164 CD 71 24    		CALL putstr	
3725   2167             
3726   2167 CD E4 24    		CALL diagscreenpause        ; Delay to allow review	
3727   216A CD D3 23    		CALL rst75testlocationreset ; Reset the timeout
3728   216D             
3729   216D             ; ***************** Outputting
3730   216D             ;Play out header use Grey Lead
3731   216D             		
3732   216D 3E C0       		MVI A,0C0H      ; Set Cursor to bottom line
3733   216F CD 66 24    		CALL putins
3734   2172 21 89 27    		LXI H,castestrecstr
3735   2175 CD 71 24    		CALL putstr
3736   2178             		
3737   2178 3E 1B       		MVI A,1BH      ; Prepare to re-enable RST 7.5 interrupt, Set bit 0
3738   217A 30          		SIM            ; Re-enable RST 7.5 interrupt
3739   217B FB          		EI		
3740   217C             				
3741   217C             caswaitrec:		
3742   217C CD 62 1F    		CALL shiftbreak       ; See if the cassette tests should be skipped
3743   217F CA B0 21    		JZ castestplayoption
3744   2182             
3745   2182             		;Wait for 10s for option to play
3746   2182 CD DB 23    		CALL rst75testlocationget
3747   2185 FE 1E       		CPI 30   ; See if 10s is up
3748   2187 DA 98 21    		JC caswaitcont
3749   218A             
3750   218A 21 44 27    		LXI H,castestaudiodonestr
3751   218D 3E C0       		MVI A,0C0H        ; Set Cursor to bottom line
3752   218F CD 66 24    		CALL putins
3753   2192 CD 71 24    		CALL putstr
3754   2195 C3 04 23    		JMP prtdone       ; If timeout then skip cassette tests
3755   2198             		
3756   2198             caswaitcont:
3757   2198 CD 4C 1F    		CALL ctrlbreak	
3758   219B C2 7C 21    		JNZ caswaitrec
3759   219E             		
3760   219E F3          		DI             ; Disable interrupts to write out the header 
3761   219F 3E 1F       		MVI A,1FH      ; Prepare to disable RST 7.5 interrupt, Set bit 0
3762   21A1 30          		SIM  
3763   21A2             	
3764   21A2 3E C0       		MVI A,0C0H      ; Set Cursor to bottomline
3765   21A4 CD 66 24    		CALL putins
3766   21A7 21 AC 27    		LXI H,castestrecstartedstr
3767   21AA CD 71 24    		CALL putstr
3768   21AD             
3769   21AD CD 0B 22    		CALL caswriteheader 
3770   21B0             
3771   21B0             ; ***************** Listening	
3772   21B0             castestplayoption:
3773   21B0 CD F0 24            CALL longdelay
3774   21B3             	
3775   21B3             waitforkeyrelease: 
3776   21B3 CD 78 1F    		CALL scankeyboard
3777   21B6 C2 B3 21    		JNZ waitforkeyrelease
3778   21B9             	
3779   21B9             ;Play in cassette search for header 
3780   21B9 3E C0       		MVI A,0C0H      ; Set Cursor to bottomline
3781   21BB CD 66 24    		CALL putins
3782   21BE 21 77 27    		LXI H,castestplaystr
3783   21C1 CD 71 24    		CALL putstr		
3784   21C4             
3785   21C4             
3786   21C4             caswaitplay:
3787   21C4 CD 62 1F    		CALL shiftbreak
3788   21C7 CA 04 23    		JZ prtdone		
3789   21CA CD 4C 1F    		CALL ctrlbreak
3790   21CD C2 C4 21    		JNZ caswaitplay
3791   21D0             
3792   21D0 3E C0       		MVI A,0C0H      ; Set Cursor to bottomline
3793   21D2 CD 66 24    		CALL putins
3794   21D5 21 9B 27    		LXI H,castestplaystartedstr
3795   21D8 CD 71 24    		CALL putstr
3796   21DB             			
3797   21DB CD 48 22    		CALL casreadhdrsync
3798   21DE             		
3799   21DE F5          		PUSH PSW
3800   21DF FE 7F       		CPI 07FH
3801   21E1 C2 EA 21    		JNZ castestfail
3802   21E4             			
3803   21E4 21 22 27    		LXI H,castestaudiosyncstr
3804   21E7 C3 ED 21    		JMP castestdone
3805   21EA             
3806   21EA             castestfail:		
3807   21EA 21 33 27    		LXI H,castestaudiosyncfailstr
3808   21ED             
3809   21ED             castestdone:
3810   21ED F3          		DI
3811   21EE 3E 1F       		MVI A,1FH      ; Prepare to disable RST 7.5 interrupt, Set bit 0
3812   21F0 30          		SIM  
3813   21F1             				
3814   21F1 3E C0       		MVI A,0C0H      ; Set Cursor to bottom line
3815   21F3 CD 66 24    		CALL putins
3816   21F6             
3817   21F6 CD 71 24    		CALL putstr
3818   21F9             		
3819   21F9 3E CB       		MVI A,0CBH      ; Set Cursor to mid bottom line
3820   21FB CD 66 24    		CALL putins
3821   21FE F1          		POP PSW
3822   21FF CD 91 24    		CALL prthex
3823   2202             
3824   2202 CD E4 24    		CALL diagscreenpause ;Delay to allow review
3825   2205 CD E4 24    		CALL diagscreenpause ;Delay to allow review
3826   2208 C3 04 23    		JMP prtdone
3827   220B             		
3828   220B             ; ==========================================================
3829   220B             ; Write Header
3830   220B             ; ==========================================================	
3831   220B             ; ==========================================================
3832   220B             ; Write cassette header and sync byte
3833   220B             ; ==========================================================
3834   220B             caswriteheader: ;6F46H
3835   220B 01 00 02    		LXI B,0200H
3836   220E             caswriteloop:   ;6F49H
3837   220E 3E 55       		MVI A,55H
3838   2210 C5          		PUSH B
3839   2211 CD 23 22    		CALL casswrite   ;6F5EH
3840   2214 C1          		POP B
3841   2215 0B          		DCX B
3842   2216 78          		MOV A,B
3843   2217 B1          		ORA C
3844   2218 C2 0E 22    		JNZ caswriteloop ;6F49H
3845   221B 3E 7F       		MVI A,7FH
3846   221D C3 23 22    		JMP casswrite    ;6F5EH
3847   2220             		
3848   2220             ; ======================================================
3849   2220             ; Write char in A to cassette w/o checksum
3850   2220             ; ======================================================
3851   2220 CD 34 22    		CALL caswritebit81 ;6F71H
3852   2223             casswrite: ;6F5EH
3853   2223 06 08       		MVI B,08H
3854   2225             caswriteloop1: ;6F60H
3855   2225 CD 2D 22    		CALL caswritebit8 ;6F6AH Write bit 8 of A to cassette
3856   2228 05          		DCR B
3857   2229 C2 25 22    		JNZ caswriteloop1  ;6F60H
3858   222C C9          		RET
3859   222D             
3860   222D             ; ======================================================
3861   222D             ; Write bit 8 of A to cassette
3862   222D             ; ======================================================
3863   222D             caswritebit8: ;6F6AH
3864   222D 07          		RLC
3865   222E 11 24 1F    		LXI D,1F24H        ;Cassette frequency cycle count for 1 bit
3866   2231 DA 37 22    		JC caswritebitbit0  ;6F74H
3867   2234             caswritebit81: ;6F71H
3868   2234 11 49 43    		LXI D,4349H        ; Cassette frequency cycle count for 0 bit
3869   2237             caswritebitbit0: ;6F74H
3870   2237 15          		DCR D              ; 
3871   2238 C2 37 22    		JNZ caswritebitbit0 ;6F74H Wait Low
3872   223B 57          		MOV D,A        
3873   223C 3E D0       		MVI A,0D0H
3874   223E 30          		SIM                 ; Write 1
3875   223F             caswritebitbit1: ;6F7CH
3876   223F 1D          		DCR E
3877   2240 C2 3F 22    		JNZ caswritebitbit1 ;6F7CH Wait High
3878   2243 3E 50       		MVI A,50H
3879   2245 30          		SIM                ; Write 0
3880   2246 7A          		MOV A,D
3881   2247 C9          		RET
3882   2248             
3883   2248             ; ==========================================================
3884   2248             ; Read Header
3885   2248             ; ==========================================================	
3886   2248             ; ======================================================
3887   2248             ; Read cassette header and sync byte
3888   2248             ; ======================================================
3889   2248             casreadhdrsync: ;6F85H
3890   2248 06 80       		MVI B,80H        ; Load 128
3891   224A             casreadhdrsync1: ;6F87H
3892   224A CD A3 22    		CALL casreadportbit ;6FDBH Read Cassette port data bit
3893   224D D8          		RC
3894   224E 79          		MOV A,C
3895   224F FE 08       		CPI 08H
3896   2251 DA 48 22    		JC casreadhdrsync   ;6F85H Read cassette header and sync byte
3897   2254 FE 40       		CPI 40H
3898   2256 D2 48 22    		JNC casreadhdrsync  ;6F85H Read cassette header and sync byte
3899   2259 05          		DCR B
3900   225A C2 4A 22    		JNZ casreadhdrsync1 ;6F87H
3901   225D             caschecksb: ;6F9AH
3902   225D             ;***		CALL 729FH     ; Check if SHIFT-BREAK is being pressed
3903   225D             ;		RC
3904   225D 3E 2B        MVI A,'+'
3905   225F 32 01 00     STA lcddata
3906   2262 CD 4C 1F    		CALL ctrlbreak
3907   2265 C8          		RZ
3908   2266 21 00 00    		LXI H,0000H
3909   2269 06 40       		MVI B,40H
3910   226B             casreadhdrsync2: ;6FA3H
3911   226B CD D7 22    		CALL casgetnextbit ;7016H Get tape bit
3912   226E D8          		RC
3913   226F 51          		MOV D,C
3914   2270 CD D7 22    		CALL casgetnextbit ;7016H Get tape bit
3915   2273             casreadhdrsync2a: ;6FABH
3916   2273 D8          		RC
3917   2274 7A          		MOV A,D
3918   2275 91          		SUB C
3919   2276 D2 7B 22    		JNC casreadhdrsync3 ;6FB3H
3920   2279 2F          		CMA
3921   227A 3C          		INR A
3922   227B             casreadhdrsync3: ;6FB3H
3923   227B FE 0B       		CPI 0BH
3924   227D DA 82 22    		JC casreadhdrsync5a - 1 ;6FBAH
3925   2280 24          		INR H
3926   2281 3E 2C       		MVI A,2CH
3927   2283             casreadhdrsync5a:
3928   2283 05          		DCR B
3929   2284 C2 6B 22    		JNZ casreadhdrsync2 ;6FA3H
3930   2287 3E 40       		MVI A,40H
3931   2289 BD          		CMP L
3932   228A CA 91 22    		JZ casreadhdrsync4  ;6FC9H
3933   228D 94          		SUB H
3934   228E C2 5D 22    		JNZ caschecksb      ;6F9AH
3935   2291             casreadhdrsync4: ;6FC9H
3936   2291             ;6FC9H  (32H) STA FF8EH   
3937   2291 CD 17 24    		CALL putcasstorage   ;Cassette port pulse control
3938   2294             	
3939   2294 16 00       		MVI D,00H
3940   2296             casreadhdrsync5: ;6FCEH
3941   2296 CD A3 22    		CALL casreadportbit ;6FDBH Read Cassette port data bit
3942   2299 D8          		RC
3943   229A CD E4 22    		CALL countandpackbits ;7023H Count and pack cassette input bits
3944   229D FE 7F       		CPI 7FH
3945   229F C2 96 22    		JNZ casreadhdrsync5   ;6FCEH
3946   22A2 C9          		RET                   ;Return when syncâd
3947   22A3             		
3948   22A3             ; ======================================================
3949   22A3             ; Read Cassette port data bit
3950   22A3             ; ======================================================
3951   22A3             ;Called here
3952   22A3             casreadportbit: ;6FDBH
3953   22A3 0E 00       		MVI C,00H
3954   22A5             ;6FDDH  (3AH) LDA FF8EH    
3955   22A5 CD 09 24    		CALL getcasstorage   ;Cassette port pulse control
3956   22A8 A7          		ANA A
3957   22A9 CA C2 22    		JZ caswaitzerobit ;6FFAH Go heck for 1 0 1 transition
3958   22AC             casreadport: ;6FE4H
3959   22AC             ;***		CALL 729FH      ; Check if SHIFT-BREAK is being pressed
3960   22AC             ;		RC
3961   22AC CD 4C 1F    		CALL ctrlbreak
3962   22AF C8          		RZ
3963   22B0 20          		RIM
3964   22B1 07          		RLC             ; Move MSB to carry to check SID
3965   22B2 D2 AC 22    		JNC casreadport ;6FE4H If 0 wait to 1
3966   22B5             
3967   22B5             casreadport1: ;6FEDH
3968   22B5             ;Called here
3969   22B5 0C          		INR C          ; C++
3970   22B6             casreadport2: ;6FEEH
3971   22B6 0C          		INR C          ; C++
3972   22B7 CA AC 22    		JZ casreadport ;6FE4H If C=0 try again
3973   22BA 20          		RIM            ; Check SID
3974   22BB 07          		RLC            ; MSB to carry
3975   22BC DA B6 22    		JC casreadport2 ;6FEEH If 1 wait to 0
3976   22BF C3 D5 22    		JMP caswaitnextbit1 ;700DH Once 0 play sound and exit
3977   22C2             
3978   22C2             caswaitzerobit: ; 6FFAH
3979   22C2             ;***		CALL 729FH     ; Check if SHIFT-BREAK is being pressed
3980   22C2             ;		RC
3981   22C2 CD 4C 1F    		CALL ctrlbreak
3982   22C5 C8          		RZ
3983   22C6 20          		RIM	    ; Read SID
3984   22C7 07          		RLC	    ; MSB to carry
3985   22C8 DA C2 22    		JC caswaitzerobit ;6FFAH If 1 wait to 0
3986   22CB             		
3987   22CB             ; Called here
3988   22CB             caswaitnextbit: ;7003H
3989   22CB 0C          		INR C          ; C++ Get the timing on the bit
3990   22CC             caswaitzerobit1: ;7004H
3991   22CC 0C          		INR C          ; C++
3992   22CD CA C2 22    		JZ caswaitzerobit ;6FFAH C=0 wait again not a bit
3993   22D0 20          		RIM            ; Check SID
3994   22D1 07          		RLC	        ; MSB to carry
3995   22D2 D2 CC 22    		JNC caswaitzerobit1 ;7004H      ; If 0 wait to 1
3996   22D5             
3997   22D5             ; Return here
3998   22D5             caswaitnextbit1: ;700DH
3999   22D5             ;700DH  (3AH) LDA FF44H      ; Sound flag
4000   22D5             ;7010H  (A7H) ANA A          ; 
4001   22D5             ;7011H  (CCH) CZ 7676H       ; Click sound port
4002   22D5 AF          		XRA A          ; Clear A
4003   22D6 C9          		RET            ; Return C = bit width
4004   22D7             
4005   22D7             casgetnextbit: ;7016H
4006   22D7 CD CB 22    		CALL caswaitnextbit ;7003H Ignore the next bit wait for 0 1 0 transition
4007   22DA D8          		RC                 ; 
4008   22DB 0E 00       		MVI C,00H          ; C = 0
4009   22DD CD B5 22    		CALL casreadport1   ;6FEDH Wait for bit next bit
4010   22E0 D8          		RC                 ; Check for ctr-break  
4011   22E1 C3 CB 22    		JMP caswaitnextbit ;7003H      ; Get the bit time 
4012   22E4             
4013   22E4             ; ======================================================
4014   22E4             ; Count and pack cassette input bits
4015   22E4             ; ======================================================
4016   22E4             countandpackbits: ;7023H
4017   22E4 79          		MOV A,C
4018   22E5 FE 15       		CPI 15H
4019   22E7 7A          		MOV A,D
4020   22E8 17          		RAL
4021   22E9 57          		MOV D,A
4022   22EA C9          		RET
4023   22EB             		
4024   22EB             ; ======================================================
4025   22EB             ; Read character from cassette w/o checksum
4026   22EB             ; ======================================================
4027   22EB             cascharread: ;702AH
4028   22EB CD A3 22    		CALL casreadportbit      ;6FDBH Read Cassette port data bit
4029   22EE D8          		RC
4030   22EF 79          		MOV A,C
4031   22F0 FE 15       		CPI 15H
4032   22F2 DA EB 22    		JC cascharread        ;702AH Read character from cassette w/o checksum
4033   22F5 06 08       		MVI B,08H
4034   22F7             cascharread1: ;7036H
4035   22F7 CD A3 22    		CALL casreadportbit      ;6FDBH Read Cassette port data bit
4036   22FA D8          		RC
4037   22FB CD E4 22    		CALL countandpackbits ;7023H     ; Count and pack cassette input bits
4038   22FE 05          		DCR B
4039   22FF C2 F7 22    		JNZ cascharread1      ;7036H
4040   2302 AF          		XRA A
4041   2303 C9          		RET
4042   2304             		
4043   2304             ; ##########################################################
4044   2304             ; ##########################################################		
4045   2304             ; **********************************************************
4046   2304             ; Used at the end of the tests and to test power off.
4047   2304             ; prtdone uses RAM so cannot be used until RAM is tested.
4048   2304             ; Prints out the DONE! message
4049   2304             ; The board will power down to test the power
4050   2304             ; down feature is operational.
4051   2304             ; **********************************************************
4052   2304             prtdone:
4053   2304 C3 00 10    		JMP start
4054   2307 F3          		DI
4055   2308 CD 66 23    		CALL buzzer
4056   230B CD C3 24    		CALL clrscreen  ; Reset the screen for the new test
4057   230E             		
4058   230E 21 29 28    		LXI H,testcompletestr ; 11 chars
4059   2311 CD 71 24    		CALL putstr		
4060   2314             
4061   2314 3E C0       		MVI A,0C0H      ; Set Cursor to back for new count
4062   2316 CD 66 24    		CALL putins
4063   2319             
4064   2319 21 3A 28    		LXI H,versioninfostr
4065   231C CD 71 24    		CALL putstr
4066   231F             
4067   231F 06 0A        		MVI B,10
4068   2321             prtwait:
4069   2321 CD F0 24    		CALL longdelay  ; Countdown power off	
4070   2324 05          		DCR B		
4071   2325 C2 21 23    		JNZ prtwait		
4072   2328             
4073   2328 CD 66 23    		CALL buzzer
4074   232B             		
4075   232B 3E 80        		MVI A,80H       ; Set Cursor to top line
4076   232D CD 66 24    		CALL putins
4077   2330             
4078   2330 21 18 28    		LXI H,goodbye
4079   2333 CD 71 24    		CALL putstr
4080   2336             		
4081   2336 CD F0 24    		CALL longdelay  ; Let the user see the text
4082   2339             	
4083   2339 3E FF       		MVI A,0FFH
4084   233B D3 B2       		OUT PIOB ; Should power down the board after 120s
4085   233D C3 63 23    		JMP haltwait	
4086   2340             
4087   2340             ; ##########################################################
4088   2340             ; ##########################################################				
4089   2340             ; **********************************************************
4090   2340             ; Halt the CPU testing done or failure
4091   2340             ; Routine does not rely on RAM so can be used at any point
4092   2340             ; **********************************************************
4093   2340             cpuhlt:
4094   2340 21 01 00    		LXI H,lcddata  ; Load LCD Data location
4095   2343 36 48       		MVI M,'H'      ; Load H to screen
4096   2345             		
4097   2345             		; Wait 40us		
4098   2345 0E 0A       		MVI C,10      ; Counter 10 	
4099   2347             delayH0:
4100   2347 0D          		DCR C          ; Decrement C: 4
4101   2348 C2 47 23    		JNZ delayH0    ; Loop until C = 0: 7 = 11 = 4.45us	
4102   234B             		
4103   234B 36 4C       		MVI M,'L'      ; Load L to screen
4104   234D             		
4105   234D             		; Wait 40us		
4106   234D 0E 0A       		MVI C,10      ; Counter 10 	
4107   234F             delayH1:
4108   234F 0D          		DCR C          ; Decrement C: 4
4109   2350 C2 4F 23    		JNZ delayH1    ; Loop until C = 0: 7 = 11 = 4.45us	
4110   2353             
4111   2353 36 54       		MVI M,'T'      ; Load T to screen
4112   2355             		
4113   2355             		; Wait 40us		
4114   2355 0E 0A       		MVI C,10      ; Counter 10 	
4115   2357             delayH2:
4116   2357 0D          		DCR C          ; Decrement C: 4
4117   2358 C2 57 23    		JNZ delayH2    ; Loop until C = 0: 7 = 11 = 4.45us			
4118   235B             
4119   235B 36 21       		MVI M,'!'      ; Load ! to screen
4120   235D             		
4121   235D             		; Wait 40us		
4122   235D 0E 0A       		MVI C,10      ; Counter 10 	
4123   235F             delayH3:
4124   235F 0D          		DCR C          ; Decrement C: 4
4125   2360 C2 5F 23    		JNZ delayH3   ; Loop until C = 0: 7 = 11 = 4.45us
4126   2363             		
4127   2363             haltwait:	
4128   2363 C3 63 23    		JMP haltwait	
4129   2366             
4130   2366             ; **********************************************************
4131   2366             ;
4132   2366             ; Utility routines to provide generic functions to main test
4133   2366             ; Routines
4134   2366             ;
4135   2366             ; **********************************************************
4136   2366             ; ======================================================
4137   2366             ; Sound Buzzer
4138   2366             ; ======================================================
4139   2366             buzzer:
4140   2366 06 00       		MVI B,00H           ; Execute loop 255 times
4141   2368             buzzerwait:
4142   2368 CD 75 23    		CALL clicksound     ; Click sound port
4143   236B 0E 50       		MVI C,50H
4144   236D CD B8 24    		CALL shortdelay     ; Delay routine - decrement C until zero
4145   2370 05          		DCR B
4146   2371 C2 68 23    		JNZ buzzerwait
4147   2374 C9          		RET
4148   2375             
4149   2375             ; ======================================================
4150   2375             ; Click sound port
4151   2375             ; ======================================================
4152   2375             clicksound:
4153   2375 DB B2       		IN  PIOB	; 0BAH Load current value of I/O port BAH
4154   2377 EE 20       		XRI 020H    ; Toggle the speaker I/O bit
4155   2379 D3 B2       		OUT PIOB    ; 0BAH Write new value to speaker to cause a "click"
4156   237B C9          		RET
4157   237C             		
4158   237C             ; ======================================================
4159   237C             ; Trap routine power down the board when power off
4160   237C             ; ======================================================
4161   237C             trap:
4162   237C DB BA       		IN  0BAH        ; Get Current I/O value of BAH
4163   237E F6 10       		ORI 010H        ; Set the PowerDown bit
4164   2380 D3 BA       		OUT 0BAH        ; PowerDown.  We will loose power here
4165   2382 76          		HLT		
4166   2383             		
4167   2383             ; **********************************************************
4168   2383             ; Address calculation routines to deal with unknown RAM Locations
4169   2383             ; **********************************************************
4170   2383             countdownmem  .equ 14
4171   2383             strommem      .equ countdownmem + 4
4172   2383             rst75testmem  .equ strommem + 4
4173   2383             rxbuffermem   .equ rst75testmem + 4
4174   2383             rst55testmem  .equ rxbuffermem + 4
4175   2383             keyboardmem   .equ rst55testmem + 4
4176   2383             casstoragemem .equ 12 ; Stored at a different location
4177   2383             
4178   2383             ; ======================================================
4179   2383             ; Get Start of RAM block, using current SP, into DE
4180   2383             ; ======================================================
4181   2383             ramsblockstart:
4182   2383 E5          		PUSH H
4183   2384 F5          		PUSH PSW
4184   2385 21 00 00    		LXI H,0
4185   2388 39          		DAD SP
4186   2389 7C          		MOV A,H
4187   238A E6 E0       		ANI 0E0H	; Remove the 1000H Addition to SP
4188   238C 67          		MOV H,A
4189   238D 2E 00       		MVI L,0
4190   238F EB          		XCHG
4191   2390 F1          		POP PSW
4192   2391 E1          		POP H
4193   2392 C9          		RET
4194   2393             
4195   2393             ; ======================================================
4196   2393             ; Get Start of SP + 1, into DE
4197   2393             ; Relies on Stack not getting too large and on a 00H boundary
4198   2393             ; ======================================================
4199   2393             stackstart:
4200   2393 E5          		PUSH H
4201   2394 F5          		PUSH PSW
4202   2395 21 00 00    		LXI H,0
4203   2398 39          		DAD SP
4204   2399 7C          		MOV A,H
4205   239A E6 E0       		ANI 0E0H
4206   239C F6 10       		ORI 010H
4207   239E 67          		MOV H,A
4208   239F 2E 02       		MVI L,2
4209   23A1 EB          		XCHG
4210   23A2 F1          		POP PSW
4211   23A3 E1          		POP H
4212   23A4 C9          		RET
4213   23A5             
4214   23A5             ; ======================================================
4215   23A5             ; Get Clock Storage into HL, SP + 2
4216   23A5             ; ======================================================
4217   23A5             clocklocation:
4218   23A5 D5          		PUSH D
4219   23A6 CD 93 23    		CALL stackstart
4220   23A9 EB          		XCHG
4221   23AA D1          		POP D	
4222   23AB C9          		RET
4223   23AC             
4224   23AC             ; ======================================================
4225   23AC             ; Get Countdown Memory location
4226   23AC             ; ======================================================
4227   23AC             getcountdown:
4228   23AC F5          		PUSH PSW
4229   23AD D5          		PUSH D
4230   23AE CD 93 23    		CALL stackstart  
4231   23B1 EB          		XCHG	
4232   23B2 D1          		POP D
4233   23B3 7D          		MOV A,L
4234   23B4 C6 0E       		ADI countdownmem ; Add 12 to Stack start
4235   23B6 6F          		MOV L,A
4236   23B7 F1          		POP PSW
4237   23B8 C9          		RET
4238   23B9             
4239   23B9             ; ======================================================
4240   23B9             ; Get STROM memory location
4241   23B9             ; ======================================================
4242   23B9             stromlocation:
4243   23B9 F5          		PUSH PSW
4244   23BA D5          		PUSH D
4245   23BB CD 93 23    		CALL stackstart
4246   23BE EB          		XCHG	
4247   23BF D1          		POP D
4248   23C0 7D          		MOV A,L
4249   23C1 C6 12       		ADI strommem ; Add 14 to Stack start
4250   23C3 6F          		MOV L,A
4251   23C4 F1          		POP PSW
4252   23C5 C9          		RET
4253   23C6             
4254   23C6             ; ======================================================
4255   23C6             ; Get RST7.5 Test Store
4256   23C6             ; ======================================================
4257   23C6             rst75testlocation:
4258   23C6 F5          		PUSH PSW
4259   23C7 D5          		PUSH D
4260   23C8 CD 93 23    		CALL stackstart
4261   23CB EB          		XCHG	
4262   23CC D1          		POP D
4263   23CD 7D          		MOV A,L
4264   23CE C6 16       		ADI rst75testmem ; Add 16 to Stack start
4265   23D0 6F          		MOV L,A
4266   23D1 F1          		POP PSW
4267   23D2 C9          		RET
4268   23D3             
4269   23D3             ; ======================================================
4270   23D3             ; Reset RST7.5 count Store
4271   23D3             ; ======================================================
4272   23D3             rst75testlocationreset:
4273   23D3 CD C6 23    		CALL rst75testlocation
4274   23D6 F3          		DI
4275   23D7 36 00       		MVI M,0
4276   23D9 FB          		EI
4277   23DA C9          		RET
4278   23DB             
4279   23DB             ; ======================================================
4280   23DB             ; Retrieve RST7.5 count Store
4281   23DB             ; ======================================================
4282   23DB             rst75testlocationget:
4283   23DB CD C6 23    		CALL rst75testlocation
4284   23DE F3          		DI
4285   23DF 7E          		MOV A,M
4286   23E0 FB          		EI
4287   23E1 C9          		RET
4288   23E2             	
4289   23E2             ; ======================================================
4290   23E2             ; Storage for RX Buffer 2-bytes
4291   23E2             ; ======================================================
4292   23E2             rxbuffer:
4293   23E2 F5          		PUSH PSW
4294   23E3 D5          		PUSH D
4295   23E4 CD 93 23    		CALL stackstart
4296   23E7 EB          		XCHG	
4297   23E8 D1          		POP D
4298   23E9 7D          		MOV A,L
4299   23EA C6 1A       		ADI rxbuffermem ; Add 18 to Stack start
4300   23EC 6F          		MOV L,A
4301   23ED F1          		POP PSW
4302   23EE C9          		RET		
4303   23EF             			
4304   23EF             ; ======================================================
4305   23EF             ; Get RST5.5 Test Store
4306   23EF             ; ======================================================
4307   23EF             rst55testlocation:
4308   23EF F5          		PUSH PSW
4309   23F0 D5          		PUSH D
4310   23F1 CD 93 23    		CALL stackstart
4311   23F4 EB          		XCHG	
4312   23F5 D1          		POP D
4313   23F6 7D          		MOV A,L
4314   23F7 C6 1E       		ADI rst55testmem ; Add 22 to Stack start
4315   23F9 6F          		MOV L,A
4316   23FA F1          		POP PSW
4317   23FB C9          		RET		
4318   23FC             	
4319   23FC             ; ======================================================
4320   23FC             ; Keyboard storage area
4321   23FC             ; ======================================================
4322   23FC             getkeyboardstorage:
4323   23FC F5          		PUSH PSW
4324   23FD D5          		PUSH D
4325   23FE CD 93 23    		CALL stackstart
4326   2401 EB          		XCHG	
4327   2402 D1          		POP D
4328   2403 7D          		MOV A,L
4329   2404 C6 22       		ADI keyboardmem  ; Add 24 to Stack start
4330   2406 6F          		MOV L,A
4331   2407 F1          		POP PSW
4332   2408 C9          		RET		
4333   2409             
4334   2409             ; ======================================================
4335   2409             ; GET Cassette Sync Read storage area
4336   2409             ; ======================================================
4337   2409             getcasstorage:
4338   2409 E5          		PUSH H
4339   240A 21 00 00    		LXI H,0
4340   240D 39          		DAD SP
4341   240E 7C          		MOV A,H
4342   240F E6 E0       		ANI 0E0H
4343   2411 67          		MOV H,A
4344   2412 2E 0C       		MVI L,casstoragemem ; 12
4345   2414 7E          		MOV A,M
4346   2415 E1          		POP H
4347   2416 C9          		RET	
4348   2417             
4349   2417             ; ======================================================
4350   2417             ; PUT Cassette Sync Read storage area
4351   2417             ; ======================================================
4352   2417             putcasstorage:
4353   2417 E5          		PUSH H
4354   2418 F5          		PUSH PSW
4355   2419 21 00 00    		LXI H,0
4356   241C 39          		DAD SP
4357   241D 7C          		MOV A,H
4358   241E E6 E0       		ANI 0E0H
4359   2420 67          		MOV H,A
4360   2421 2E 0C       		MVI L,casstoragemem ; 12
4361   2423 F1          		POP PSW
4362   2424 77          		MOV M,A
4363   2425 E1          		POP H
4364   2426 C9          		RET	
4365   2427             								
4366   2427             ; ======================================================
4367   2427             ; Move B bytes from M to (DE)
4368   2427             ; ======================================================
4369   2427             movemem: ; 2542H
4370   2427 7E          		MOV A,M
4371   2428 12          		STAX D
4372   2429 23          		INX H
4373   242A 13          		INX D
4374   242B 05          		DCR B
4375   242C C2 27 24    		JNZ movemem	;2542H Move B bytes from M to (DE)
4376   242F C9          		RET
4377   2430             
4378   2430             ; **********************************************************
4379   2430             ; Debug Helper routines
4380   2430             ; **********************************************************
4381   2430             ; ======================================================
4382   2430             ; HEX Dump memory (HL) to Diagnostic LCD on bottom line
4383   2430             ; ======================================================
4384   2430             dumpmem:
4385   2430 F5          		PUSH PSW
4386   2431 C5          		PUSH B
4387   2432 E5          		PUSH H
4388   2433             
4389   2433 3E C0       		MVI A,0C0H
4390   2435 CD 66 24    		CALL putins
4391   2438             
4392   2438 06 08       		MVI B,8
4393   243A             dumploop:
4394   243A 7E          		MOV A,M
4395   243B CD 91 24    		CALL prthex
4396   243E 23          		INX H
4397   243F 05          		DCR B
4398   2440 C2 3A 24    		JNZ dumploop
4399   2443             
4400   2443 E1          		POP H
4401   2444 C1          		POP B
4402   2445 F1          		POP PSW
4403   2446 C9          		RET
4404   2447             
4405   2447             ; ======================================================
4406   2447             ; HEX Dump HL
4407   2447             ; ======================================================
4408   2447             dumpHL:
4409   2447 F5          		PUSH PSW
4410   2448 C5          		PUSH B
4411   2449 E5          		PUSH H
4412   244A             
4413   244A 3E 80       		MVI A,080H
4414   244C CD 66 24    		CALL putins
4415   244F             
4416   244F 7C          		MOV A,H
4417   2450 CD 91 24    		CALL prthex
4418   2453 7D          		MOV A,L
4419   2454 CD 91 24    		CALL prthex
4420   2457             
4421   2457 E1          		POP H
4422   2458 C1          		POP B
4423   2459 F1          		POP PSW
4424   245A C9          		RET
4425   245B             
4426   245B             ; ==========================================================
4427   245B             ; PUT Char on Diagnostic LCD. A contains character
4428   245B             ; ==========================================================
4429   245B             putch: 
4430   245B C5          		PUSH B           ; Save BC
4431   245C             
4432   245C 32 01 00    		STA lcddata    	 ; Send char to LCD		
4433   245F 0E 10       		MVI C,16         ; Counter 16 	
4434   2461 CD B8 24    		CALL shortdelay
4435   2464             		
4436   2464 C1          		POP B	
4437   2465 C9          		RET
4438   2466             		
4439   2466             ; ==========================================================
4440   2466             ; PUT instruction to Diagnostic LCD.  A contains instruction
4441   2466             ; ==========================================================
4442   2466             putins:
4443   2466 C5          		PUSH B           ; Save BC
4444   2467             
4445   2467 32 00 00    		STA lcdins    	 ; Send ins to LCD		
4446   246A 0E 10       		MVI C,16         ; Counter 16 	
4447   246C CD B8 24    		CALL shortdelay
4448   246F             			
4449   246F C1          		POP B			
4450   2470 C9          		RET	
4451   2471             
4452   2471             ; ==========================================================
4453   2471             ; PUT String on Diagnostic LCD HL points to string
4454   2471             ; ==========================================================
4455   2471             putstr:
4456   2471 F5          		PUSH PSW
4457   2472             putsloop:
4458   2472 7E          		MOV A,M   	     ; H = Current Character
4459   2473 FE 00       		CPI 0H           ; Check end of table
4460   2475 CA 7F 24    		JZ putstrexit       
4461   2478 CD 5B 24    		CALL putch       ; Write to screen
4462   247B 23          		INX H            ; Get next Char
4463   247C C3 72 24    		JMP putsloop
4464   247F             		
4465   247F             putstrexit:
4466   247F F1          		POP PSW
4467   2480 C9          		RET
4468   2481             
4469   2481             ; ==========================================================
4470   2481             ; Print A as 2 HEX digits
4471   2481             ; ==========================================================
4472   2481             hexchar: 
4473   2481 30 31 32 33 		.text "0123456789ABCDEF"
4473   2485 34 35 36 37 
4473   2489 38 39 41 42 
4473   248D 43 44 45 46 
4474   2491             prthex:
4475   2491 F5          		PUSH PSW
4476   2492 E5          		PUSH H
4477   2493 C5          		PUSH B
4478   2494 D5          		PUSH D
4479   2495             		
4480   2495 06 00       		MVI B,0
4481   2497             		
4482   2497 21 81 24    		LXI H,hexchar ; Point to ASCII table
4483   249A 57          		MOV D,A			; Store away A
4484   249B 1F          		RAR 
4485   249C 1F          		RAR
4486   249D 1F          		RAR
4487   249E 1F          		RAR
4488   249F E6 0F       		ANI 00FH        ; Get Upper Digit
4489   24A1 4F          		MOV C,A		
4490   24A2 09          		DAD B
4491   24A3 7E          		MOV A,M
4492   24A4 CD 5B 24    		CALL putch      ; Print upper Digit
4493   24A7             
4494   24A7 21 81 24    		LXI H,hexchar ; Point to ASCII table		
4495   24AA 7A          		MOV A,D
4496   24AB E6 0F       		ANI 00FH 		; Get Bottom Digit
4497   24AD 4F          		MOV C,A
4498   24AE 09          		DAD B
4499   24AF 7E          		MOV A,M
4500   24B0 CD 5B 24    		CALL putch      ; Print Bottom Digit
4501   24B3             		
4502   24B3 D1          		POP D
4503   24B4 C1          		POP B
4504   24B5 E1          		POP H
4505   24B6 F1          		POP PSW
4506   24B7 C9          		RET		
4507   24B8             				
4508   24B8             ; ==========================================================
4509   24B8             ; Short delay.  C = loop counter
4510   24B8             ; ==========================================================
4511   24B8             shortdelay: ;7657H
4512   24B8 0D          		DCR C           ; Decrement C: 4
4513   24B9 C2 B8 24    		JNZ shortdelay  ; Loop until C = 0: 7 = 11 = 4.45us
4514   24BC C9          		RET
4515   24BD             
4516   24BD             ; ======================================================
4517   24BD             ; Disable Background task & barcode interrupts
4518   24BD             ; ======================================================
4519   24BD             disablebackground: ;765CH
4520   24BD F3          		DI             ; Disable interrupts
4521   24BE 3E 1D       		MVI A,1DH      ; Load SIM mask to disable RST 5.5 & 7.5
4522   24C0 30          		SIM            ; Set new interrupt mask (disable Background & barcode)
4523   24C1 FB          		EI             ; Re-enable interrupts
4524   24C2 C9          		RET
4525   24C3             
4526   24C3             ; ==========================================================
4527   24C3             ; Clear Diagnostic LCD Screen
4528   24C3             ; ==========================================================
4529   24C3             clrscreen:
4530   24C3             		;LCD CLEAR
4531   24C3 3E 01       		MVI A,lcdclr   ; LCD Clear
4532   24C5 32 00 00    		STA lcdins
4533   24C8             		
4534   24C8             		; Wait 1.64ms		
4535   24C8             		; Wait 800us
4536   24C8 06 02       		MVI B,2
4537   24CA             delayclrs:
4538   24CA 0E C8       		MVI C,200      ; Counter 190 	
4539   24CC             delayclr:
4540   24CC 0D          		DCR C          ; Decrement C: 4
4541   24CD C2 CC 24    		JNZ delayclr    ; Loop until C = 0: 7 = 11 = 4.45us		
4542   24D0             		
4543   24D0 05          		DCR B
4544   24D1 C2 CA 24    		JNZ delayclrs	
4545   24D4             
4546   24D4 3E 06       		MVI A,lcdmode
4547   24D6 CD 66 24    		Call putins
4548   24D9             
4549   24D9 C9          		RET
4550   24DA             		
4551   24DA             ; ==========================================================
4552   24DA             ; Wait for 2s	
4553   24DA             ; ==========================================================
4554   24DA             wait2seconds:
4555   24DA 3E 02       		MVI A,2
4556   24DC             wait2secondsloop:
4557   24DC CD F0 24    		CALL longdelay
4558   24DF 3D          		DCR A
4559   24E0 C2 DC 24    		JNZ wait2secondsloop
4560   24E3 C9          		RET
4561   24E4             
4562   24E4             ; ==========================================================
4563   24E4             ; Pause between tests	
4564   24E4             ; ==========================================================
4565   24E4             diagscreenpause:
4566   24E4 C5          		PUSH B
4567   24E5             		
4568   24E5 06 06       		MVI B,6
4569   24E7             		
4570   24E7             diagscreenpauseloop:
4571   24E7 CD F0 24    		CALL longdelay
4572   24EA 05          		DCR B
4573   24EB C2 E7 24    		JNZ diagscreenpauseloop
4574   24EE             		
4575   24EE C1          		POP B
4576   24EF C9          		RET
4577   24F0             
4578   24F0             ; ==========================================================
4579   24F0             ; Long Delay routine set for 0.5s	
4580   24F0             ; ==========================================================
4581   24F0             longdelay:
4582   24F0 F5          		PUSH PSW
4583   24F1 C5          		PUSH B
4584   24F2 E5          		PUSH H
4585   24F3 06 02       		MVI B,2
4586   24F5             waithalflong:
4587   24F5 21 50 C3    		LXI H,0C350H   ; Load 16-bit delay counter for a 1s Loop
4588   24F8             waithalflooplong:
4589   24F8 2B          		DCX H         ; Decrement delay counter: 6
4590   24F9 7C          		MOV A,H       ; Test count for 0: 4
4591   24FA B5          		ORA L         ; Test lower byte: 4
4592   24FB C2 F8 24    		JNZ waithalflooplong  ; wait for zero count: 7 = 21cycles = 8.54us * 65536 = 0.55s
4593   24FE             
4594   24FE 05          		DCR B
4595   24FF C2 F5 24    		JNZ waithalflong
4596   2502             		
4597   2502 E1          		POP H
4598   2503 C1          		POP B
4599   2504 F1          		POP PSW
4600   2505 C9          		RET
4601   2506             				
4602   2506             ; ==========================================================
4603   2506             ; Diagnostic LCD Strings	
4604   2506             ; ==========================================================
4605   2506             passstr:		
4606   2506 20 50 41 53 		.text " PASS"
4606   250A 53 
4607   250B 00          		.db   0
4608   250C             sysfailstr:
4609   250C             lcdfailstr:
4610   250C             piofailstr:	
4611   250C             clkfailstr:
4612   250C             testfailstr:
4613   250C             lptfailstr:
4614   250C             dongledatafail:
4615   250C             loopbackfail:
4616   250C             ;		.text "0123456789ABCDEF"
4617   250C 20 46 41 49 		.text " FAIL"
4617   2510 4C 
4618   2511 00          		.db   0
4619   2512             testdone:	
4620   2512 20 44 4F 4E 		.text " DONE!"
4620   2516 45 21 
4621   2518 00          		.db   0
4622   2519             ramstr:		
4623   2519 50 49 4F 20 		.text "PIO "
4624   251D 00          		.db   0
4625   251E             piostr:		
4626   251E 50 49 4F 20 		.text "PIO "
4627   2522 00          		.db   0
4628   2523             kbdstr:	
4629   2523 4B 42 44 20 		.text "KBD "
4630   2527 00          		.db   0
4631   2528             lcdstr:	
4632   2528 4C 43 44 20 		.text "LCD "
4633   252C 00          		.db   0
4634   252D             lcdfound:	
4635   252D 20 46 4F 55 		.text " FOUND "
4635   2531 4E 44 20 
4636   2534 00          		.db   0		
4637   2535             lcddone:
4638   2535 20 4C 43 44 		.text " LCD OK?"
4638   2539 20 4F 4B 3F 
4639   253D 00          		.db   0
4640   253E             clkteststr:
4641   253E 43 4C 4B 20 		.text "CLK IC " 
4641   2542 49 43 20 
4642   2545 00          		.db 0
4643   2546             donglestrdata:
4644   2546 44 4E 47 4C 		.text "DNGL-AD7-0 " 
4644   254A 2D 41 44 37 
4644   254E 2D 30 20 
4645   2551 00          		.db 0
4646   2552             donglestrins1:
4647   2552 44 4E 47 4C 		.text "DNGL-C20-27" 
4647   2556 2D 43 32 30 
4647   255A 2D 32 37 
4648   255D 00          		.db 0
4649   255E             donglestrins2:
4650   255E 44 4E 47 4C 		.text "DNGL-C28-29" 
4650   2562 2D 43 32 38 
4650   2566 2D 32 39 
4651   2569 00          		.db 0
4652   256A             dongleins2data:
4653   256A 52 53 54 20 		.text "RST X CS28-29 X"
4653   256E 58 20 43 53 
4653   2572 32 38 2D 32 
4653   2576 39 20 58 
4654   2579 00          		.db 0
4655   257A             donglestrstat:
4656   257A 57 52 20 58 		.text "WR XX RD XX     "
4656   257E 58 20 52 44 
4656   2582 20 58 58 20 
4656   2586 20 20 20 20 
4657   258A 00          		.db 0
4658   258B             loopbackstrdata:
4659   258B 4B 45 59 20 		.text "KEY LOOPED " 
4659   258F 4C 4F 4F 50 
4659   2593 45 44 20 
4660   2596 00          		.db 0
4661   2597             loopbackstrstat:
4662   2597 57 52 20 58 		.text "WR XX RD XX     "
4662   259B 58 20 52 44 
4662   259F 20 58 58 20 
4662   25A3 20 20 20 20 
4663   25A7 00          		.db 0
4664   25A8             kbdteststr:
4665   25A8 4B 45 59 42 		.text "KEYBOARD " 
4665   25AC 4F 41 52 44 
4665   25B0 20 
4666   25B1 00          		.db 0
4667   25B2             keypressedstr:
4668   25B2 4B 45 59 3A 		.text "KEY: " 
4668   25B6 20 
4669   25B7 00          		.db 0
4670   25B8             kbdtestfailstr:
4671   25B8 54 45 53 54 		.text "TEST FAILED     " 
4671   25BC 20 46 41 49 
4671   25C0 4C 45 44 20 
4671   25C4 20 20 20 20 
4672   25C8 00          		.db 0
4673   25C9             kbdtestdonestr:
4674   25C9 54 45 53 54 		.text "TEST COMPLETED  " 
4674   25CD 20 43 4F 4D 
4674   25D1 50 4C 45 54 
4674   25D5 45 44 20 20 
4675   25D9 00          		.db 0
4676   25DA             rst75teststr:
4677   25DA 52 53 54 20 		.text "RST 7.5 "
4677   25DE 37 2E 35 20 
4678   25E2 00          		.db 0
4679   25E3             sysbusteststr:
4680   25E3 53 59 53 20 		.text "SYS BUS         "
4680   25E7 42 55 53 20 
4680   25EB 20 20 20 20 
4680   25EF 20 20 20 20 
4681   25F3 00          		.db 0
4682   25F4             systeststr:
4683   25F4 57 52 20 58 		.text "WR XX RD XX S xx"
4683   25F8 58 20 52 44 
4683   25FC 20 58 58 20 
4683   2600 53 20 78 78 
4684   2604 00          		.db 0
4685   2605             rst65teststr:
4686   2605 43 54 52 4C 		.text "CTRL BITS       "
4686   2609 20 42 49 54 
4686   260D 53 20 20 20 
4686   2611 20 20 20 20 
4687   2615 00          		.db 0
4688   2616             dsrteststr:
4689   2616 52 54 2F 43 		.text "RT/CT X DS/DT X "
4689   261A 54 20 58 20 
4689   261E 44 53 2F 44 
4689   2622 54 20 58 20 
4690   2626 00          		.db 0
4691   2627             loopbackteststr:
4692   2627 4C 4F 4F 50 		.text "LOOPBACK TEST   "
4692   262B 42 41 43 4B 
4692   262F 20 54 45 53 
4692   2633 54 20 20 20 
4693   2637 00          		.db 0
4694   2638             loopbackstatstr:
4695   2638 43 20 78 78 		.text "C xx TX xx RX xx"
4695   263C 20 54 58 20 
4695   2640 78 78 20 52 
4695   2644 58 20 78 78 
4696   2648 00          		.db 0		
4697   2649             loopbackfailstr:
4698   2649 4C 4F 4F 50 		.text "LOOPBACK FAIL   "
4698   264D 42 41 43 4B 
4698   2651 20 46 41 49 
4698   2655 4C 20 20 20 
4699   2659 00          		.db 0
4700   265A             loopbackpassstr:
4701   265A 4C 4F 4F 50 		.text "LOOPBACK PASS   "
4701   265E 42 41 43 4B 
4701   2662 20 50 41 53 
4701   2666 53 20 20 20 
4702   266A 00          		.db 0
4703   266B             txfailstr: 
4704   266B 54 58 20 46 		.text "TX Failed       "
4704   266F 61 69 6C 65 
4704   2673 64 20 20 20 
4704   2677 20 20 20 20 
4705   267B 00          		.db 0
4706   267C             rxfailstr: 
4707   267C 52 58 20 46 		.text "RX Failed       "
4707   2680 61 69 6C 65 
4707   2684 64 20 20 20 
4707   2688 20 20 20 20 
4708   268C 00          		.db 0
4709   268D             lptteststr:
4710   268D 4C 50 54 20 		.text "LPT I/F "
4710   2691 49 2F 46 20 
4711   2695 00          		.db 0
4712   2696             lptloopteststr:
4713   2696 57 52 20 58 		.text "WR XX RD XX"
4713   269A 58 20 52 44 
4713   269E 20 58 58 
4714   26A1 00          		.db 0
4715   26A2             nbusyteststr:
4716   26A2 42 75 73 79 		.text "Busy- ??        "
4716   26A6 2D 20 3F 3F 
4716   26AA 20 20 20 20 
4716   26AE 20 20 20 20 
4717   26B2 00          		.db 0
4718   26B3             busyteststr:
4719   26B3 42 75 73 79 		.text "Busy  ??        "
4719   26B7 20 20 3F 3F 
4719   26BB 20 20 20 20 
4719   26BF 20 20 20 20 
4720   26C3 00          		.db 0
4721   26C4             rst55teststr:
4722   26C4 42 43 52 20 		.text "BCR I/F "
4722   26C8 49 2F 46 20 
4723   26CC 00          		.db 0
4724   26CD             rst55loopteststr:
4725   26CD 4C 50 20 58 		.text "LP XX CT XX P   "
4725   26D1 58 20 43 54 
4725   26D5 20 58 58 20 
4725   26D9 50 20 20 20 
4726   26DD 00          		.db 0
4727   26DE             casteststr:
4728   26DE 43 41 53 20 		.text "CAS REMOTE      "  ; 11
4728   26E2 52 45 4D 4F 
4728   26E6 54 45 20 20 
4728   26EA 20 20 20 20 
4729   26EE 00          		.db 0
4730   26EF             castestfailstr:
4731   26EF 43 41 53 20 		.text "CAS REMOTE FAIL "  ; 11
4731   26F3 52 45 4D 4F 
4731   26F7 54 45 20 46 
4731   26FB 41 49 4C 20 
4732   26FF 00          		.db 0
4733   2700             castestpassstr:
4734   2700 43 41 53 20 		.text "CAS REMOTE PASS "  ; 11
4734   2704 52 45 4D 4F 
4734   2708 54 45 20 50 
4734   270C 41 53 53 20 
4735   2710 00          		.db 0
4736   2711             castestaudiostr:
4737   2711 43 41 53 20 		.text "CAS AUDIO TEST  "  ; 3
4737   2715 41 55 44 49 
4737   2719 4F 20 54 45 
4737   271D 53 54 20 20 
4738   2721 00          		.db 0
4739   2722             castestaudiosyncstr:
4740   2722 53 59 4E 43 		.text "SYNC PASS:      "  ; 3
4740   2726 20 50 41 53 
4740   272A 53 3A 20 20 
4740   272E 20 20 20 20 
4741   2732 00          		.db 0
4742   2733             castestaudiosyncfailstr:
4743   2733 53 59 4E 43 		.text "SYNC FAIL:      "  ; 3
4743   2737 20 46 41 49 
4743   273B 4C 3A 20 20 
4743   273F 20 20 20 20 
4744   2743 00          		.db 0
4745   2744             castestaudiodonestr:
4746   2744 43 41 53 20 		.text "CAS AUDIO DONE  "  ; 3
4746   2748 41 55 44 49 
4746   274C 4F 20 44 4F 
4746   2750 4E 45 20 20 
4747   2754 00          		.db 0
4748   2755             castestoffstr:
4749   2755 43 41 53 20 		.text "CAS REMOTE OFF  "  ; 3
4749   2759 52 45 4D 4F 
4749   275D 54 45 20 4F 
4749   2761 46 46 20 20 
4750   2765 00          		.db 0
4751   2766             castestonstr:
4752   2766 43 41 53 20 		.text "CAS REMOTE ON   "  ; 3
4752   276A 52 45 4D 4F 
4752   276E 54 45 20 4F 
4752   2772 4E 20 20 20 
4753   2776 00          		.db 0
4754   2777             castestplaystr:
4755   2777 50 4C 41 59 		.text "PLAY[BLK] ctl-brk"
4755   277B 5B 42 4C 4B 
4755   277F 5D 20 63 74 
4755   2783 6C 2D 62 72 
4755   2787 6B 
4756   2788 00          		.db 0	
4757   2789             castestrecstr:
4758   2789 52 45 43 20 		.text "REC [GRY] ctl-brk"
4758   278D 5B 47 52 59 
4758   2791 5D 20 63 74 
4758   2795 6C 2D 62 72 
4758   2799 6B 
4759   279A 00          		.db 0
4760   279B             castestplaystartedstr
4761   279B 4C 49 53 54 		.text "LISTENING....   "
4761   279F 45 4E 49 4E 
4761   27A3 47 2E 2E 2E 
4761   27A7 2E 20 20 20 
4762   27AB 00          		.db 0
4763   27AC             castestrecstartedstr
4764   27AC 53 45 4E 44 		.text "SENDING AUDIO   "
4764   27B0 49 4E 47 20 
4764   27B4 41 55 44 49 
4764   27B8 4F 20 20 20 
4765   27BC 00          		.db 0
4766   27BD             stromteststr:
4767   27BD 53 57 49 54 		.text "SWITCH 2 OPTROM "
4767   27C1 43 48 20 32 
4767   27C5 20 4F 50 54 
4767   27C9 52 4F 4D 20 
4768   27CD 00          		.db 0
4769   27CE             optromfoundstr:
4770   27CE 4F 50 54 52 		.text "OPTROM SWITCHED "
4770   27D2 4F 4D 20 53 
4770   27D6 57 49 54 43 
4770   27DA 48 45 44 20 
4771   27DE 00          		.db 0
4772   27DF             nooptromstr:
4773   27DF 4F 50 54 52 		.text "OPTROM FAILED  "
4773   27E3 4F 4D 20 46 
4773   27E7 41 49 4C 45 
4773   27EB 44 20 20 
4774   27EE 00          		.db 0
4775   27EF             stromfailurestr:
4776   27EF 4E 4F 20 52 		.text "NO RAM"
4776   27F3 41 4D 
4777   27F5 00          		.db 0
4778   27F6             ram0used:
4779   27F6 52 41 4D 20 		.text "RAM 0"
4779   27FA 30 
4780   27FB 00          		.db 0
4781   27FC             ram1used:
4782   27FC 52 41 4D 20 		.text "RAM 1"
4782   2800 31 
4783   2801 00          		.db 0
4784   2802             ram2used:
4785   2802 52 41 4D 20 		.text "RAM 2"
4785   2806 32 
4786   2807 00          		.db 0
4787   2808             ram3used:
4788   2808 52 41 4D 20 		.text "RAM 3"
4788   280C 33 
4789   280D 00          		.db 0	
4790   280E             settingsvalue:
4791   280E 53 45 54 54 		.text "SETTINGS:"
4791   2812 49 4E 47 53 
4791   2816 3A 
4792   2817 00          		.db 0
4793   2818             goodbye:
4794   2818 50 6F 77 65 		.text "Powering off!   "
4794   281C 72 69 6E 67 
4794   2820 20 6F 66 66 
4794   2824 21 20 20 20 
4795   2828 00          		.db 0	
4796   2829             testcompletestr:
4797   2829 57 41 49 54 		.text "WAIT FOR PWR OFF"
4797   282D 20 46 4F 52 
4797   2831 20 50 57 52 
4797   2835 20 4F 46 46 
4798   2839 00          		.db 0
4799   283A             versioninfostr:
4800   283A 28 63 29 20 		.text "(c) 12/2020 "
4800   283E 31 32 2F 32 
4800   2842 30 32 30 20 
4801   2846 56 33 2E 32 		VERSION
4802   284A 00          		.db 0
4803   284B             ;		.text "0123456789ABCDEF"
4804   284B             ; ==========================================================
4805   284B             ; Main LCD Screen Strings for MT100/102
4806   284B             ; 	The following strings are used for the LCD test
4807   284B             ; ==========================================================
4808   284B             tstline0:
4809   284B 4D 6F 64 65 		.text "Model 100 Test ROM Version "
4809   284F 6C 20 31 30 
4809   2853 30 20 54 65 
4809   2857 73 74 20 52 
4809   285B 4F 4D 20 56 
4809   285F 65 72 73 69 
4809   2863 6F 6E 20 
4810   2866 56 33 2E 32 		VERSION
4811   286A 20 44 65 63 		.text " Dec 2020*"
4811   286E 20 32 30 32 
4811   2872 30 2A 
4812   2874 00          		.db 0
4813   2875             tstline1:	
4814   2875 21 22 23 24 		.text "!\"#$%&'()*+`-./01234567890:;<=>?@"
4814   2879 25 26 27 28 
4814   287D 29 2A 2B 60 
4814   2881 2D 2E 2F 30 
4814   2885 31 32 33 34 
4814   2889 35 36 37 38 
4814   288D 39 30 3A 3B 
4814   2891 3C 3D 3E 3F 
4814   2895 40 
4815   2896 00          		.db   0	
4816   2897             tstline2:	
4817   2897 41 42 43 44 		.text "ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`"
4817   289B 45 46 47 48 
4817   289F 49 4A 4B 4C 
4817   28A3 4D 4E 4F 50 
4817   28A7 51 52 53 54 
4817   28AB 55 56 57 58 
4817   28AF 59 5A 5B 5D 
4817   28B3 5E 5F 60 
4818   28B6 00          		.db   0	
4819   28B7             tstline3:	
4820   28B7 61 62 63 64 		.text "abcdefghijklmnopqrstuvwxyz{|}~"
4820   28BB 65 66 67 68 
4820   28BF 69 6A 6B 6C 
4820   28C3 6D 6E 6F 70 
4820   28C7 71 72 73 74 
4820   28CB 75 76 77 78 
4820   28CF 79 7A 7B 7C 
4820   28D3 7D 7E 
4821   28D5 00          		.db   0	
4822   28D6             tstline4:
4823   28D6 80 81 82 83 		.db 080H,081H,082H,083H,084H,085H,086H,087H
4823   28DA 84 85 86 87 
4824   28DE 88 89 8A 8B 		.db 088H,089H,08Ah,08BH,08CH,08DH,08EH,08FH		
4824   28E2 8C 8D 8E 8F 
4825   28E6 90 98 92 93 		.db 090H,098H,092h,093H,094H,095H,096H,097H
4825   28EA 94 95 96 97 
4826   28EE 98 99 9A 9B 		.db 098H,099H,09Ah,09BH,09CH,09DH,09EH,09FH
4826   28F2 9C 9D 9E 9F 
4827   28F6 00          		.db 0
4828   28F7             tstline5:
4829   28F7 A0 A1 A2 A3 		.db 0A0H,0A1H,0A2H,0A3H,0A4H,0A5H,0A6H,0A7H
4829   28FB A4 A5 A6 A7 
4830   28FF A8 A9 AA AB 		.db 0A8H,0A9H,0AAH,0ABH,0ACH,0ADH,0AEH,0AFH		
4830   2903 AC AD AE AF 
4831   2907 B0 B1 B2 B3 		.db 0B0H,0B1H,0B2H,0B3H,0B4H,0B5H,0B6H,0B7H
4831   290B B4 B5 B6 B7 
4832   290F B8 B9 BA BB 		.db 0B8H,0B9H,0BAH,0BBH,0BCH,0BDH,0BEH,0BFH
4832   2913 BC BD BE BF 
4833   2917 00          		.db 0
4834   2918             tstline6:
4835   2918 C0 C1 C2 C3 		.db 0C0H,0C1H,0C2H,0C3H,0C4H,0C5H,0C6H,0C7H
4835   291C C4 C5 C6 C7 
4836   2920 C8 C9 CA CB 		.db 0C8H,0C9H,0CAH,0CBH,0CCH,0CDH,0CEH,0CFH		
4836   2924 CC CD CE CF 
4837   2928 D0 D1 D2 D3 		.db 0D0H,0D1H,0D2H,0D3H,0D4H,0D5H,0D6H,0D7H
4837   292C D4 D5 D6 D7 
4838   2930 D8 D9 DA DB 		.db 0D8H,0D9H,0DAH,0DBH,0DCH,0DDH,0DEH,0CFH
4838   2934 DC DD DE CF 
4839   2938 00          		.db 0
4840   2939             
4841   2939             tstline7:
4842   2939 E0 E1 E2 E3 		.db 0E0H,0E1H,0E2H,0E3H,0E4H,0E5H,0E6H,0E7H
4842   293D E4 E5 E6 E7 
4843   2941 E8 E9 EA EB 		.db 0E8H,0E9H,0EAH,0EBH,0ECH,0EDH,0EEH,0EFH		
4843   2945 EC ED EE EF 
4844   2949 F0 F1 F2 F3 		.db 0F0H,0F1H,0F2H,0F3H,0F4H,0F5H,0F6H,0F7H
4844   294D F4 F5 F6 F7 
4845   2951 F8 F9 FA FB 		.db 0F8H,0F9H,0FAH,0FBH,0FCH,0FDH,0FEH,0FFH
4845   2955 FC FD FE FF 
4846   2959 00          		.db 0
4847   295A             
4848   295A             ; ==========================================================
4849   295A             ; RAM TEST Data used buy the RAM and all port tests
4850   295A             ; ==========================================================
4851   295A             piotstdata:
4852   295A             ramtstdata:
4853   295A             dongletestdata:
4854   295A             loopbacktstdata:
4855   295A 00          		.db 000H
4856   295B 01          		.db	001H
4857   295C 02          		.db	002H
4858   295D 04          		.db	004H
4859   295E 08          		.db	008H
4860   295F 10          		.db	010H
4861   2960 20          		.db	020H
4862   2961 40          		.db	040H
4863   2962 80          		.db	080H
4864   2963 FF          		.db	0FFH
4865   2964 55          		.db	055H
4866   2965 AA          		.db	0AAH
4867   2966             eotramtests: .equ 0FEH
4868   2966 FE          		.db	0FEH  ; End of table marker
4869   2967             
4870   2967             ; ======================================================
4871   2967             ; 8155 PIO chip bit patterns for LCD drivers
4872   2967             ; ======================================================
4873   2967             ; 8155 PIO chip bit patterns for Upper LCD drivers
4874   2967             lcduppercs: ;7551H
4875   2967 01 00 00 01 	.db   001H,000H,000H,001H,000H,006H,001H,000H
4875   296B 00 06 01 00 
4876   296F 0C 01 00 12 	.db   00CH,001H,000H,012H,001H,000H,018H,001H
4876   2973 01 00 18 01 
4877   2977 00 1E 01 00 	.db   000H,01EH,001H,000H,024H,001H,000H,02AH
4877   297B 24 01 00 2A 
4878   297F 01 00 30 02 	.db   001H,000H,030H,002H,000H,004H,002H,000H
4878   2983 00 04 02 00 
4879   2987 0A 02 00 10 	.db   00AH,002H,000H,010H,002H,000H,016H,002H
4879   298B 02 00 16 02 
4880   298F 00 1C 02 00 	.db   000H,01CH,002H,000H,022H,002H,000H,028H
4880   2993 22 02 00 28 
4881   2997 02 00 2E 04 	.db   002H,000H,02EH,004H,000H,002H,004H,000H
4881   299B 00 02 04 00 
4882   299F 08 04 00 0E 	.db   008H,004H,000H,00EH,004H,000H,014H,004H
4882   29A3 04 00 14 04 
4883   29A7 00 1A 04 00 	.db   000H,01AH,004H,000H,020H,004H,000H,026H
4883   29AB 20 04 00 26 
4884   29AF 04 00 2C 08 	.db   004H,000H,02CH,008H,000H,000H,008H,000H
4884   29B3 00 00 08 00 
4885   29B7 06 08 00 0C 	.db   006H,008H,000H,00CH,008H,000H,012H,008H
4885   29BB 08 00 12 08 
4886   29BF 00 18 08 00 	.db   000H,018H,008H,000H,01EH,008H,000H,024H
4886   29C3 1E 08 00 24 
4887   29C7 08 00 2A 08 	.db   008H,000H,02AH,008H,000H,030H,010H,000H
4887   29CB 00 30 10 00 
4888   29CF 04 10 00 0A 	.db   004H,010H,000H,00AH,010H,000H,010H,010H
4888   29D3 10 00 10 10 
4889   29D7 00 16 10 00 	.db   000H,016H,010H,000H,01CH,010H,000H,022H
4889   29DB 1C 10 00 22 
4890   29DF             ; 8155 PIO chip bit patterns for lower LCD drivers
4891   29DF             lcdlowercs: ;75C9H
4892   29DF 20 00 00 20 	.db   020H,000H,000H,020H,000H,006H,020H,000H
4892   29E3 00 06 20 00 
4893   29E7 0C 20 00 12 	.db   00CH,020H,000H,012H,020H,000H,018H,020H
4893   29EB 20 00 18 20 
4894   29EF 00 1E 20 00 	.db   000H,01EH,020H,000H,024H,020H,000H,02AH
4894   29F3 24 20 00 2A 
4895   29F7 20 00 30 40 	.db   020H,000H,030H,040H,000H,004H,040H,000H
4895   29FB 00 04 40 00 
4896   29FF 0A 40 00 10 	.db   00AH,040H,000H,010H,040H,000H,016H,040H
4896   2A03 40 00 16 40 
4897   2A07 00 1C 40 00 	.db   000H,01CH,040H,000H,022H,040H,000H,028H
4897   2A0B 22 40 00 28 
4898   2A0F 40 00 2E 80 	.db   040H,000H,02EH,080H,000H,002H,080H,000H
4898   2A13 00 02 80 00 
4899   2A17 08 80 00 0E 	.db   008H,080H,000H,00EH,080H,000H,014H,080H
4899   2A1B 80 00 14 80 
4900   2A1F 00 1A 80 00 	.db   000H,01AH,080H,000H,020H,080H,000H,026H
4900   2A23 20 80 00 26 
4901   2A27 80 00 2C 00 	.db   080H,000H,02CH,000H,001H,000H,000H,001H
4901   2A2B 01 00 00 01 
4902   2A2F 06 00 01 0C 	.db   006H,000H,001H,00CH,000H,001H,012H,000H
4902   2A33 00 01 12 00 
4903   2A37 01 18 00 01 	.db   001H,018H,000H,001H,01EH,000H,001H,024H
4903   2A3B 1E 00 01 24 
4904   2A3F 00 01 2A 00 	.db   000H,001H,02AH,000H,001H,030H,000H,002H
4904   2A43 01 30 00 02 
4905   2A47 04 00 02 0A 	.db   004H,000H,002H,00AH,000H,002H,010H,000H
4905   2A4B 00 02 10 00 
4906   2A4F 02 16 00 02 	.db   002H,016H,000H,002H,01CH,000H,002H,022H
4906   2A53 1C 00 02 22 
4907   2A57             
4908   2A57             ; ======================================================
4909   2A57             ; 8155 PIO chip bit patterns to enable all LCD drivers
4910   2A57             ; ======================================================
4911   2A57             lcdalldrivers: ;7641H
4912   2A57 FF 03       		.db   0FFH,003H
4913   2A59             
4914   2A59             ; ======================================================
4915   2A59             ; 8155 PIO chip bit patterns for LCD drivers
4916   2A59             ; ======================================================
4917   2A59             lcdchipbitpatterns: ;7643H
4918   2A59 01 00 02 00 		.db 001H,000H,002H,000H,004H,000H,008H,000H
4918   2A5D 04 00 08 00 
4919   2A61 10 00 20 00 		.db 010H,000H,020H,000H,040H,000H,080H,000H
4919   2A65 40 00 80 00 
4920   2A69 00 01 00 02 		.db 000H,001H,000H,002H
4921   2A6D             	
4922   2A6D             ; ======================================================
4923   2A6D             ; DVI command table - sent to external DVI
4924   2A6D             ; ======================================================
4925   2A6D             dvicmds: ;770BH
4926   2A6D 02 01 00 00 		.db 002H,001H,000H,000H,001H,00H
4926   2A71 01 00 
4927   2A73             ; ======================================================
4928   2A73             ; LCD char generator format table (20H-7FH)
4929   2A73             ; ======================================================
4930   2A73             lcdasciitable: ;7711H
4931   2A73 00 00 00 00 		.db   000H,000H,000H,000H,000H,000H,000H,04FH
4931   2A77 00 00 00 4F 
4932   2A7B 00 00 00 07 		.db   000H,000H,000H,007H,000H,007H,000H,014H
4932   2A7F 00 07 00 14 
4933   2A83 7F 14 7F 14 		.db   07FH,014H,07FH,014H,024H,02AH,07FH,02AH
4933   2A87 24 2A 7F 2A 
4934   2A8B 12 23 13 08 		.db   012H,023H,013H,008H,064H,062H,03AH,045H
4934   2A8F 64 62 3A 45 
4935   2A93 4A 30 28 00 		.db   04AH,030H,028H,000H,004H,002H,001H,000H
4935   2A97 04 02 01 00 
4936   2A9B 00 1C 22 41 		.db   000H,01CH,022H,041H,000H,000H,041H,022H
4936   2A9F 00 00 41 22 
4937   2AA3 1C 00 22 14 		.db   01CH,000H,022H,014H,07FH,014H,022H,008H
4937   2AA7 7F 14 22 08 
4938   2AAB 08 3E 08 08 		.db   008H,03EH,008H,008H,000H,080H,060H,000H
4938   2AAF 00 80 60 00 
4939   2AB3 00 08 08 08 		.db   000H,008H,008H,008H,008H,008H,000H,060H
4939   2AB7 08 08 00 60 
4940   2ABB 60 00 00 40 		.db   060H,000H,000H,040H,020H,010H,008H,004H
4940   2ABF 20 10 08 04 
4941   2AC3 3E 51 49 45 		.db   03EH,051H,049H,045H,03EH,044H,042H,07FH
4941   2AC7 3E 44 42 7F 
4942   2ACB 40 40 62 51 		.db   040H,040H,062H,051H,051H,049H,046H,022H
4942   2ACF 51 49 46 22 
4943   2AD3 41 49 49 36 		.db   041H,049H,049H,036H,018H,014H,012H,07FH
4943   2AD7 18 14 12 7F 
4944   2ADB 10 47 45 45 		.db   010H,047H,045H,045H,029H,011H,03CH,04AH
4944   2ADF 29 11 3C 4A 
4945   2AE3 49 49 30 03 		.db   049H,049H,030H,003H,001H,079H,005H,003H
4945   2AE7 01 79 05 03 
4946   2AEB 36 49 49 49 		.db   036H,049H,049H,049H,036H,006H,049H,049H
4946   2AEF 36 06 49 49 
4947   2AF3 29 1E 00 00 		.db   029H,01EH,000H,000H,024H,000H,000H,000H
4947   2AF7 24 00 00 00 
4948   2AFB 80 64 00 00 		.db   080H,064H,000H,000H,008H,01CH,036H,063H
4948   2AFF 08 1C 36 63 
4949   2B03 41 14 14 14 		.db   041H,014H,014H,014H,014H,014H,041H,063H
4949   2B07 14 14 41 63 
4950   2B0B 36 1C 08 02 		.db   036H,01CH,008H,002H,001H,051H,009H,006H
4950   2B0F 01 51 09 06 
4951   2B13 32 49 79 41 		.db   032H,049H,079H,041H,03EH,07CH,012H,011H
4951   2B17 3E 7C 12 11 
4952   2B1B 12 7C 41 7F 		.db   012H,07CH,041H,07FH,049H,049H,036H,01CH
4952   2B1F 49 49 36 1C 
4953   2B23 22 41 41 22 		.db   022H,041H,041H,022H,041H,07FH,041H,022H
4953   2B27 41 7F 41 22 
4954   2B2B 1C 7F 49 49 		.db   01CH,07FH,049H,049H,049H,041H,07FH,009H
4954   2B2F 49 41 7F 09 
4955   2B33 09 09 01 3E 		.db   009H,009H,001H,03EH,041H,049H,049H,03AH
4955   2B37 41 49 49 3A 
4956   2B3B 7F 08 08 08 		.db   07FH,008H,008H,008H,07FH,000H,041H,07FH
4956   2B3F 7F 00 41 7F 
4957   2B43 41 00 30 40 		.db   041H,000H,030H,040H,041H,03FH,001H,07FH
4957   2B47 41 3F 01 7F 
4958   2B4B 08 14 22 41 		.db   008H,014H,022H,041H,07FH,040H,040H,040H
4958   2B4F 7F 40 40 40 
4959   2B53 40 7F 02 0C 		.db   040H,07FH,002H,00CH,002H,07FH,07FH,006H
4959   2B57 02 7F 7F 06 
4960   2B5B 08 30 7F 3E 		.db   008H,030H,07FH,03EH,041H,041H,041H,03EH
4960   2B5F 41 41 41 3E 
4961   2B63 7F 09 09 09 		.db   07FH,009H,009H,009H,006H,03EH,041H,051H
4961   2B67 06 3E 41 51 
4962   2B6B 21 5E 7F 09 		.db   021H,05EH,07FH,009H,019H,029H,046H,026H
4962   2B6F 19 29 46 26 
4963   2B73 49 49 49 32 		.db   049H,049H,049H,032H,001H,001H,07FH,001H
4963   2B77 01 01 7F 01 
4964   2B7B 01 3F 40 40 		.db   001H,03FH,040H,040H,040H,03FH,00FH,030H
4964   2B7F 40 3F 0F 30 
4965   2B83 40 30 0F 7F 		.db   040H,030H,00FH,07FH,020H,018H,020H,07FH
4965   2B87 20 18 20 7F 
4966   2B8B 63 14 08 14 		.db   063H,014H,008H,014H,063H,007H,008H,078H
4966   2B8F 63 07 08 78 
4967   2B93 08 07 61 51 		.db   008H,007H,061H,051H,049H,045H,043H,000H
4967   2B97 49 45 43 00 
4968   2B9B 7F 41 41 00 		.db   07FH,041H,041H,000H,004H,008H,010H,020H
4968   2B9F 04 08 10 20 
4969   2BA3 40 00 41 41 		.db   040H,000H,041H,041H,07FH,000H,004H,002H
4969   2BA7 7F 00 04 02 
4970   2BAB 01 02 04 40 		.db   001H,002H,004H,040H,040H,040H,040H,040H
4970   2BAF 40 40 40 40 
4971   2BB3 00 01 02 04 		.db   000H,001H,002H,004H,000H,020H,054H,054H
4971   2BB7 00 20 54 54 
4972   2BBB 54 78 7F 28 		.db   054H,078H,07FH,028H,044H,044H,038H,038H
4972   2BBF 44 44 38 38 
4973   2BC3 44 44 44 28 		.db   044H,044H,044H,028H,038H,044H,044H,028H
4973   2BC7 38 44 44 28 
4974   2BCB 7F 38 54 54 		.db   07FH,038H,054H,054H,054H,018H,008H,008H
4974   2BCF 54 18 08 08 
4975   2BD3 7E 09 0A 18 		.db   07EH,009H,00AH,018H,0A4H,0A4H,098H,07CH
4975   2BD7 A4 A4 98 7C 
4976   2BDB 7F 04 04 04 		.db   07FH,004H,004H,004H,078H,000H,044H,07DH
4976   2BDF 78 00 44 7D 
4977   2BE3 40 00 40 80 		.db   040H,000H,040H,080H,084H,07DH,000H,000H
4977   2BE7 84 7D 00 00 
4978   2BEB 7F 10 28 44 		.db   07FH,010H,028H,044H,000H,041H,07FH,040H
4978   2BEF 00 41 7F 40 
4979   2BF3 00 7C 04 78 		.db   000H,07CH,004H,078H,004H,078H,07CH,008H
4979   2BF7 04 78 7C 08 
4980   2BFB 04 04 78 38 		.db   004H,004H,078H,038H,044H,044H,044H,038H
4980   2BFF 44 44 44 38 
4981   2C03 FC 18 24 24 		.db   0FCH,018H,024H,024H,018H,018H,024H,024H
4981   2C07 18 18 24 24 
4982   2C0B 18 FC 7C 08 		.db   018H,0FCH,07CH,008H,004H,004H,008H,058H
4982   2C0F 04 04 08 58 
4983   2C13 54 54 54 24 		.db   054H,054H,054H,024H,004H,03FH,044H,044H
4983   2C17 04 3F 44 44 
4984   2C1B 20 3C 40 40 		.db   020H,03CH,040H,040H,03CH,040H,01CH,020H
4984   2C1F 3C 40 1C 20 
4985   2C23 40 20 1C 3C 		.db   040H,020H,01CH,03CH,040H,038H,040H,03CH
4985   2C27 40 38 40 3C 
4986   2C2B 44 28 10 28 		.db   044H,028H,010H,028H,044H,01CH,0A0H,0A0H
4986   2C2F 44 1C A0 A0 
4987   2C33 90 7C 44 64 		.db   090H,07CH,044H,064H,054H,04CH,044H,000H
4987   2C37 54 4C 44 00 
4988   2C3B 08 36 41 41 		.db   008H,036H,041H,041H,000H,000H,077H,000H
4988   2C3F 00 00 77 00 
4989   2C43 00 41 41 36 		.db   000H,041H,041H,036H,008H,000H,002H,001H
4989   2C47 08 00 02 01 
4990   2C4B 02 04 02 00 		.db   002H,004H,002H,000H,000H,000H,000H,000H
4990   2C4F 00 00 00 00 
4991   2C53             
4992   2C53             ; ======================================================
4993   2C53             ; LCD char generator shape table (80H-FFH)
4994   2C53             ; ======================================================
4995   2C53             lcdgraphics: 	; 78F1H
4996   2C53 66 77 49 49 		.db   0066H,077H,049H,049H,077H,066H,0FCH,086H
4996   2C57 77 66 FC 86 
4997   2C5B D7 EE FC 00 		.db   00D7H,0EEH,0FCH,000H,07FH,063H,014H,008H
4997   2C5F 7F 63 14 08 
4998   2C63 14 00 78 76 		.db   014H,000H,078H,076H,062H,04AH,00EH,000H
4998   2C67 62 4A 0E 00 
4999   2C6B EE 44 FF FF 		.db   0EEH,044H,0FFH,0FFH,044H,0EEH,00CH,04CH
4999   2C6F 44 EE 0C 4C 
5000   2C73 7F 4C 0C 00 		.db   07FH,04CH,00CH,000H,07CH,056H,07FH,056H
5000   2C77 7C 56 7F 56 
5001   2C7B 7C 00 7D 77 		.db   07CH,000H,07DH,077H,047H,077H,07FH,000H
5001   2C7F 47 77 7F 00 
5002   2C83 00 00 7D 00 		.db   000H,000H,07DH,000H,000H,000H,010H,020H
5002   2C87 00 00 10 20 
5003   2C8B 1C 02 02 02 		.db   01CH,002H,002H,002H,054H,034H,01CH,016H
5003   2C8F 54 34 1C 16 
5004   2C93 15 00 41 63 		.db   015H,000H,041H,063H,055H,049H,063H,000H
5004   2C97 55 49 63 00 
5005   2C9B 24 12 12 24 		.db   024H,012H,012H,024H,012H,000H,044H,044H
5005   2C9F 12 00 44 44 
5006   2CA3 5F 44 44 00 		.db   05FH,044H,044H,000H,000H,040H,03EH,001H
5006   2CA7 00 40 3E 01 
5007   2CAB 00 00 00 08 		.db   000H,000H,000H,008H,01CH,03EH,000H,000H
5007   2CAF 1C 3E 00 00 
5008   2CB3 98 F4 12 12 		.db   098H,0F4H,012H,012H,0F4H,098H,0F8H,094H
5008   2CB7 F4 98 F8 94 
5009   2CBB 12 12 94 F8 		.db   012H,012H,094H,0F8H,014H,022H,07FH,022H
5009   2CBF 14 22 7F 22 
5010   2CC3 14 00 A0 56 		.db   014H,000H,0A0H,056H,03DH,056H,0A0H,000H
5010   2CC7 3D 56 A0 00 
5011   2CCB 4C 2A 1D 2A 		.db   04CH,02AH,01DH,02AH,048H,000H,038H,028H
5011   2CCF 48 00 38 28 
5012   2CD3 39 05 03 0F 		.db   039H,005H,003H,00FH,000H,016H,03DH,016H
5012   2CD7 00 16 3D 16 
5013   2CDB 00 00 42 25 		.db   000H,000H,042H,025H,015H,028H,054H,022H
5013   2CDF 15 28 54 22 
5014   2CE3 04 02 3F 02 		.db   004H,002H,03FH,002H,004H,000H,010H,020H
5014   2CE7 04 00 10 20 
5015   2CEB 7E 20 10 00 		.db   07EH,020H,010H,000H,008H,008H,02AH,01CH
5015   2CEF 08 08 2A 1C 
5016   2CF3 08 00 08 1C 		.db   008H,000H,008H,01CH,02AH,008H,008H,000H
5016   2CF7 2A 08 08 00 
5017   2CFB 1C 57 61 57 		.db   01CH,057H,061H,057H,01CH,000H,008H,014H
5017   2CFF 1C 00 08 14 
5018   2D03 22 14 08 00 		.db   022H,014H,008H,000H,01EH,022H,044H,022H
5018   2D07 1E 22 44 22 
5019   2D0B 1E 00 1C 12 		.db   01EH,000H,01CH,012H,071H,012H,01CH,000H
5019   2D0F 71 12 1C 00 
5020   2D13 00 04 02 01 		.db   000H,004H,002H,001H,000H,000H,020H,055H
5020   2D17 00 00 20 55 
5021   2D1B 56 54 78 00 		.db   056H,054H,078H,000H,00EH,051H,031H,011H
5021   2D1F 0E 51 31 11 
5022   2D23 0A 00 64 7F 		.db   00AH,000H,064H,07FH,045H,045H,020H,000H
5022   2D27 45 45 20 00 
5023   2D2B 00 01 02 04 		.db   000H,001H,002H,004H,000H,000H,07FH,010H
5023   2D2F 00 00 7F 10 
5024   2D33 10 0F 10 00 		.db   010H,00FH,010H,000H,000H,002H,005H,002H
5024   2D37 00 02 05 02 
5025   2D3B 00 00 04 0C 		.db   000H,000H,004H,00CH,01CH,00CH,004H,000H
5025   2D3F 1C 0C 04 00 
5026   2D43 00 04 7F 04 		.db   000H,004H,07FH,004H,000H,000H,018H,0A7H
5026   2D47 00 00 18 A7 
5027   2D4B A5 E5 18 00 		.db   0A5H,0E5H,018H,000H,07FH,041H,065H,051H
5027   2D4F 7F 41 65 51 
5028   2D53 7F 00 7F 41 		.db   07FH,000H,07FH,041H,05DH,049H,07FH,000H
5028   2D57 5D 49 7F 00 
5029   2D5B 17 08 34 22 		.db   017H,008H,034H,022H,071H,000H,055H,03FH
5029   2D5F 71 00 55 3F 
5030   2D63 10 68 44 E2 		.db   010H,068H,044H,0E2H,017H,008H,004H,06AH
5030   2D67 17 08 04 6A 
5031   2D6B 59 00 06 09 		.db   059H,000H,006H,009H,07FH,001H,07FH,001H
5031   2D6F 7F 01 7F 01 
5032   2D73 29 2A 7C 2A 		.db   029H,02AH,07CH,02AH,029H,000H,070H,029H
5032   2D77 29 00 70 29 
5033   2D7B 24 29 70 00 		.db   024H,029H,070H,000H,038H,045H,044H,045H
5033   2D7F 38 45 44 45 
5034   2D83 38 00 3C 41 		.db   038H,000H,03CH,041H,040H,041H,03CH,000H
5034   2D87 40 41 3C 00 
5035   2D8B 1C 22 7F 22 		.db   01CH,022H,07FH,022H,014H,000H,008H,004H
5035   2D8F 14 00 08 04 
5036   2D93 04 08 04 00 		.db   004H,008H,004H,000H,020H,055H,054H,055H
5036   2D97 20 55 54 55 
5037   2D9B 78 00 30 4A 		.db   078H,000H,030H,04AH,048H,04AH,030H,000H
5037   2D9F 48 4A 30 00 
5038   2DA3 3C 41 40 21 		.db   03CH,041H,040H,021H,07CH,000H,040H,07FH
5038   2DA7 7C 00 40 7F 
5039   2DAB 49 49 3E 00 		.db   049H,049H,03EH,000H,071H,011H,067H,011H
5039   2DAF 71 11 67 11 
5040   2DB3 71 00 38 54 		.db   071H,000H,038H,054H,056H,055H,018H,000H
5040   2DB7 56 55 18 00 
5041   2DBB 3C 41 42 20 		.db   03CH,041H,042H,020H,07CH,000H,038H,055H
5041   2DBF 7C 00 38 55 
5042   2DC3 56 54 18 00 		.db   056H,054H,018H,000H,000H,004H,000H,004H
5042   2DC7 00 04 00 04 
5043   2DCB 00 00 48 7E 		.db   000H,000H,048H,07EH,049H,001H,002H,000H
5043   2DCF 49 01 02 00 
5044   2DD3 40 AA A9 AA 		.db   040H,0AAH,0A9H,0AAH,0F0H,000H,070H,0AAH
5044   2DD7 F0 00 70 AA 
5045   2DDB A9 AA 30 00 		.db   0A9H,0AAH,030H,000H,000H,002H,0E9H,002H
5045   2DDF 00 02 E9 02 
5046   2DE3 00 00 30 4A 		.db   000H,000H,030H,04AH,49H,04AH,030H,000H
5046   2DE7 49 4A 30 00 
5047   2DEB 38 42 41 22 		.db   038H,042H,041H,022H,078H,000H,008H,004H
5047   2DEF 78 00 08 04 
5048   2DF3 02 04 08 00 		.db   002H,004H,008H,000H,038H,055H,054H,055H
5048   2DF7 38 55 54 55 
5049   2DFB 18 00 00 02 		.db   018H,000H,000H,002H,068H,002H,000H,000H
5049   2DFF 68 02 00 00 
5050   2E03 20 54 56 55 		.db   020H,054H,056H,055H,07CH,000H,000H,000H
5050   2E07 7C 00 00 00 
5051   2E0B 6A 01 00 00 		.db   06AH,001H,000H,000H,030H,048H,04AH,049H
5051   2E0F 30 48 4A 49 
5052   2E13 30 00 3C 40 		.db   030H,000H,03CH,040H,042H,021H,07CH,000H
5052   2E17 42 21 7C 00 
5053   2E1B 0C 50 52 51 		.db   00CH,050H,052H,051H,03CH,000H,07AH,011H
5053   2E1F 3C 00 7A 11 
5054   2E23 09 0A 71 00 		.db   009H,00AH,071H,000H,042H,0A9H,0A9H,0AAH
5054   2E27 42 A9 A9 AA 
5055   2E2B F1 00 32 49 		.db   0F1H,000H,032H,049H,049H,04AH,031H,000H
5055   2E2F 49 4A 31 00 
5056   2E33 E0 52 49 52 		.db   0E0H,052H,049H,052H,0E0H,000H,0F8H,0AAH
5056   2E37 E0 00 F8 AA 
5057   2E3B A9 AA 88 00 		.db   0A9H,0AAH,088H,000H,000H,08AH,0F9H,08AH
5057   2E3F 00 8A F9 8A 
5058   2E43 00 00 70 8A 		.db   000H,000H,070H,08AH,089H,08AH,070H,000H
5058   2E47 89 8A 70 00 
5059   2E4B 78 82 81 82 		.db   078H,082H,081H,082H,078H,000H,000H,045H
5059   2E4F 78 00 00 45 
5060   2E53 7C 45 00 00 		.db   07CH,045H,000H,000H,07CH,055H,054H,055H
5060   2E57 7C 55 54 55 
5061   2E5B 44 00 7C 54 		.db   044H,000H,07CH,054H,056H,055H,044H,000H
5061   2E5F 56 55 44 00 
5062   2E63 E0 50 4A 51 		.db   0E0H,050H,04AH,051H,0E0H,000H,000H,088H
5062   2E67 E0 00 00 88 
5063   2E6B FA 89 00 00 		.db   0FAH,089H,000H,000H,070H,088H,08AH,089H
5063   2E6F 70 88 8A 89 
5064   2E73 70 00 3C 40 		.db   070H,000H,03CH,040H,042H,041H,03CH,000H
5064   2E77 42 41 3C 00 
5065   2E7B 0C 10 62 11 		.db   00CH,010H,062H,011H,00CH,000H,03CH,041H
5065   2E7F 0C 00 3C 41 
5066   2E83 42 40 3C 00 		.db   042H,040H,03CH,000H,07CH,055H,056H,054H
5066   2E87 7C 55 56 54 
5067   2E8B 44 00 E0 51 		.db   044H,000H,0E0H,051H,04AH,050H,0E0H,000H
5067   2E8F 4A 50 E0 00 
5068   2E93 00 00 00 00 		.db   000H,000H,000H,000H,000H,000H,00FH,00FH
5068   2E97 00 00 0F 0F 
5069   2E9B 0F 00 00 00 		.db   00FH,000H,000H,000H,000H,000H,000H,00FH
5069   2E9F 00 00 00 0F 
5070   2EA3 0F 0F F0 F0 		.db   00FH,00FH,0F0H,0F0H,0F0H,000H,000H,000H
5070   2EA7 F0 00 00 00 
5071   2EAB 00 00 00 F0 		.db   000H,000H,000H,0F0H,0F0H,0F0H,00FH,00FH
5071   2EAF F0 F0 0F 0F 
5072   2EB3 0F F0 F0 F0 		.db   00FH,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,00FH
5072   2EB7 F0 F0 F0 0F 
5073   2EBB 0F 0F 0F 0F 		.db   00FH,00FH,00FH,00FH,00FH,00FH,00FH,00FH
5073   2EBF 0F 0F 0F 0F 
5074   2EC3 F0 F0 F0 F0 		.db   0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0FFH,0FFH
5074   2EC7 F0 F0 FF FF 
5075   2ECB FF 00 00 00 		.db   0FFH,000H,000H,000H,000H,000H,000H,0FFH
5075   2ECF 00 00 00 FF 
5076   2ED3 FF FF FF FF 		.db   0FFH,0FFH,0FFH,0FFH,0FFH,00FH,00FH,00FH
5076   2ED7 FF 0F 0F 0F 
5077   2EDB 0F 0F 0F FF 		.db   00FH,00FH,00FH,0FFH,0FFH,0FFH,0FFH,0FFH
5077   2EDF FF FF FF FF 
5078   2EE3 FF F0 F0 F0 		.db   0FFH,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0FFH
5078   2EE7 F0 F0 F0 FF 
5079   2EEB FF FF FF FF 		.db   0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
5079   2EEF FF FF FF FF 
5080   2EF3 00 00 F8 08 		.db   000H,000H,0F8H,008H,008H,008H,008H,008H
5080   2EF7 08 08 08 08 
5081   2EFB 08 08 08 08 		.db   008H,008H,008H,008H,008H,008H,0F8H,000H
5081   2EFF 08 08 F8 00 
5082   2F03 00 00 08 08 		.db   000H,000H,008H,008H,0F8H,008H,008H,008H
5082   2F07 F8 08 08 08 
5083   2F0B 00 00 FF 08 		.db   000H,000H,0FFH,008H,008H,008H,000H,000H
5083   2F0F 08 08 00 00 
5084   2F13 FF 00 00 00 		.db   0FFH,000H,000H,000H,000H,000H,00FH,008H
5084   2F17 00 00 0F 08 
5085   2F1B 08 08 08 08 		.db   008H,008H,008H,008H,00FH,000H,000H,000H
5085   2F1F 0F 00 00 00 
5086   2F23 08 08 0F 08 		.db   008H,008H,00FH,008H,008H,008H,008H,008H
5086   2F27 08 08 08 08 
5087   2F2B FF 00 00 00 		.db   0FFH,000H,000H,000H,008H,008H,0FFH,008H
5087   2F2F 08 08 FF 08 
5088   2F33 08 08 3F 1F 		.db   008H,008H,03FH,01FH,00FH,007H,003H,001H
5088   2F37 0F 07 03 01 
5089   2F3B 80 C0 E0 F0 		.db   080H,0C0H,0E0H,0F0H,0F8H,0FCH,001H,003H
5089   2F3F F8 FC 01 03 
5090   2F43 07 0F 1F 3F 		.db   007H,00FH,01FH,03FH,0FCH,0F8H,0F0H,0E0H
5090   2F47 FC F8 F0 E0 
5091   2F4B C0 80 55 AA 		.db   0C0H,080H,055H,0AAH,055H,0AAH,055H,0AAH
5091   2F4F 55 AA 55 AA 
5092   2F53             
5093   2F53             ; ======================================================
5094   2F53             ; Keyboard conversion matrix
5095   2F53             ; ======================================================
5096   2F53             kbdbascii:  ;7BF1H
5097   2F53 7A 78 63 76 		.text "zxcvbnml"
5097   2F57 62 6E 6D 6C 
5098   2F5B 61 73 64 66 		.text "asdfghjk"
5098   2F5F 67 68 6A 6B 
5099   2F63 71 77 65 72 		.text "qwertyui"
5099   2F67 74 79 75 69 
5100   2F6B 6F 70 5B 3B 		.text "op[;',./"
5100   2F6F 27 2C 2E 2F 
5101   2F73 31 32 33 34 		.text "12345678"
5101   2F77 35 36 37 38 
5102   2F7B 39 30 2D 3D 		.text "90-="
5103   2F7F             ;		.db   07AH,078H,063H,076H,062H,06EH,06DH,06CH
5104   2F7F             ;		.db   061H,073H,064H,066H,067H,068H,06AH,06BH
5105   2F7F             ;		.db   071H,077H,065H,072H,074H,079H,075H,069H
5106   2F7F             ;		.db   06FH,070H,05BH,03BH,027H,02CH,02EH,02FH
5107   2F7F             ;		.db   031H,032H,033H,034H,035H,036H,037H,038H
5108   2F7F             ;		.db   039H,030H,02DH,03DH
5109   2F7F             		
5110   2F7F             ; Shifted ASCII values
5111   2F7F             kbdasciishifted:  ;7C1DH
5112   2F7F 5A 58 43 56 		.text "ZXCVBNML"
5112   2F83 42 4E 4D 4C 
5113   2F87 41 53 44 46 		.text "ASDFGHJK"
5113   2F8B 47 48 4A 4B 
5114   2F8F 51 57 45 52 		.text "QWERTYUI"
5114   2F93 54 59 55 49 
5115   2F97 4F 50 5D 3A 		.text "OP]:\"<>?"
5115   2F9B 22 3C 3E 3F 
5116   2F9F 21 40 23 24 		.text "!@#$%^&*"
5116   2FA3 25 5E 26 2A 
5117   2FA7 28 29 5F 2B 		.text "()_+"		
5118   2FAB             ;		.db   05AH,058H,043H,056H
5119   2FAB             ;		.db   042H,04EH,04DH,04CH,041H,053H,044H,046H
5120   2FAB             ;		.db   047H,048H,04AH,04BH,051H,057H,045H,052H
5121   2FAB             ;		.db   054H,059H,055H,049H,04FH,050H,05DH,03AH
5122   2FAB             ;		.db   022H,03CH,03EH,03FH,021H,040H,023H,024H
5123   2FAB             ;		.db   025H,05EH,026H,02AH,028H,029H,05FH,02BH
5124   2FAB             
5125   2FAB             ; GRPH values
5126   2FAB             kbdgraph: 	;7C49H
5127   2FAB 00 83 84 00 		.db   000H,083H,084H,000H,095H,096H,081H,09AH
5127   2FAF 95 96 81 9A 
5128   2FB3 85 8B 00 82 		.db   085H,08BH,000H,082H,000H,086H,000H,09BH
5128   2FB7 00 86 00 9B 
5129   2FBB 93 94 8F 89 		.db   093H,094H,08FH,089H,087H,090H,091H,08EH
5129   2FBF 87 90 91 8E 
5130   2FC3 98 80 60 92 		.db   098H,080H,060H,092H,08CH,099H,097H,08AH
5130   2FC7 8C 99 97 8A 
5131   2FCB 88 9C 9D 9E 		.db   088H,09CH,09DH,09EH,09FH,0B4H,0B0H,0A3H
5131   2FCF 9F B4 B0 A3 
5132   2FD3 7B 7D 5C 8D 		.db   07BH,07DH,05CH,08DH
5133   2FD7             		
5134   2FD7             ; Shift GRPH values
5135   2FD7             kbdgraphshifted: ;7C75H
5136   2FD7 E0 EF FF 00 		.db   0E0H,0EFH,0FFH,000H
5137   2FDB 00 00 F6 F9 		.db   000H,000H,0F6H,0F9H,0EBH,0ECH,0EDH,0EEH
5137   2FDF EB EC ED EE 
5138   2FE3 FD FB F4 FA 		.db   0FDH,0FBH,0F4H,0FAH,0E7H,0E8H,0E9H,0EAH
5138   2FE7 E7 E8 E9 EA 
5139   2FEB FC FE F0 F3 		.db   0FCH,0FEH,0F0H,0F3H,0F2H,0F1H,07EH,0F5H
5139   2FEF F2 F1 7E F5 
5140   2FF3 00 F8 F7 00 		.db   000H,0F8H,0F7H,000H,0E1H,0E2H,0E3H,0E4H
5140   2FF7 E1 E2 E3 E4 
5141   2FFB E5 E6 00 00 		.db   0E5H,0E6H,000H,000H,000H,000H,07CH,000H
5141   2FFF 00 00 7C 00 
5142   3003             		
5143   3003             ; CODE values
5144   3003             kbdcode:  ;7CA1H
5145   3003 CE A1 A2 BD 		.db   0CEH,0A1H,0A2H,0BDH,000H,0CDH,000H,0CAH
5145   3007 00 CD 00 CA 
5146   300B B6 A9 BB 00 		.db   0B6H,0A9H,0BBH,000H,000H,000H,0CBH,0C9H
5146   300F 00 00 CB C9 
5147   3013 C8 00 C6 00 		.db   0C8H,000H,0C6H,000H,000H,0CCH,0B8H,0C7H
5147   3017 00 CC B8 C7 
5148   301B B7 AC B5 AD 		.db   0B7H,0ACH,0B5H,0ADH,0A0H,0BCH,0CFH,0AEH
5148   301F A0 BC CF AE 
5149   3023 C0 00 C1 00 		.db   0C0H,000H,0C1H,000H,000H,000H,0C4H,0C2H
5149   3027 00 00 C4 C2 
5150   302B C3 AF C5 BE 		.db   0C3H,0AFH,0C5H,0BEH
5151   302F             
5152   302F             ; Shift CODE values
5153   302F             kbdcodeshifted: ;7CCDH
5154   302F 00 DF AB DE 		.db   000H,0DFH,0ABH,0DEH
5155   3033 00 00 A5 DA 		.db   000H,000H,0A5H,0DAH,0B1H,0B9H,0D7H,0BFH
5155   3037 B1 B9 D7 BF 
5156   303B 00 00 DB D9 		.db   000H,000H,0DBH,0D9H,0D8H,000H,0D6H,0AAH
5156   303F D8 00 D6 AA 
5157   3043 BA DC B3 D5 		.db   0BAH,0DCH,0B3H,0D5H,0B2H,000H,000H,000H
5157   3047 B2 00 00 00 
5158   304B A4 DD 00 00 		.db   0A4H,0DDH,000H,000H,0D0H,000H,0D1H,000H
5158   304F D0 00 D1 00 
5159   3053 00 00 D4 D2 		.db   000H,000H,0D4H,0D2H,0D3H,0A6H,0A7H,0A8H
5159   3057 D3 A6 A7 A8 
5160   305B             
5161   305B             ; NUM LOCK values
5162   305B             kbdnum: ;7CF9H
5163   305B 6D 30 6A 31 		.db   06DH,030H,06AH,031H,06BH,032H,06CH,033H
5163   305F 6B 32 6C 33 
5164   3063 75 34 69 35 		.db   075H,034H,069H,035H,06FH,036H
5164   3067 6F 36 
5165   3069             
5166   3069             ; Special Key values (arrow, TAB, fKeys, etc.)
5167   3069             kbdspecial: ;7D07H
5168   3069 01 06       		.db   001H,006H
5169   306B 14 02 20 7F 		.db   014H,002H,020H,07FH,009H,01BH,08BH,088H
5169   306F 09 1B 8B 88 
5170   3073 8A 0D 80 81 		.db   08AH,00DH,080H,081H,082H,083H,084H,085H
5170   3077 82 83 84 85 
5171   307B 86 87       		.db   086H,087H
5172   307D             		
5173   307D             ; Shift special key values
5174   307D             kbdspecialshift: ;7D18H
5175   307D 1D 1C 1E 1F 		.db   01DH,01CH,01EH,01FH,020H,008H
5175   3081 20 08 
5176   3083 09 1B 8B 88 		.db   009H,01BH,08BH,088H,089H,00DH,080H,081H
5176   3087 89 0D 80 81 
5177   308B 82 83 84 85 		.db   082H,083H,084H,085H,086H,087H,051H,052H
5177   308F 86 87 51 52 
5178   3093 57 5A       		.db   057H,05AH	
5179   3095             
5180   3095              .end
5181   3095             ; ======================================================
5182   3095             ; External ROM detect image loaded at F605H
5183   3095             ; ======================================================
5184   3095             ;036FH  DB   3EH,01H,D3H,E8H,21H,40H,00H,11H  ; F605H - MVI A,01H;  OUT E8H; LXI H,0040H;  LXI D,FAA4H
5185   3095             ;0377H  DB   A4H,FAH,7EH,12H,23H,13H,7DH,D6H  ; F60DH - MVI A,M;    STAX D;  INX H; INX D; MOV A,L; SUI 48H
5186   3095             ;037FH  DB   48H,C2H,0FH,F6H,D3H,E8H,2AH,A4H  ; F515H - JNZ F60FH;  OUT E8H; LHLD FAA4H;   
5187   3095             ;0387H  DB   FAH,11H,54H,43H,C3H,18H,00H,F3H  ; F61DH - LXI D,4354H; JMP 0018H;     DI;
5188   3095             ;038FH  DB   3EH,01H,D3H,E8H,C7H,00H,01H,00H  ; F625H - MVI A,01H;  OUT E8H; RST 0
5189   3095             
5190   3095             ; ======================================================
5191   3095             ; RAM3 OPTROM Test Code 
5192   3095             ; ======================================================
5193   3095             optram3load:
5194   3095 3E 09       	.db 03EH,009H       ;MVI A,01H
5195   3097 D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5196   3099 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5197   309C 11 17 91    	.db 011H,017H,091H  ;LXI D,optram3open ; FAA4H       
5198   309F 7E          	.db 07EH            ;MOV A,M
5199   30A0 12          	.db 012H            ;STAX D
5200   30A1 23          	.db 023H            ;INX H
5201   30A2 13          	.db 013H       	    ;INX D
5202   30A3 7D          	.db 07DH            ;MOV A,L
5203   30A4 D6 48       	.db 0D6H,48H        ;SUI 48H
5204   30A6 C2 0A 91    	.db 0C2H,00AH,091H  ;JNZ optram3loop
5205   30A9 D3 E8               .db 0D3H,0E8H       ;OUT E8H
5206   30AB C9          	.db 0C9H	    ;RET
5207   30AC             
5208   30AC             ; ======================================================
5209   30AC             ; RAM2 OPTROM Test Code 
5210   30AC             ; ======================================================
5211   30AC             optram2load:
5212   30AC 3E 09       	.db 03EH,009H       ;MVI A,01H
5213   30AE D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5214   30B0 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5215   30B3 11 17 B1    	.db 011H,017H,0B1H  ;LXI D,optram2open ; FAA4H       
5216   30B6 7E          	.db 07EH            ;MOV A,M
5217   30B7 12          	.db 012H            ;STAX D
5218   30B8 23          	.db 023H            ;INX H
5219   30B9 13          	.db 013H       	    ;INX D
5220   30BA 7D          	.db 07DH            ;MOV A,L
5221   30BB D6 48       	.db 0D6H,48H        ;SUI 48H
5222   30BD C2 0A B1    	.db 0C2H,0AH,0B1H   ;JNZ optram2loop
5223   30C0 D3 E8           	.db 0D3H,0E8H       ;OUT E8H
5224   30C2 C9          	.db 0C9H	    ;RET
5225   30C3             
5226   30C3             ; ======================================================
5227   30C3             ; RAM1 OPTROM Test Code 
5228   30C3             ; ======================================================
5229   30C3             optram1load:
5230   30C3 3E 09       	.db 03EH,009H       ;MVI A,01H
5231   30C5 D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5232   30C7 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5233   30CA 11 17 D1    	.db 011H,017H,0D1H  ;LXI D,optram1open ; FAA4H       
5234   30CD 7E          	.db 07EH            ;MOV A,M
5235   30CE 12          	.db 012H            ;STAX D
5236   30CF 23          	.db 023H            ;INX H
5237   30D0 13          	.db 013H       		;INX D
5238   30D1 7D          	.db 07DH            ;MOV A,L
5239   30D2 D6 48       	.db 0D6H,48H        ;SUI 48H
5240   30D4 C2 0A D1    	.db 0C2H,0AH,0D1H   ;JNZ optram1loop
5241   30D7 D3 E8           .db 0D3H,0E8H       ;OUT E8H
5242   30D9 C9          	.db 0C9H	    ;RET
5243   30DA             :
5244   30DA             
5245   30DA             ; ======================================================
5246   30DA             ; RAM0 OPTROM Test Code 
5247   30DA             ; ======================================================
5248   30DA             optram0load:
5249   30DA 3E 09       	.db 03EH,09H        ;MVI A,01H
5250   30DC D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5251   30DE 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5252   30E1 11 17 F1    	.db 011H,017H,0F1H  ;LXI D,optram0open ; FAA4H       
5253   30E4 7E          	.db 07EH            ;MOV A,M
5254   30E5 12          	.db 012H            ;STAX D
5255   30E6 23          	.db 023H            ;INX H
5256   30E7 13          	.db 013H       		;INX D
5257   30E8 7D          	.db 07DH            ;MOV A,L
5258   30E9 D6 48       	.db 0D6H,48H        ;SUI 48H
5259   30EB C2 0A F1    	.db 0C2H,0AH,0F1H  ;JNZ optram0loop
5260   30EE D3 E8           .db 0D3H,0E8H       ;OUT E8H
5261   30F0 C9          	.db 0C9H            ;RET
5262   30F1             
5263   30F1             ; ======================================================
5264   30F1             ; The code below will appear in RAM it is here to generate
5265   30F1             ; the HEX code for the ROM to load into RAM when running. 
5266   30F1             ; ======================================================		
5267   30F1             ; ======================================================
5268   30F1             ; RAM3 OPTROM Test Code 
5269   30F1             ; ======================================================		
5270   9100             		.org ram3+1100H
5271   9100             optram3:
5272   9100 3E 09       		MVI A,09H;  
5273   9102 D3 E8       		OUT 0E8H; 
5274   9104 21 40 00    		LXI H,0040H;  
5275   9107 11 17 91    		LXI D,optram3open ; FAA4H
5276   910A             optram3loop:		
5277   910A 7E          		MOV A,M;   
5278   910B 12          		STAX D;  
5279   910C 23          		INX H; 
5280   910D 13          		INX D; 
5281   910E 7D          		MOV A,L; 
5282   910F D6 48       		SUI 48H
5283   9111 C2 0A 91    		JNZ optram3loop   ; F60FH;  
5284   9114 D3 E8       		OUT 0E8H; 
5285   9116 C9          		RET
5286   9117             optram3open:
5287   9117 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
5287   911B 00 00 00 00 
5288   911F             
5289   911F             ; ======================================================
5290   911F             ; RAM2 OPTROM Test Code 
5291   911F             ; ======================================================
5292   B100             		.org ram2+1100H
5293   B100             optram2:
5294   B100 3E 09       		MVI A,09H;  
5295   B102 D3 E8       		OUT 0E8H; 
5296   B104 21 40 00    		LXI H,0040H;  
5297   B107 11 17 B1    		LXI D,optram2open ; FAA4H
5298   B10A             optram2loop:		
5299   B10A 7E          		MOV A,M;   
5300   B10B 12          		STAX D;  
5301   B10C 23          		INX H; 
5302   B10D 13          		INX D; 
5303   B10E 7D          		MOV A,L; 
5304   B10F D6 48       		SUI 048H
5305   B111 C2 0A B1    		JNZ optram2loop   ; F60FH;  
5306   B114 D3 E8       		OUT 0E8H; 
5307   B116 C9          		RET
5308   B117             optram2open:
5309   B117 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
5309   B11B 00 00 00 00 
5310   B11F             
5311   B11F             ; ======================================================
5312   B11F             ; RAM1 OPTROM Test Code 
5313   B11F             ; ======================================================
5314   D100             		.org ram1+1100H
5315   D100             optram1:
5316   D100 3E 09       		MVI A,09H;  
5317   D102 D3 E8       		OUT 0E8H; 
5318   D104 21 40 00    		LXI H,0040H;  
5319   D107 11 17 D1    		LXI D,optram1open ; FAA4H
5320   D10A             optram1loop:		
5321   D10A 7E          		MOV A,M;   
5322   D10B 12          		STAX D;  
5323   D10C 23          		INX H; 
5324   D10D 13          		INX D; 
5325   D10E 7D          		MOV A,L; 
5326   D10F D6 48       		SUI 048H
5327   D111 C2 0A D1    		JNZ optram1loop   ; F60FH;  
5328   D114 D3 E8       		OUT 0E8H; 
5329   D116 C9          		RET
5330   D117             optram1open:
5331   D117 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
5331   D11B 00 00 00 00 
5332   D11F             
5333   D11F             ; ======================================================
5334   D11F             ; RAM0 OPTROM Test Code 
5335   D11F             ; ======================================================
5336   F100             		.org ram0+1100H
5337   F100             optram0:
5338   F100 3E 09       		MVI A,09H;  
5339   F102 D3 E8       		OUT 0E8H; 
5340   F104 21 40 00    		LXI H,0040H;  
5341   F107 11 17 F1    		LXI D,optram0open ; FAA4H
5342   F10A             optram0loop:		
5343   F10A 7E          		MOV A,M;   
5344   F10B 12          		STAX D;  
5345   F10C 23          		INX H; 
5346   F10D 13          		INX D; 
5347   F10E 7D          		MOV A,L; 
5348   F10F D6 48       		SUI 048H
5349   F111 C2 0A F1    		JNZ optram0loop   ; F60FH;  
5350   F114 D3 E8       		OUT 0E8H; 
5351   F116 C9          		RET
5352   F117             optram0open:
5353   F117 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
5353   F11B 00 00 00 00 
tasm: Number of errors = 0
