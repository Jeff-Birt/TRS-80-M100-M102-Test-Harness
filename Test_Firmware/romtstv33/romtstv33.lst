0001   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002   0000             ; $Id: ROMTST.asm $
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;
0005   0000             ;  ROM Test firmware for use with the ROM board V2.x.
0006   0000             ;  Uses the connection test board to complete the test harness.
0007   0000             ;  The use of an LCD dongle test board and keyboard loop back
0008   0000             ;  board can assist with debugging however they are not required.
0009   0000             ;
0010   0000             ;  Uses parts of the M100_dis_2013 data. The disassembly of the
0011   0000             ;  M100 ROM was invaluable in producing the test firmware. The 16-bit
0012   0000             ;  HEX number next to some routines can be used to reference into 
0013   0000             ;  the disassembly to help understanding of the reduced routines.
0014   0000             ;
0015   0000             ;  Created by IS on 12 Feb 2020.
0016   0000             ;  Updated: 
0017   0000             ;			10 Dec 2020 - V3.1. Added LCD Dongle and keyboard
0018   0000             ;			              Loopback board tests.
0019   0000             ;			22 Dec 2020 - V3.2. Improved fault detection on A14-A8 
0020   0000             ;						  RAM addresses.  
0021   0000             ;			10 Dec 2020 - V3.3. Added OPTROM Checksum
0022   0000             ;                         Fixed a couple of bugs
0023   0000             ;
0024   0000             ;  Copyright Â© 2020 Stardust. 
0025   0000             ;  All rights reserved.
0026   0000             ;  Commercial use prohibited
0027   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028   0000             ; TASM 
0029   0000             ; Processor: 8080/8085
0030   0000             ;
0031   0000             #DEFINE VERSION .text "V3.3" ; Change this value to update version
0032   0000             
0033   0000             ;===========================================================
0034   0000             ; Defined locations and constants
0035   0000             ; ==========================================================
0036   0000             ;Test Board Diagnostic LCD Settings
0037   0000             lcddata  .equ   0001H ;Display DATA shares ROM Address space
0038   0000             lcdins   .equ   0000H ;Display Control Register
0039   0000             lcdwake  .equ   30H   ;Wake up LCD
0040   0000             lcdfunc  .equ   38H   ;Set LCD 2 lines,0 5x7 Dots
0041   0000             ;lcdon    .equ   0FH   ;Set LCD on+Cursor+Blink
0042   0000             lcdon    .equ   0CH   ;Set LCD on no cursor
0043   0000             lcdmode  .equ   06H   ;LCD Mode
0044   0000             lcdclr   .equ   01H   ;Clear LCD
0045   0000             
0046   0000             ;RAM Location settings
0047   0000             ramstart .equ	08000H 
0048   0000             ramend	 .equ   0FFFFH
0049   0000             ram0   	 .equ   0E000H ; E7FFH, EFFFH, F7FFH ;E800H, F000H, F800H
0050   0000             ram1     .equ   0C000H ; C7FFH, CFFFH, D7FFH ;C800H, D000H, D800H
0051   0000             ram2	 .equ   0A000H ; A7FFH, AFFFH, B7FFH ;A800H, B000H, B800H
0052   0000             ram3     .equ 	08000H ; 87FFH, 8FFFH, 97FFH ;8800H, 9000H, 9800H
0053   0000             
0054   0000             ;I/O Port addresses
0055   0000             sysreg	 .equ   080H   ; Y0 System bus Sysreg
0056   0000             setreg	 .equ   081H   ; Y0 System bus ctlreg
0057   0000             lptreg	 .equ   082H   ; Y0 System bus lptreg
0058   0000             
0059   0000             teleIO   .equ   090H   ; Y1 Answering Telephone
0060   0000             modemIO	 .equ   0A0H   ; Y2 Modem control
0061   0000             
0062   0000             ;PIO registers
0063   0000             PIOCR	 .equ   0B0H   ; Y3 PIO Control Register B8H
0064   0000             PIOA	 .equ   0B1H   ; Y3 PIO Port A Register  B9H
0065   0000             PIOB	 .equ   0B2H   ; Y3 PIO Port B Register  BAH
0066   0000             PIOC	 .equ   0B3H   ; Y3 PIO Port C Register  BBH
0067   0000             PIOT1	 .equ   0B4H   ; Y3 PIO LSB Timer        BCH
0068   0000             PIOT2	 .equ   0B5H   ; Y3 PIO MSB Timer	    BDH
0069   0000             
0070   0000             UARTctrl .equ	0C0H   ; Y4 => 0xC0 - 0xCF  = UART Control
0071   0000             UARTread .equ	0C8H   ; Serial RX 
0072   0000             UARTsend .equ   0C8H   ; Serial TX
0073   0000             UARTmode .equ	0D8H   ; Y5 => 0xD0 - 0xDF  = Mode setting on UART
0074   0000             CtrlReg  .equ	0E8H   ; Y6 => 0xE0 - 0xEF  = Write to enable STROM and REMOTE, printer strobe and clock
0075   0000             readkbd  .equ	0E8H   ; Y6 => 0xE0 - 0xEF  = Read from Keyboard
0076   0000             scrins   .equ	0FEH   ; Y7 => 0xF0 - 0xFF  = Enable for LCD instructions, this is active HIGH
0077   0000             scrdata  .equ	0FFH   ; Y7 => 0xF0 - 0xFF  = Enable for LCD data, this is active HIGH
0078   0000             
0079   0000             		.org 0
0080   0000             ;===========================================================
0081   0000             ; Reset Vector
0082   0000             ; ==========================================================
0083   0000 C3 00 10    		JMP start      ; Start of test code
0084   0003             
0085   0003             ; ==========================================================
0086   0003             ; TRAP entry point
0087   0003             ; ==========================================================
0088   0024             		.org 24H
0089   0024 C3 40 24    		JMP trap      ; RAM vector for TRAP interrupt
0090   0027 00          		NOP
0091   0028             
0092   0028             ; ==========================================================
0093   0028             ; RST 5.5 -- Bar Code Reader
0094   0028             ; ==========================================================
0095   002C             		.org 2CH
0096   002C F3          		DI
0097   002D C3 E4 1D    		JMP bcrint    ; RST 5.5 RAM Vector	
0098   0030             	
0099   0030             ; ==========================================================
0100   0030             ; RST 6.5 -- RS232 character pending
0101   0030             ; ==========================================================
0102   0034             		.org 34H
0103   0034 F3          		DI
0104   0035 C3 E3 1B    		JMP serint    ; RST 6.5 routine (RS232 receive interrupt)
0105   0038             
0106   0038             ; ==========================================================
0107   0038             ; RST 7.5 -- Timer background task
0108   0038             ; ==========================================================
0109   003C             		.org 3CH
0110   003C F3          		DI
0111   003D C3 72 1A    		JMP timint      ; RST 7.5 interrupt routine
0112   0040             	
0113   0040             ; ==========================================================
0114   0040             ; Used to detect when the ROM switches. 
0115   0040             ; ==========================================================
0116   0040             		.org 040H
0117   0040             optromtext:
0118   0040 4E 6F 20 4F 		.text "No Optrom"
0118   0044 70 74 72 6F 
0118   0048 6D 
0119   0049 00          		.db 0
0120   004A             
0121   004A             ; ==========================================================
0122   004A             ; Copyright notices 
0123   004A             ; ==========================================================
0124   0F38                     .org 1000H - 200
0125   0F38             ;		.text "0123456789012345678901"
0126   0F38             ;		.text "0123456789ABCDEF"
0127   0F38             ;copyright notice
0128   0F38             copynotice:
0129   0F38             ;		.text "0123456789ABCDEF"
0130   0F38 20 20 52 4F 		.text "  ROM Test "
0130   0F3C 4D 20 54 65 
0130   0F40 73 74 20 
0131   0F43 56 33 2E 33 		VERSION
0132   0F47 00          		.db 0
0133   0F48 28 63 29 20 		.text "(c) IS  Feb 2021"
0133   0F4C 49 53 20 20 
0133   0F50 46 65 62 20 
0133   0F54 32 30 32 31 
0134   0F58 00          		.db 0
0135   0F59 4D 31 30 30 		.text "M100/102 ROM Test "
0135   0F5D 2F 31 30 32 
0135   0F61 20 52 4F 4D 
0135   0F65 20 54 65 73 
0135   0F69 74 20 
0136   0F6B 56 33 2E 33 		VERSION
0137   0F6F 00          		.db 0
0138   0F70 43 6F 70 79 		.text "Copyright IS Feb 2021"
0138   0F74 72 69 67 68 
0138   0F78 74 20 49 53 
0138   0F7C 20 46 65 62 
0138   0F80 20 32 30 32 
0138   0F84 31 
0139   0F85 00          		.db 0
0140   0F86             		
0141   0F86             ; **********************************************************
0142   0F86             ; Start of test code
0143   0F86             ; **********************************************************
0144   1000                     .org 1000h
0145   1000             start:
0146   1000 F3          		DI
0147   1001             		
0148   1001 3E 1F       		MVI A, 01FH   ; disable all interrupts
0149   1003 30          		SIM
0150   1004             
0151   1004 31 00 E0    		LXI SP,ram0   ; Set the SP = E000 just in case
0152   1007             		
0153   1007             		;Startup delay loop, taken from M100 ROM
0154   1007 21 10 27    		LXI H,2710H   ; Load 16-bit delay counter
0155   100A             wait1:
0156   100A 2B          		DCX H         ; Decrement delay counter: 6
0157   100B 7C          		MOV A,H       ; Test count for 0: 4
0158   100C B5          		ORA L         ; Test lower byte: 4
0159   100D C2 0A 10    		JNZ wait1     ; wait for zero count: 7 = 21cycles = 8.54us * 10000 = 86ms
0160   1010             
0161   1010             ; ==========================================================
0162   1010             ; Set up PIO just in case, use M100 ROM settings to configure
0163   1010             ; ==========================================================
0164   1010 3E 43       		MVI A,43H      ; Load configuration for PIO (A=OUT, B=OUT, C=IN, Stop Timer counter)
0165   1012 D3 B0       		OUT PIOCR      ; Set PIO chip configuration
0166   1014 3E EC       		MVI A,0ECH     ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=Modem, Keyscan col 9 enable)
0167   1016 D3 B2       		OUT PIOB       ; Set PIO chip port B configuration
0168   1018 3E FF       		MVI A,0FFH     ; PIO A configuration (Used for Key scan, LCD data, etc.)
0169   101A D3 B1       		OUT PIOA       ; Initialize PIO chip port A
0170   101C             
0171   101C 06 03       		MVI B, 3      ; Wake UP LCD 3 times	
0172   101E             
0173   101E             ; ==========================================================
0174   101E             ; Configure the diagnostic screen
0175   101E             ; 	Assumes no RAM is available until tested
0176   101E             ; ==========================================================
0177   101E             		; INIT diagnostic screen
0178   101E 21 00 00    		LXI H,lcdins  ; Load diagnostic LCD Instruction location
0179   1021             
0180   1021             lcdwakeup:
0181   1021             		;diagnostic LCD WAKEUP
0182   1021 36 30       		MVI M,lcdwake ; Wake up diagnostic LCD
0183   1023             		
0184   1023             		; Wait 1.1ms
0185   1023 0E FF       		MVI C,0FFH     ; Counter 255 	
0186   1025             delay1:
0187   1025 0D          		DCR C          ; Decrement C: 4
0188   1026 C2 25 10    		JNZ delay1     ; Loop until C = 0: 7 = 11 = 4.45us
0189   1029             
0190   1029 05          		DCR B
0191   102A C2 21 10    		JNZ lcdwakeup
0192   102D             
0193   102D             		;diagnostic LCD FUNCTION SET
0194   102D 36 38       		MVI M,lcdfunc   ; Function Set
0195   102F             
0196   102F             		; Wait 40us
0197   102F 0E 0A       		MVI C,10       ; Counter 10 	
0198   1031             delay2:
0199   1031 0D          		DCR C          ; Decrement C: 4
0200   1032 C2 31 10    		JNZ delay2     ; Loop until C = 0: 7 = 11 = 4.45us	
0201   1035             		
0202   1035             		;diagnostic LCD ON
0203   1035 36 0C       		MVI M,lcdon    ; LCD ON			
0204   1037             	
0205   1037             		; Wait 40us		
0206   1037 0E 0A       		MVI C,10       ; Counter 10 	
0207   1039             delay3:
0208   1039 0D          		DCR C          ; Decrement C: 4
0209   103A C2 39 10    		JNZ delay3     ; Loop until C = 0: 7 = 11 = 4.45us
0210   103D             
0211   103D             		;diagnostic LCD MODE
0212   103D 36 06       		MVI M,lcdmode  ; Set LCD mode
0213   103F             		
0214   103F             		; Wait 40us		
0215   103F 0E 0A       		MVI C,10      ; Counter 10 	
0216   1041             delay4:
0217   1041 0D          		DCR C          ; Decrement C: 4
0218   1042 C2 41 10    		JNZ delay4     ; Loop until C = 0: 7 = 11 = 4.45us
0219   1045             
0220   1045             
0221   1045             		;diagnostic LCD CLEAR
0222   1045 36 01       		MVI M,lcdclr   ; LCD Clear
0223   1047             	
0224   1047             		; Wait 1.64ms		
0225   1047             		; Wait 800us
0226   1047 06 02       		MVI B,2
0227   1049             delay5s
0228   1049 0E BE       		MVI C,190      ; Counter 190 	
0229   104B             delay5:
0230   104B 0D          		DCR C          ; Decrement C: 4
0231   104C C2 4B 10    		JNZ delay5     ; Loop until C = 0: 7 = 11 = 4.45us		
0232   104F             		
0233   104F 05          		DCR B
0234   1050 C2 49 10    		JNZ delay5s
0235   1053             
0236   1053             ; ==========================================================
0237   1053             ; Write 'CPU ' text to Diagnostic LCD
0238   1053             ; ==========================================================
0239   1053 3E 8D       		MVI A,08DH      ; Set Cursor to top RH corner
0240   1055 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
0241   1058             		; Wait 40us		
0242   1058 0E 0A       		MVI C,10        ; Counter 10 	
0243   105A             delay5a:
0244   105A 0D          		DCR C          ; Decrement C: 4
0245   105B C2 5A 10    		JNZ delay5a    ; Loop until C = 0: 7 = 11 = 4.45us
0246   105E             		
0247   105E 21 01 00    		LXI H,lcddata  ; Load LCD Data location
0248   1061 36 43       		MVI M,'C'      ; Load C to screen
0249   1063             		
0250   1063             		; Wait 40us		
0251   1063 0E 0A       		MVI C,10      ; Counter 10 	
0252   1065             delay6:
0253   1065 0D          		DCR C          ; Decrement C: 4
0254   1066 C2 65 10    		JNZ delay6    ; Loop until C = 0: 7 = 11 = 4.45us	
0255   1069             		
0256   1069 36 50       		MVI M,'P'      ; Load P to screen
0257   106B             		
0258   106B             		; Wait 40us		
0259   106B 0E 0A       		MVI C,10      ; Counter 10 	
0260   106D             delay7:
0261   106D 0D          		DCR C          ; Decrement C: 4
0262   106E C2 6D 10    		JNZ delay7    ; Loop until C = 0: 7 = 11 = 4.45us	
0263   1071             
0264   1071 36 55       		MVI M,'U'      ; Load P to screen
0265   1073             		
0266   1073             		; Wait 40us		
0267   1073 0E 0A       		MVI C,10      ; Counter 10 	
0268   1075             delay8:
0269   1075 0D          		DCR C          ; Decrement C: 4
0270   1076 C2 75 10    		JNZ delay8    ; Loop until C = 0: 7 = 11 = 4.45us			
0271   1079             
0272   1079 36 20       		MVI M,' '      ; Load space to screen
0273   107B             		
0274   107B             		; Wait 40us		
0275   107B 0E 0A       		MVI C,10      ; Counter 10 	
0276   107D             delay9:
0277   107D 0D          		DCR C          ; Decrement C: 4
0278   107E C2 7D 10    		JNZ delay9    ; Loop until C = 0: 7 = 11 = 4.45us	
0279   1081             		
0280   1081             
0281   1081             ; ==========================================================
0282   1081             ; Write 'RAM ?' text to Diagnostic LCD
0283   1081             ; ==========================================================
0284   1081 3E CC       		MVI A,0CCH      ; Set Cursor to bottom RH corner
0285   1083 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
0286   1086             		; Wait 40us		
0287   1086 0E 0A       		MVI C,10        ; Counter 10 	
0288   1088             delay9a:
0289   1088 0D          		DCR C          ; Decrement C: 4
0290   1089 C2 88 10    		JNZ delay9a    ; Loop until C = 0: 7 = 11 = 4.45us
0291   108C             		
0292   108C 21 01 00    		LXI H,lcddata  ; Load diagnostic LCD Data location
0293   108F 36 52       		MVI M,'R'      ; Load R to diagnostic screen
0294   1091             		
0295   1091             		; Wait 40us		
0296   1091 0E 0A       		MVI C,10      ; Counter 10 	
0297   1093             delay10:
0298   1093 0D          		DCR C          ; Decrement C: 4
0299   1094 C2 93 10    		JNZ delay10    ; Loop until C = 0: 7 = 11 = 4.45us	
0300   1097             		
0301   1097 36 41       		MVI M,'A'      ; Load A to diagnostic screen
0302   1099             		
0303   1099             		; Wait 40us		
0304   1099 0E 0A       		MVI C,10      ; Counter 10 	
0305   109B             delay11:
0306   109B 0D          		DCR C          ; Decrement C: 4
0307   109C C2 9B 10    		JNZ delay11    ; Loop until C = 0: 7 = 11 = 4.45us	
0308   109F             
0309   109F 36 4D       		MVI M,'M'      ; Load M to diagnostic screen
0310   10A1             		
0311   10A1             		; Wait 40us		
0312   10A1 0E 0A       		MVI C,10      ; Counter 10 	
0313   10A3             delay12:
0314   10A3 0D          		DCR C          ; Decrement C: 4
0315   10A4 C2 A3 10    		JNZ delay12    ; Loop until C = 0: 7 = 11 = 4.45us			
0316   10A7             
0317   10A7 36 3F       		MVI M,'?'      ; Load space to diagnostic screen
0318   10A9             		
0319   10A9             		; Wait 40us		
0320   10A9 0E 0A       		MVI C,10      ; Counter 10 	
0321   10AB             delay13:
0322   10AB 0D          		DCR C          ; Decrement C: 4
0323   10AC C2 AB 10    		JNZ delay13   ; Loop until C = 0: 7 = 11 = 4.45us
0324   10AF             
0325   10AF             ; ##########################################################
0326   10AF             ; ##########################################################		
0327   10AF             ; **********************************************************
0328   10AF             ; RAM TESTS
0329   10AF             ; 	Check each RAM bank
0330   10AF             ; 	Indicate which banks are present
0331   10AF             ; 	Test banks that exist by writing each byte.
0332   10AF             ; 	Indicate any failures
0333   10AF             ; 	Once tested use the stack as part of the testing 
0334   10AF             ;	if required
0335   10AF             ; **********************************************************
0336   10AF             ; Used in settings for the RAM tests
0337   10AF             goodmemch	.equ 'm' ; LC to make it more obvious
0338   10AF             badmemch  	.equ 'F' ; UC to make it stand out
0339   10AF             badpagech  	.equ 'H' ; UC to make it stand out
0340   10AF             backupch	.equ 'B'
0341   10AF             nobackupch	.equ '.'
0342   10AF             goodblock	.equ 'g'
0343   10AF             backupbyte	.equ 0AAH   ; Needs to be set to the last ram test byte
0344   10AF             
0345   10AF             ; ==============================================================
0346   10AF             ; Set up the cursor positions
0347   10AF             ; ==============================================================
0348   10AF 3E 80       		MVI A,080H      ; Set Cursor to top LH corner
0349   10B1 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
0350   10B4             		; Wait 40us				
0351   10B4 0E 0A       		MVI C,10        ; Counter 10 	
0352   10B6             delay14:
0353   10B6 0D          		DCR C          ; Decrement C: 4
0354   10B7 C2 B6 10    		JNZ delay14    ; Loop until C = 0: 7 = 11 = 4.45us
0355   10BA             		
0356   10BA             ; =============================================================
0357   10BA             ; TEST Set 1:
0358   10BA             ;   Is made up of 3 tests:
0359   10BA             ;   - Attempt to check the battery backup works.  Only works
0360   10BA             ;     on second attempt.
0361   10BA             ; 	- Test each memory location. Make sure it is OK.
0362   10BA             ;   - Test the first 256 bytes of the RAM to check A7-A0 address
0363   10BA             ;     lines for stuck faults.
0364   10BA             ; ==============================================================
0365   10BA             ; Example diagnostic screen layout
0366   10BA             ;		.text "0123456789ABCDEF"
0367   10BA             ;		.text ".mgg.mgg.mgg.Fgg" ; 080H
0368   10BA             ;		.text "mmmmmmmmmmmm1mmm" ; 0C0H
0369   10BA             
0370   10BA             ;33333333333333333333333333333
0371   10BA             ;*****************************
0372   10BA             ;*** Test RAM3	
0373   10BA             ;*****************************
0374   10BA             ;*** Test Battery Backup 3 ***
0375   10BA             ;*****************************
0376   10BA             ; Check for data retention from last run should contain 0AAH
0377   10BA 21 2C 81    		LXI H,ram3+300	 ; Standard RAM location 08064H	
0378   10BD             		
0379   10BD 7E          		MOV A,M
0380   10BE FE AA       		CPI backupbyte
0381   10C0 3E 2E       		MVI A,nobackupch
0382   10C2 C2 C7 10    		JNZ ramblktop3
0383   10C5 3E 42       		MVI A,backupch
0384   10C7             				
0385   10C7             ; Set HL to start of first RAM block location
0386   10C7             ramblktop3:
0387   10C7 32 01 00    		STA lcddata	
0388   10CA             
0389   10CA             ;*****************************
0390   10CA             ;*** Complete memory test 3 **	
0391   10CA             ;*****************************
0392   10CA 21 00 80    		LXI H,ram3		 ; Standard RAM location 08000H		
0393   10CD             								
0394   10CD             ramblktst3:
0395   10CD 11 FD 2A    		LXI D,ramtstdata ; Load the RAM byte test data table
0396   10D0             tstloc3:
0397   10D0 1A          		LDAX D   		 ; D = Current RAM byte test data
0398   10D1 FE FE       		CPI eotramtests  ; 0FEH Check end of table
0399   10D3 CA E0 10    		JZ nextloc3       
0400   10D6 77          		MOV M,A			 ; Write RAM location to table entry
0401   10D7 4E          		MOV C,M          ; Read RAM location
0402   10D8 B9          		CMP C		     ; Compare locations
0403   10D9 C2 F3 10    		JNZ tstfail3     ; Not equal RAM location failed
0404   10DC 13          		INX D            ; Get next RAM test byte
0405   10DD C3 D0 10    		JMP tstloc3      
0406   10E0             nextloc3:                ; Move to next RAM location to test
0407   10E0 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0408   10E1 7C          		MOV A,H          ; Check HL == 0
0409   10E2 FE A0       		CPI 0A0H         ; Compare next block
0410   10E4 CA EA 10    		JZ tstfin3       ; Finished testing
0411   10E7 C2 CD 10    		JNZ ramblktst3
0412   10EA             		
0413   10EA             tstfin3:
0414   10EA 3E 6D       		MVI A,goodmemch   ; Test OK
0415   10EC 31 00 90    		LXI SP,ram3+1000H ; Memory Block + 1000H
0416   10EF F5          		PUSH PSW          ; Put the goodmemch on the stack
0417   10F0 C3 F5 10    		JMP exitblk3
0418   10F3             tstfail3:
0419   10F3 3E 46       		MVI A,badmemch    ; Test Fail
0420   10F5             
0421   10F5             exitblk3:
0422   10F5 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0423   10F8             									
0424   10F8             ;*****************************
0425   10F8             ;*** First page RAM test 3 ***
0426   10F8             ;*****************************
0427   10F8 21 00 80    		LXI H,ram3	; Standard RAM location 08000H
0428   10FB AF          		XRA A
0429   10FC             
0430   10FC             ; Set up the first page
0431   10FC             fpramtst3init:
0432   10FC 3C          		INR A
0433   10FD 77          		MOV M,A		; Read the value
0434   10FE 2C          		INR L		; Next one in the list
0435   10FF C2 FC 10    		JNZ fpramtst3init   ; Keep going until done
0436   1102             
0437   1102             		; Wait see if memory retains contents
0438   1102 0E C8       		MVI C,200	
0439   1104             delayfp3:
0440   1104 0D          		DCR C          ; Decrement C: 4
0441   1105 C2 04 11    		JNZ delayfp3   ; Loop until C = 0: 7 = 11 = 4.45us
0442   1108             
0443   1108 21 00 80    		LXI H,ram3     ; Standard RAM location 08000H
0444   110B AF          		XRA A
0445   110C             
0446   110C             fpramtst3:		
0447   110C 3C          		INR A
0448   110D BE          		CMP M		; Compare with memory
0449   110E C2 1A 11    		JNZ fpramtst3fail 
0450   1111             
0451   1111 2C          		INR L		; Next one in the list
0452   1112 C2 0C 11    		JNZ fpramtst3   ; Keep going until done
0453   1115 3E 67       		MVI A,goodblock
0454   1117 C3 1C 11    		JMP fpramtst3exit ; Test complete
0455   111A             
0456   111A             fpramtst3fail:
0457   111A 3E 48       		MVI A,badpagech  
0458   111C             	
0459   111C             fpramtst3exit:
0460   111C 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0461   111F             		
0462   111F             ;*****************************
0463   111F             ;****** 256byte test 3 *******	
0464   111F             ;*****************************
0465   111F             ramloopstart3:
0466   111F 21 00 80    		LXI H,ram3		 ; Standard RAM location 08000H		
0467   1122             
0468   1122             ;Write test data to boundaries to check for SA Address lines
0469   1122 36 08       		MVI M,8         ; Set 1st Location to 8
0470   1124             				
0471   1124 23          		INX H           ; Address 1
0472   1125 36 07       		MVI M,7
0473   1127             				
0474   1127 21 02 80    		LXI H,ram3+002H ; Address 2
0475   112A 36 06       		MVI M,6
0476   112C             		
0477   112C 21 04 80    		LXI H,ram3+004H ; Address 4
0478   112F 36 05       		MVI M,5
0479   1131             		
0480   1131 21 08 80    		LXI H,ram3+008H ; Address 8
0481   1134 36 04       		MVI M,4
0482   1136             		
0483   1136 21 10 80    		LXI H,ram3+010H ; Address 16
0484   1139 36 03       		MVI M,3
0485   113B             		
0486   113B 21 20 80    		LXI H,ram3+020H ; Address 32
0487   113E 36 02       		MVI M,2
0488   1140             		
0489   1140 21 40 80    		LXI H,ram3+040H	; Address 64
0490   1143 36 01       		MVI M,1
0491   1145             		
0492   1145 21 80 80    		LXI H,ram3+080H ; Address 128
0493   1148 36 00       		MVI M,0
0494   114A             
0495   114A             ;Check the contents of the tested RAM		
0496   114A 21 00 80    		LXI H,ram3	; Standard RAM location 08000H		
0497   114D 3E 08       		MVI A,8
0498   114F             		
0499   114F BE          		CMP M       ; Compare first locations				
0500   1150 C2 96 11    		JNZ ramloop3testfail ; Test failed
0501   1153             
0502   1153 23          		INX H       ; Address 1		
0503   1154 3D          		DCR A
0504   1155 BE          		CMP M       ; Compare Address 1			
0505   1156 C2 96 11    		JNZ ramloop3testfail ; Test failed
0506   1159             
0507   1159 3D          		DCR A				
0508   115A 21 02 80    		LXI H,ram3+002H ; Address 2
0509   115D BE          		CMP M           ; Compare Address 2		
0510   115E C2 96 11    		JNZ ramloop3testfail ; Test failed
0511   1161             
0512   1161 3D          		DCR A				
0513   1162 21 04 80    		LXI H,ram3+004H ; Address 4
0514   1165 BE          		CMP M           ; Compare Address 4		
0515   1166 C2 96 11    		JNZ ramloop3testfail ; Test failed
0516   1169             		
0517   1169 3D          		DCR A				
0518   116A 21 08 80    		LXI H,ram3+008H ; Address 8
0519   116D BE          		CMP M           ; Compare Address 8	
0520   116E C2 96 11    		JNZ ramloop3testfail ; Test failed
0521   1171             		
0522   1171 3D          		DCR A				
0523   1172 21 10 80    		LXI H,ram3+010H ; Address 16
0524   1175 BE          		CMP M           ; Compare Address 16		
0525   1176 C2 96 11    		JNZ ramloop3testfail ; Test failed
0526   1179             		
0527   1179 3D          		DCR A				
0528   117A 21 20 80    		LXI H,ram3+020H ; Address 32
0529   117D BE          		CMP M           ; Compare Address 32		
0530   117E C2 96 11    		JNZ ramloop3testfail ; Test failed
0531   1181             		
0532   1181 3D          		DCR A				
0533   1182 21 40 80    		LXI H,ram3+040H ; Address 64
0534   1185 BE          		CMP M           ; Compare Address 64		
0535   1186 C2 96 11    		JNZ ramloop3testfail ; Test failed
0536   1189             		
0537   1189 3D          		DCR A				
0538   118A 21 80 80    		LXI H,ram3+080H ; Address 128
0539   118D BE          		CMP M           ; Compare Address 128		
0540   118E C2 96 11    		JNZ ramloop3testfail ; Test failed		
0541   1191             
0542   1191             		;Test successful
0543   1191 3E 67       		MVI A,goodblock		
0544   1193 C3 9C 11    		JMP ramloop3testend		
0545   1196             		
0546   1196             ramloop3testfail:
0547   1196 4F          		MOV C,A
0548   1197 3E 08       		MVI A,8
0549   1199 91          		SUB C
0550   119A C6 30       		ADI '0'  		
0551   119C             
0552   119C             ramloop3testend:
0553   119C 32 01 00    		STA lcddata
0554   119F             
0555   119F             
0556   119F             		; Wait 40us				
0557   119F 0E 0A       		MVI C,10        ; Counter 10 	
0558   11A1             delayr3:
0559   11A1 0D          		DCR C          ; Decrement C: 4
0560   11A2 C2 A1 11    		JNZ delayr3    ; Loop until C = 0: 7 = 11 = 4.45us	
0561   11A5             
0562   11A5             ;22222222222222222222222222222
0563   11A5             ;*****************************
0564   11A5             ;*** Test RAM2	
0565   11A5             ;*****************************
0566   11A5             ;*** Test Battery Backup 2 ***
0567   11A5             ;*****************************
0568   11A5             ; Check for data retention from last run should contain 0AAH
0569   11A5 21 2C A1    		LXI H,ram2+300	 ; Standard RAM location 0A064H	
0570   11A8             		
0571   11A8 7E          		MOV A,M
0572   11A9 FE AA       		CPI backupbyte
0573   11AB 3E 2E       		MVI A,nobackupch
0574   11AD C2 B2 11    		JNZ ramblktop2
0575   11B0 3E 42       		MVI A,backupch
0576   11B2             					
0577   11B2             ; Set HL to start of highest memory location
0578   11B2             ramblktop2:
0579   11B2 32 01 00    		STA lcddata	
0580   11B5             
0581   11B5             ;*****************************
0582   11B5             ;*** Complete memory test 2 **	
0583   11B5             ;*****************************
0584   11B5 21 00 A0    		LXI H,ram2		 ; Standard RAM location 0A000H
0585   11B8             ramblktst2:
0586   11B8 11 FD 2A    		LXI D,ramtstdata ; Load the RAM byte test data table
0587   11BB             tstloc2:
0588   11BB 1A          		LDAX D   		 ; D = Current RAM byte test data
0589   11BC FE FE       		CPI eotramtests  ; 0FEH Check end of table
0590   11BE CA CB 11    		JZ nextloc2       
0591   11C1 77          		MOV M,A		 ; Write RAM location to table entry
0592   11C2 4E          		MOV C,M          ; Read RAM location
0593   11C3 B9          		CMP C		 ; Compare locations
0594   11C4 C2 DE 11    		JNZ tstfail2   	 ; Not equal RAM location failed
0595   11C7 13          		INX D            ; Get next RAM test byte
0596   11C8 C3 BB 11    		JMP tstloc2       
0597   11CB             nextloc2:                ; Move to next RAM location to test
0598   11CB 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0599   11CC 7C          		MOV A,H          ; Check HL == 0
0600   11CD FE C0       		CPI 0C0H         ; Compare next block
0601   11CF CA D5 11    		JZ tstfin2       ; Finished testing
0602   11D2 C2 B8 11    		JNZ ramblktst2
0603   11D5             		
0604   11D5             tstfin2:
0605   11D5 3E 6D       		MVI A,goodmemch  ; Test OK
0606   11D7 31 00 B0    		LXI SP,ram2+1000H; Top Memory Block + 10
0607   11DA F5          		PUSH PSW         ; Put the 'M' on the stack
0608   11DB C3 E0 11    		JMP exitblk2
0609   11DE             tstfail2:
0610   11DE 3E 46       		MVI A,badmemch   ; Test Fail
0611   11E0             
0612   11E0             exitblk2:
0613   11E0 32 01 00    		STA lcddata    	 ; Load RAM # to screen	
0614   11E3             
0615   11E3             ;*****************************
0616   11E3             ;*** First page RAM test 2 ***
0617   11E3             ;*****************************
0618   11E3 21 00 A0    		LXI H,ram2	; Standard RAM location 0A000H
0619   11E6 AF          		XRA A
0620   11E7             
0621   11E7             ; Set up the first page
0622   11E7             fpramtst2init:
0623   11E7 3C          		INR A
0624   11E8 77          		MOV M,A		; Read the value
0625   11E9 2C          		INR L		; Next one in the list
0626   11EA C2 E7 11    		JNZ fpramtst2init   ; Keep going until done
0627   11ED             
0628   11ED 0E C8       		MVI C,200	
0629   11EF             delayfp2:
0630   11EF 0D          		DCR C          ; Decrement C: 4
0631   11F0 C2 EF 11    		JNZ delayfp2   ; Loop until C = 0: 7 = 11 = 4.45us
0632   11F3             
0633   11F3 21 00 A0    		LXI H,ram2    ; Standard RAM location 0A000H
0634   11F6 AF          		XRA A
0635   11F7             
0636   11F7             fpramtst2:		
0637   11F7 3C          		INR A
0638   11F8 BE          		CMP M		; Compare with memory
0639   11F9 C2 05 12    		JNZ fpramtst2fail 
0640   11FC             
0641   11FC 2C          		INR L		; Next one in the list
0642   11FD C2 F7 11    		JNZ fpramtst2   ; Keep going until done
0643   1200 3E 67       		MVI A,goodblock
0644   1202 C3 07 12    		JMP fpramtst2exit ; Test complete
0645   1205             
0646   1205             fpramtst2fail:
0647   1205 3E 48       		MVI A,badpagech  
0648   1207             	
0649   1207             fpramtst2exit:
0650   1207 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0651   120A             						    
0652   120A             ;*****************************
0653   120A             ;******* 256byte test 2 ******	
0654   120A             ;*****************************
0655   120A 21 00 A0    		LXI H,ram2	; Standard RAM location 0A000H		
0656   120D             
0657   120D             ;Write test data to boundaries to check for SA Address lines
0658   120D 36 08       		MVI M,8     ; Clear first location
0659   120F             				
0660   120F 23          		INX H           ; Address 1
0661   1210 36 07       		MVI M,7
0662   1212             				
0663   1212 21 02 A0    		LXI H,ram2+002H ; Address 2
0664   1215 36 06       		MVI M,6
0665   1217             		
0666   1217 21 04 A0    		LXI H,ram2+004H ; Address 4
0667   121A 36 05       		MVI M,5
0668   121C             		
0669   121C 21 08 A0    		LXI H,ram2+008H ; Address 8
0670   121F 36 04       		MVI M,4
0671   1221             		
0672   1221 21 10 A0    		LXI H,ram2+010H ; Address 16
0673   1224 36 03       		MVI M,3
0674   1226             		
0675   1226 21 20 A0    		LXI H,ram2+020H ; Address 32
0676   1229 36 02       		MVI M,2
0677   122B             		
0678   122B 21 40 A0    		LXI H,ram2+040H	; Address 64
0679   122E 36 01       		MVI M,1
0680   1230             		
0681   1230 21 80 A0    		LXI H,ram2+080H ; Address 128
0682   1233 36 00       		MVI M,0
0683   1235             
0684   1235             ;Check the contents of the tested RAM		
0685   1235 21 00 A0    		LXI H,ram2	; Standard RAM location 0A000H		
0686   1238 3E 08       		MVI A,8
0687   123A             		
0688   123A BE          		CMP M       ; Compare first locations				
0689   123B C2 81 12    		JNZ ramloop2testfail ; Test failed
0690   123E             
0691   123E 23          		INX H       ; Address 1		
0692   123F 3D          		DCR A
0693   1240 BE          		CMP M       ; Compare Address 1			
0694   1241 C2 81 12    		JNZ ramloop2testfail ; Test failed
0695   1244             
0696   1244 3D          		DCR A				
0697   1245 21 02 A0    		LXI H,ram2+002H ; Address 2
0698   1248 BE          		CMP M           ; Compare Address 2		
0699   1249 C2 81 12    		JNZ ramloop2testfail ; Test failed
0700   124C             
0701   124C 3D          		DCR A				
0702   124D 21 04 A0    		LXI H,ram2+004H ; Address 4
0703   1250 BE          		CMP M           ; Compare Address 4		
0704   1251 C2 81 12    		JNZ ramloop2testfail ; Test failed
0705   1254             		
0706   1254 3D          		DCR A				
0707   1255 21 08 A0    		LXI H,ram2+008H ; Address 8
0708   1258 BE          		CMP M           ; Compare Address 8	
0709   1259 C2 81 12    		JNZ ramloop2testfail ; Test failed
0710   125C             		
0711   125C 3D          		DCR A				
0712   125D 21 10 A0    		LXI H,ram2+010H ; Address 16
0713   1260 BE          		CMP M           ; Compare Address 16		
0714   1261 C2 81 12    		JNZ ramloop2testfail ; Test failed
0715   1264             		
0716   1264 3D          		DCR A				
0717   1265 21 20 A0    		LXI H,ram2+020H ; Address 32
0718   1268 BE          		CMP M           ; Compare Address 32		
0719   1269 C2 81 12    		JNZ ramloop2testfail ; Test failed
0720   126C             		
0721   126C 3D          		DCR A				
0722   126D 21 40 A0    		LXI H,ram2+040H ; Address 64
0723   1270 BE          		CMP M           ; Compare Address 64		
0724   1271 C2 81 12    		JNZ ramloop2testfail ; Test failed
0725   1274             		
0726   1274 3D          		DCR A				
0727   1275 21 80 A0    		LXI H,ram2+080H ; Address 128
0728   1278 BE          		CMP M           ; Compare Address 128		
0729   1279 C2 81 12    		JNZ ramloop2testfail ; Test failed		
0730   127C             
0731   127C             		;Test successful
0732   127C 3E 67       		MVI A,goodblock		
0733   127E C3 87 12    		JMP ramloop2testend		
0734   1281             		
0735   1281             ramloop2testfail:
0736   1281 4F          		MOV C,A
0737   1282 3E 08       		MVI A,8
0738   1284 91          		SUB C
0739   1285 C6 30       		ADI '0'  		
0740   1287             
0741   1287             ramloop2testend:
0742   1287 32 01 00    		STA lcddata	
0743   128A             
0744   128A             		; Wait 40us				
0745   128A 0E 0A       		MVI C,10        ; Counter 10 	
0746   128C             delayr2:
0747   128C 0D          		DCR C          ; Decrement C: 4
0748   128D C2 8C 12    		JNZ delayr2    ; Loop until C = 0: 7 = 11 = 4.45us
0749   1290             
0750   1290             ;11111111111111111111111111111
0751   1290             ;*****************************
0752   1290             ;*** Test RAM1
0753   1290             ;*****************************
0754   1290             ;*** Test Battery Backup 1 ***
0755   1290             ;*****************************
0756   1290             ; Check for data retention from last run should contain 0AAH
0757   1290 21 2C C1    		LXI H,ram1+300	 ; Standard RAM location 0C064H	
0758   1293             		
0759   1293 7E          		MOV A,M
0760   1294 FE AA       		CPI backupbyte
0761   1296 3E 2E       		MVI A,nobackupch
0762   1298 C2 9D 12    		JNZ ramblktop1
0763   129B 3E 42       		MVI A,backupch
0764   129D             					
0765   129D             ; Set HL to start of highest memory location
0766   129D             ramblktop1:
0767   129D 32 01 00    		STA lcddata	
0768   12A0             		
0769   12A0             ;*****************************
0770   12A0             ;*** Complete memory test 1 **	
0771   12A0             ;*****************************
0772   12A0 21 00 C0    		LXI H,ram1		 ; Standard RAM location 0C000H
0773   12A3             		
0774   12A3             ramblktst1:
0775   12A3 11 FD 2A    		LXI D,ramtstdata ; Load the RAM byte test data table
0776   12A6             tstloc1:
0777   12A6 1A          		LDAX D   		 ; D = Current RAM byte test data
0778   12A7 FE FE       		CPI eotramtests  ; 0FEH Check end of table
0779   12A9 CA B6 12    		JZ nextloc1       
0780   12AC 77          		MOV M,A			 ; Write RAM location to table entry
0781   12AD 4E          		MOV C,M          ; Read RAM location
0782   12AE B9          		CMP C			 ; Compare locations
0783   12AF C2 C9 12    		JNZ tstfail1   	 ; Not equal RAM location failed
0784   12B2 13          		INX D            ; Get next RAM test byte
0785   12B3 C3 A6 12    		JMP tstloc1       
0786   12B6             nextloc1:                ; Move to next RAM location to test
0787   12B6 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0788   12B7 7C          		MOV A,H          ; Check HL == 0
0789   12B8 FE E0       		CPI 0E0H         ; Compare next block
0790   12BA CA C0 12    		JZ tstfin1       ; Finished testing
0791   12BD C2 A3 12    		JNZ ramblktst1
0792   12C0             		
0793   12C0             tstfin1:
0794   12C0 3E 6D       		MVI A,goodmemch  	; Test OK
0795   12C2 31 00 D0    		LXI SP,ram1+1000H	; Top Memory Block + 10
0796   12C5 F5          		PUSH PSW         	; Put the 'X' on the stack
0797   12C6 C3 CB 12    		JMP exitblk1
0798   12C9             tstfail1:
0799   12C9 3E 46       		MVI A,badmemch   ; Test Fail
0800   12CB             
0801   12CB             exitblk1:
0802   12CB 32 01 00    		STA lcddata    	 ; Load RAM # to screen		
0803   12CE 0E 0A       		MVI C,10         ; Counter 10 	
0804   12D0             delaybl11:
0805   12D0 0D          		DCR C            ; Decrement C: 4
0806   12D1 C2 D0 12    		JNZ delaybl11    ; Loop until C = 0: 7 = 11 = 4.45us	
0807   12D4             
0808   12D4             ;*****************************
0809   12D4             ;*** First page RAM test 1 ***
0810   12D4             ;*****************************
0811   12D4 21 00 C0    		LXI H,ram1	; Standard RAM location 0C000H
0812   12D7 AF          		XRA A
0813   12D8             
0814   12D8             ; Set up the first page
0815   12D8             fpramtst1init:
0816   12D8 3C          		INR A
0817   12D9 77          		MOV M,A		; Read the value
0818   12DA 2C          		INR L		; Next one in the list
0819   12DB C2 D8 12    		JNZ fpramtst1init   ; Keep going until done
0820   12DE             
0821   12DE 0E C8       		MVI C,200	
0822   12E0             delayfp1:
0823   12E0 0D          		DCR C          ; Decrement C: 4
0824   12E1 C2 E0 12    		JNZ delayfp1   ; Loop until C = 0: 7 = 11 = 4.45us
0825   12E4             
0826   12E4 21 00 C0    		LXI H,ram1    ; Standard RAM location 0C000H
0827   12E7 AF          		XRA A
0828   12E8             
0829   12E8             fpramtst1:		
0830   12E8 3C          		INR A
0831   12E9 BE          		CMP M		; Compare with memory
0832   12EA C2 F6 12    		JNZ fpramtst1fail 
0833   12ED             
0834   12ED 2C          		INR L		    ; Next one in the list
0835   12EE C2 E8 12    		JNZ fpramtst1   ; Keep going until done
0836   12F1 3E 67       		MVI A,goodblock
0837   12F3 C3 F8 12    		JMP fpramtst1exit ; Test complete
0838   12F6             
0839   12F6             fpramtst1fail:
0840   12F6 3E 48       		MVI A,badpagech  
0841   12F8             	
0842   12F8             fpramtst1exit:
0843   12F8 32 01 00    		STA lcddata    	 ; Load RAM # to screen
0844   12FB             		
0845   12FB             ;*****************************
0846   12FB             ;****** 256byte test 1 *******	
0847   12FB             ;*****************************
0848   12FB 21 00 C0    		LXI H,ram1		 ; Standard RAM location 0C000H		
0849   12FE             
0850   12FE             ;Write test data to boundaries to check for SA Address lines
0851   12FE 36 08       		MVI M,8     ; Clear first location
0852   1300             				
0853   1300 23          		INX H           ; Address 1
0854   1301 36 07       		MVI M,7
0855   1303             				
0856   1303 21 02 C0    		LXI H,ram1+002H ; Address 2
0857   1306 36 06       		MVI M,6
0858   1308             		
0859   1308 21 04 C0    		LXI H,ram1+004H ; Address 4
0860   130B 36 05       		MVI M,5
0861   130D             		
0862   130D 21 08 C0    		LXI H,ram1+008H ; Address 8
0863   1310 36 04       		MVI M,4
0864   1312             		
0865   1312 21 10 C0    		LXI H,ram1+010H ; Address 16
0866   1315 36 03       		MVI M,3
0867   1317             		
0868   1317 21 20 C0    		LXI H,ram1+020H ; Address 32
0869   131A 36 02       		MVI M,2
0870   131C             		
0871   131C 21 40 C0    		LXI H,ram1+040H	; Address 64
0872   131F 36 01       		MVI M,1
0873   1321             		
0874   1321 21 80 C0    		LXI H,ram1+080H ; Address 128
0875   1324 36 00       		MVI M,0
0876   1326             
0877   1326             ;Check the contents of the tested RAM		
0878   1326 21 00 C0    		LXI H,ram1	; Standard RAM location 0C000H		
0879   1329 3E 08       		MVI A,8
0880   132B             		
0881   132B BE          		CMP M       ; Compare first locations				
0882   132C C2 72 13    		JNZ ramloop1testfail ; Test failed
0883   132F             
0884   132F 23          		INX H       ; Address 1		
0885   1330 3D          		DCR A
0886   1331 BE          		CMP M       ; Compare Address 1			
0887   1332 C2 72 13    		JNZ ramloop1testfail ; Test failed
0888   1335             
0889   1335 3D          		DCR A				
0890   1336 21 02 C0    		LXI H,ram1+002H ; Address 2
0891   1339 BE          		CMP M           ; Compare Address 2		
0892   133A C2 72 13    		JNZ ramloop1testfail ; Test failed
0893   133D             
0894   133D 3D          		DCR A				
0895   133E 21 04 C0    		LXI H,ram1+004H ; Address 4
0896   1341 BE          		CMP M           ; Compare Address 4		
0897   1342 C2 72 13    		JNZ ramloop1testfail ; Test failed
0898   1345             		
0899   1345 3D          		DCR A				
0900   1346 21 08 C0    		LXI H,ram1+008H ; Address 8
0901   1349 BE          		CMP M           ; Compare Address 8	
0902   134A C2 72 13    		JNZ ramloop1testfail ; Test failed
0903   134D             		
0904   134D 3D          		DCR A				
0905   134E 21 10 C0    		LXI H,ram1+010H ; Address 16
0906   1351 BE          		CMP M           ; Compare Address 16		
0907   1352 C2 72 13    		JNZ ramloop1testfail ; Test failed
0908   1355             		
0909   1355 3D          		DCR A				
0910   1356 21 20 C0    		LXI H,ram1+020H ; Address 32
0911   1359 BE          		CMP M           ; Compare Address 32		
0912   135A C2 72 13    		JNZ ramloop1testfail ; Test failed
0913   135D             		
0914   135D 3D          		DCR A				
0915   135E 21 40 C0    		LXI H,ram1+040H ; Address 64
0916   1361 BE          		CMP M           ; Compare Address 64		
0917   1362 C2 72 13    		JNZ ramloop1testfail ; Test failed
0918   1365             		
0919   1365 3D          		DCR A				
0920   1366 21 80 C0    		LXI H,ram1+080H ; Address 128
0921   1369 BE          		CMP M           ; Compare Address 128		
0922   136A C2 72 13    		JNZ ramloop1testfail ; Test failed		
0923   136D             
0924   136D             		;Test successful
0925   136D 3E 67       		MVI A,goodblock		
0926   136F C3 78 13    		JMP ramloop1testend		
0927   1372             		
0928   1372             ramloop1testfail:
0929   1372 4F          		MOV C,A
0930   1373 3E 08       		MVI A,8
0931   1375 91          		SUB C
0932   1376 C6 30       		ADI '0'  		
0933   1378             
0934   1378             ramloop1testend:
0935   1378 32 01 00    		STA lcddata	
0936   137B             
0937   137B             		; Wait 40us				
0938   137B 0E 0A       		MVI C,10        ; Counter 10 	
0939   137D             delayr1:
0940   137D 0D          		DCR C          ; Decrement C: 4
0941   137E C2 7D 13    		JNZ delayr1    ; Loop until C = 0: 7 = 11 = 4.45us
0942   1381             
0943   1381             ;00000000000000000000000000000
0944   1381             ;*****************************
0945   1381             ;*** RAM 0
0946   1381             ;*****************************
0947   1381             ;*** Test Battery Backup 0 ***
0948   1381             ;*****************************
0949   1381             ; Check for data retention from last run should contain 0AAH		
0950   1381 21 2C E1    		LXI H,ram0+300	 ; Standard RAM location 0E064H	
0951   1384             		
0952   1384 7E          		MOV A,M
0953   1385 FE AA       		CPI backupbyte
0954   1387 3E 2E       		MVI A,nobackupch
0955   1389 C2 8E 13    		JNZ ramblktop
0956   138C 3E 42       		MVI A,backupch
0957   138E             
0958   138E             ; Set HL to start of highest memory location
0959   138E             ramblktop:
0960   138E 32 01 00    		STA lcddata
0961   1391             
0962   1391             ;*****************************
0963   1391             ;*** Complete memory test 0 **
0964   1391             ;*****************************
0965   1391 21 00 E0    		LXI H,ram0   ; Standard RAM location 0E000H	
0966   1394             ramblktst:
0967   1394 11 FD 2A    		LXI D,ramtstdata ; Load the RAM byte test data table
0968   1397             tstloc:
0969   1397 1A          		LDAX D   	     ; D = Current RAM byte test data
0970   1398 FE FE       		CPI eotramtests  ;0FEH Check end of table
0971   139A CA A7 13    		JZ nextloc       
0972   139D 77          		MOV M,A			 ; Write RAM location to table entry
0973   139E 4E          		MOV C,M          ; Read RAM location
0974   139F B9          		CMP C			 ; Compare locations
0975   13A0 C2 BA 13    		JNZ tstfail   	 ; Not equal RAM location failed
0976   13A3 13          		INX D            ; Get next RAM test byte
0977   13A4 C3 97 13    		JMP tstloc       
0978   13A7             nextloc:                 ; Move to next RAM location to test
0979   13A7 23          		INX H            ; Addr++ count will rollover from 0FFFFH
0980   13A8 7C          		MOV A,H          ; Check HL == 0
0981   13A9 FE 00       		CPI 0H
0982   13AB CA B1 13    		JZ tstfin        ; Finished testing if HL == 0
0983   13AE C2 94 13    		JNZ ramblktst
0984   13B1             		
0985   13B1             tstfin:
0986   13B1 3E 6D       		MVI A,goodmemch   ; Test OK
0987   13B3 31 00 F0    		LXI SP,ram0+1000H ; Top Memory Block + 1000H
0988   13B6 F5          		PUSH PSW          ; Put the char on the stack
0989   13B7 C3 BC 13    		JMP exitblk
0990   13BA             tstfail:
0991   13BA 3E 46       		MVI A,badmemch    ; Test Fail
0992   13BC             
0993   13BC             exitblk:
0994   13BC 32 01 00    		STA lcddata    	 ; Load RAM # to screen	
0995   13BF             	
0996   13BF             ;*****************************
0997   13BF             ;*** First page RAM test 0 ***
0998   13BF             ;*****************************
0999   13BF 21 00 E0    		LXI H,ram0	; Standard RAM location 0E000H
1000   13C2 AF          		XRA A
1001   13C3             
1002   13C3             ; Set up the first page
1003   13C3             fpramtst0init:
1004   13C3 3C          		INR A
1005   13C4 77          		MOV M,A		; Read the value
1006   13C5 2C          		INR L		; Next one in the list
1007   13C6 C2 C3 13    		JNZ fpramtst0init   ; Keep going until done
1008   13C9             
1009   13C9 0E C8       		MVI C,200	
1010   13CB             delayfp0:
1011   13CB 0D          		DCR C          ; Decrement C: 4
1012   13CC C2 CB 13    		JNZ delayfp0   ; Loop until C = 0: 7 = 11 = 4.45us
1013   13CF             
1014   13CF 21 00 E0    		LXI H,ram0    ; Standard RAM location 0E000H
1015   13D2 AF          		XRA A
1016   13D3             
1017   13D3             fpramtst0:		
1018   13D3 3C          		INR A
1019   13D4 BE          		CMP M		; Compare with memory
1020   13D5 C2 E1 13    		JNZ fpramtst0fail 
1021   13D8             
1022   13D8 2C          		INR L			; Next one in the list
1023   13D9 C2 D3 13    		JNZ fpramtst0   ; Keep going until done
1024   13DC 3E 67       		MVI A,goodblock
1025   13DE C3 E3 13    		JMP fpramtst0exit ; Test complete
1026   13E1             
1027   13E1             fpramtst0fail:
1028   13E1 3E 48       		MVI A,badpagech  
1029   13E3             	
1030   13E3             fpramtst0exit:
1031   13E3 32 01 00    		STA lcddata    	 ; Load RAM # to screen
1032   13E6             
1033   13E6             ;*****************************
1034   13E6             ;******* 256byte test 0 ******	
1035   13E6             ;*****************************
1036   13E6 21 00 E0    		LXI H,ram0		 ; Standard RAM location 0E000H		
1037   13E9             
1038   13E9             ;Write test data to boundaries to check for SA Address lines
1039   13E9 36 08       		MVI M,8         ; Clear first location
1040   13EB             				
1041   13EB 23          		INX H           ; Address 1
1042   13EC 36 07       		MVI M,7
1043   13EE             				
1044   13EE 21 02 E0    		LXI H,ram0+002H ; Address 2
1045   13F1 36 06       		MVI M,6
1046   13F3             		
1047   13F3 21 04 E0    		LXI H,ram0+004H ; Address 4
1048   13F6 36 05       		MVI M,5
1049   13F8             		
1050   13F8 21 08 E0    		LXI H,ram0+008H ; Address 8
1051   13FB 36 04       		MVI M,4
1052   13FD             		
1053   13FD 21 10 E0    		LXI H,ram0+010H ; Address 16
1054   1400 36 03       		MVI M,3
1055   1402             		
1056   1402 21 20 E0    		LXI H,ram0+020H ; Address 32
1057   1405 36 02       		MVI M,2
1058   1407             		
1059   1407 21 40 E0    		LXI H,ram0+040H	; Address 64
1060   140A 36 01       		MVI M,1
1061   140C             		
1062   140C 21 80 E0    		LXI H,ram0+080H ; Address 128
1063   140F 36 00       		MVI M,0
1064   1411             
1065   1411             ;Check the contents of the tested RAM		
1066   1411 21 00 E0    		LXI H,ram0	; Standard RAM location 0E000H		
1067   1414 3E 08       		MVI A,8
1068   1416             		
1069   1416 BE          		CMP M       ; Compare first locations				
1070   1417 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1071   141A             
1072   141A 23          		INX H       ; Address 1		
1073   141B 3D          		DCR A
1074   141C BE          		CMP M       ; Compare Address 1			
1075   141D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1076   1420             
1077   1420 3D          		DCR A				
1078   1421 21 02 E0    		LXI H,ram0+002H ; Address 2
1079   1424 BE          		CMP M           ; Compare Address 2		
1080   1425 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1081   1428             
1082   1428 3D          		DCR A				
1083   1429 21 04 E0    		LXI H,ram0+004H ; Address 4
1084   142C BE          		CMP M           ; Compare Address 4		
1085   142D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1086   1430             		
1087   1430 3D          		DCR A				
1088   1431 21 08 E0    		LXI H,ram0+008H ; Address 8
1089   1434 BE          		CMP M           ; Compare Address 8	
1090   1435 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1091   1438             		
1092   1438 3D          		DCR A				
1093   1439 21 10 E0    		LXI H,ram0+010H ; Address 16
1094   143C BE          		CMP M           ; Compare Address 16		
1095   143D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1096   1440             		
1097   1440 3D          		DCR A				
1098   1441 21 20 E0    		LXI H,ram0+020H ; Address 32
1099   1444 BE          		CMP M           ; Compare Address 32		
1100   1445 C2 5D 14    		JNZ ramloop0testfail ; Test failed
1101   1448             		
1102   1448 3D          		DCR A				
1103   1449 21 40 E0    		LXI H,ram0+040H ; Address 64
1104   144C BE          		CMP M           ; Compare Address 64		
1105   144D C2 5D 14    		JNZ ramloop0testfail ; Test failed
1106   1450             		
1107   1450 3D          		DCR A				
1108   1451 21 80 E0    		LXI H,ram0+080H ; Address 128
1109   1454 BE          		CMP M           ; Compare Address 128		
1110   1455 C2 5D 14    		JNZ ramloop0testfail ; Test failed		
1111   1458             
1112   1458             		;Test successful
1113   1458 3E 67       		MVI A,goodblock		
1114   145A C3 63 14    		JMP ramloop0testend		
1115   145D             		
1116   145D             ramloop0testfail:
1117   145D 4F          		MOV C,A
1118   145E 3E 08       		MVI A,8
1119   1460 91          		SUB C
1120   1461 C6 30       		ADI '0'  		
1121   1463             
1122   1463             ramloop0testend:
1123   1463 32 01 00    		STA lcddata	
1124   1466             
1125   1466 0E 0A       		MVI C,10       ; Counter 10 	
1126   1468             delayr0:
1127   1468 0D          		DCR C          ; Decrement C: 4
1128   1469 C2 68 14    		JNZ delayr0    ; Loop until C = 0: 7 = 11 = 4.45us
1129   146C             
1130   146C             ; ==============================================================
1131   146C             ; TEST 2:
1132   146C             ;  Write to each individual 256 block, make sure the block
1133   146C             ;  is correctly selected.  May also show the RAM is bad.
1134   146C             ;  This will test address lines A14-A8 = 128 blocks.
1135   146C             ;  The Address lines A10-A8 are directly attached to the chip
1136   146C             ;  and can be identified as to the part they are identified as
1137   146C             ;  LKJ when failing.  
1138   146C             ;  The Address lines A14-A11 are  indirectly used to access the RAMs 
1139   146C             ;  via decoders.  Consequently if these lines fail they are limited
1140   146C             ;  to the failed CE.
1141   146C             ;  The char 'm' is used to indicate a passing block.
1142   146C             ;  The test will stop on the first block to fail in the 2K RAM
1143   146C             ;  block.
1144   146C             ; ==============================================================	
1145   146C 3E C0       		MVI A,0C0H      ; Set Cursor to bottom LH corner
1146   146E 32 00 00    		STA lcdins      ; diagnostic  LCD Instruction
1147   1471             
1148   1471 0E 0A       		MVI C,10       ; Counter 10 	
1149   1473             delay14a:
1150   1473 0D          		DCR C          ; Decrement C: 4
1151   1474 C2 73 14    		JNZ delay14a   ; Loop until C = 0: 7 = 11 = 4.45us
1152   1477             							
1153   1477 21 00 80    		LXI H,ramstart  ; Start of RAM
1154   147A             ;		LXI SP,800H     ; 2K Blocks
1155   147A             ;		MVI D,16        ; Number of banks to test 16 for 2K blocks
1156   147A 31 00 01    		LXI SP,100H     ; 256byte Blocks this will store 128 numbers in the RAM
1157   147D 16 80       		MVI D,128       ; Number of banks to test = 128 * 256 = 32K
1158   147F             						; 
1159   147F AF          		XRA A           ; Clear A
1160   1480             		
1161   1480             ; Set up the RAM banks with unique numbers to check indvidual CS- lines
1162   1480             ramloop:
1163   1480 3C          		INR A           ; 
1164   1481 77          		MOV M,A
1165   1482 39          		DAD SP          ; Add on preset block size to get the next block
1166   1483 15          		DCR D
1167   1484 C2 80 14    		JNZ ramloop     ; 
1168   1487             
1169   1487 21 00 80    		LXI H,ramstart  ; Start of RAM
1170   148A             ;		MVI D,16        ; Number of banks to test
1171   148A             ;		MVI D,128       ; Number of banks to test
1172   148A AF          		XRA A           ; Clear A
1173   148B             	
1174   148B             ; Test the ram banks CS- lines are working correctly
1175   148B             ; Print M if correct or the numeric location of the failing
1176   148B             ; RAM chip Address line.
1177   148B             	
1178   148B             ramloop128:
1179   148B 3C          		INR A           ; Increment A
1180   148C 5F          		MOV E,A         ; Move RAM byte to E
1181   148D BE          		CMP M
1182   148E C2 A2 14    		JNZ ramfail
1183   1491 E6 07       		ANI 007H        ; See if this is the end of the 2K RAM block
1184   1493 FE 07       		CPI 007H        ;
1185   1495 7B          		MOV A,E
1186   1496 C2 F1 14    		JNZ contloop    ; Next location
1187   1499 3E 6D       		MVI A,goodmemch  ; Char for diag LCD to indicate 2K RAM block is OK
1188   149B 32 01 00    		STA lcddata
1189   149E 7B          		MOV A,E
1190   149F C3 EB 14    		JMP prtdelay
1191   14A2             
1192   14A2             ramfail:
1193   14A2 E6 07       		ANI 7          ; Get the Address that failed
1194   14A4             		
1195   14A4             ;IF 2,3 or 5 then A8, A9, A10 = JKL
1196   14A4             ;IF 1 then need to SUB 1 /8 and add 1 to give CE line		
1197   14A4 FE 01       		CPI 1
1198   14A6 CA CC 14    		JZ idchipenable  ; Check if CE- Failure.
1199   14A9 FE 02       		CPI 2            ; Check for A8
1200   14AB C2 B3 14    		JNZ nextaddr
1201   14AE 3E 4A       		MVI A,'J'   
1202   14B0 C3 DF 14    		JMP sendtodiag
1203   14B3             		
1204   14B3             nextaddr:
1205   14B3 FE 03       		CPI 3            ; Check for A9
1206   14B5 C2 BD 14    		JNZ nextaddr1
1207   14B8 3E 4B       		MVI A,'K'   
1208   14BA C3 DF 14    		JMP sendtodiag
1209   14BD             		
1210   14BD             nextaddr1:
1211   14BD FE 05       		CPI 5            ; Check for A10
1212   14BF C2 C7 14    		JNZ nextaddr2
1213   14C2 3E 4C       		MVI A,'L'   
1214   14C4 C3 DF 14    		JMP sendtodiag
1215   14C7             
1216   14C7             nextaddr2:		
1217   14C7 3E 3F       		MVI A,'?'        ; Unkown memory fault could be dual failure
1218   14C9 C3 DF 14    		JMP sendtodiag
1219   14CC             				
1220   14CC             ;ID the failed chip enable:1 - F
1221   14CC             idchipenable:
1222   14CC 7B          		MOV A,E        ; Retrieve the failing address ID
1223   14CD DE 01       		SBI 1          ; Subtract 1
1224   14CF 1F          		RAR
1225   14D0 1F          		RAR
1226   14D1 1F          		RAR            ; Divide by 8
1227   14D2 C6 01       		ADI 1          ; Add 1 to give CEx value
1228   14D4             
1229   14D4             ;Print out HEX value of Chip Enable
1230   14D4 E6 0F       		ANI 00FH 		; Get Bottom Digit
1231   14D6 FE 0A       		CPI 0AH 		; A > 10
1232   14D8 DA DD 14    		JC  hexdigit 	
1233   14DB C6 07       		ADI 07H 	    ; Add 7 as this is A-F
1234   14DD             hexdigit: 
1235   14DD C6 30       		ADI 30H
1236   14DF             
1237   14DF             sendtodiag:
1238   14DF 32 01 00    		STA lcddata    ; Print character
1239   14E2 7C          		MOV A,H        ; Skip the 2K RAM block as it failed
1240   14E3 F6 07       		ORI 007H       
1241   14E5 67          		MOV H,A
1242   14E6 7B          		MOV A,E        ; Restore test number
1243   14E7 E6 F8       		ANI 0F8H       ; Increment to next 2K RAM block
1244   14E9 C6 08       		ADI 008H
1245   14EB             
1246   14EB             prtdelay:
1247   14EB 0E 0A       		MVI C,10       ; Counter 10 	
1248   14ED             delay15:
1249   14ED 0D          		DCR C          ; Decrement C: 4
1250   14EE C2 ED 14    		JNZ delay15    ; Loop until C = 0: 7 = 11 = 4.45us	
1251   14F1             
1252   14F1             contloop:	
1253   14F1 39          		DAD SP
1254   14F2 FE 80       		CPI 128
1255   14F4 C2 8B 14    		JNZ ramloop128
1256   14F7             
1257   14F7             ; ==============================================================				
1258   14F7             ; Now pick a RAM module to use for the next set of tests. 
1259   14F7             ; ==============================================================
1260   14F7             ramcheck:
1261   14F7 31 FE EF    		LXI SP,ram0+1000H - 2 ; Module 0				
1262   14FA F1          		POP PSW	
1263   14FB FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1264   14FD 3E 30       		MVI A,'0'
1265   14FF 11 94 33    		LXI D,optram0load
1266   1502 CA 32 15    		JZ ramfnd
1267   1505             
1268   1505 31 FE CF    		LXI SP,ram1+1000H - 2 ; Module 1				
1269   1508 F1          		POP PSW			
1270   1509 FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1271   150B 3E 31       		MVI A,'1'
1272   150D 11 20 33    		LXI D,optram1load
1273   1510 CA 32 15    		JZ ramfnd
1274   1513             						
1275   1513 31 FE AF    		LXI SP,ram2+1000H - 2; Module 2				
1276   1516 F1          		POP PSW			
1277   1517 FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1278   1519 3E 32       		MVI A,'2'
1279   151B 11 AC 32    		LXI D,optram2load
1280   151E CA 32 15    		JZ ramfnd		
1281   1521             
1282   1521 31 FE 8F    		LXI SP,ram3+1000H -2 ; Module 3				
1283   1524 F1          		POP PSW			
1284   1525 FE 6D       		CPI goodmemch     ; If successful RAM block is OK
1285   1527 3E 33       		MVI A,'3'		
1286   1529 11 38 32    		LXI D,optram3load
1287   152C CA 32 15    		JZ ramfnd
1288   152F             
1289   152F C3 04 24    		JMP cpuhlt      ; No useful RAM
1290   1532             
1291   1532             ; SP is now set up with valid RAM location	
1292   1532             ramfnd:
1293   1532 CD 7D 24    		CALL stromlocation ; Temp use this location to store A for later use
1294   1535 77          		MOV M,A
1295   1536             	
1296   1536             ;DUMP OPTROM CODE - DEBUG ROUTINE
1297   1536             ; Uncomment next two lines to use
1298   1536             ; Requires operational RAM 0
1299   1536             ;	   LXI SP,ram0+1000H     ; Set up the stackpointer
1300   1536             ;      CALL dumpromrun		
1301   1536             ;DUMP OPTROM CODE - DEBUG ROUTINE
1302   1536             		
1303   1536             ;Insert OPTROM Detect Code into selected RAM Block	
1304   1536 21 00 00    		LXI H,0
1305   1539 39          		DAD SP
1306   153A 01 00 01    		LXI B,100H
1307   153D 2E 00       		MVI L,0
1308   153F 09          		DAD B           ; HL points to Free RAM
1309   1540 EB          		XCHG            ; DE = Free RAM, HL = Code to load	
1310   1541 06 74       		MVI B,size      ; Number of bytes to move
1311   1543 CD EB 24    		CALL movemem    ; B bytes to (DE) from (HL)
1312   1546             	
1313   1546             		;Finish the ram tests		
1314   1546 CD A8 25    		CALL diagscreenpause	
1315   1549 CD 87 25    		CALL clrscreen
1316   154C             
1317   154C 3E 80       		MVI A,080H     ; Set diag screen cursor to home
1318   154E CD 2A 25    		CALL putins    ; Send to the diag screen			
1319   1551             
1320   1551             ; Set the STROM Resgister Location = 0	
1321   1551 CD 7D 24    		CALL stromlocation
1322   1554             		
1323   1554 7E          		MOV A,M        ; Recover A
1324   1555 CD 1F 25    		CALL putch     ; Print out the selected RAM block
1325   1558             		
1326   1558 3E 20       		MVI A,' '
1327   155A CD 1F 25    		CALL putch
1328   155D             		
1329   155D             		; Reset location to 0
1330   155D AF          		XRA A
1331   155E 77          		MOV M,A
1332   155F D3 E8       		OUT CtrlReg
1333   1561             
1334   1561             ; Set the countdown timer for the RST 7.5 interrupt					
1335   1561 CD 70 24    		CALL getcountdown
1336   1564 36 D7       		MVI M,0D7H
1337   1566             				
1338   1566             		;JMP lcdtest   ; Next test, used for debugging test code
1339   1566 C3 69 15    		JMP piotest   ; Next test
1340   1569             
1341   1569             ; ##########################################################
1342   1569             ; ##########################################################
1343   1569             ; **********************************************************
1344   1569             ; Test PIO 81C55
1345   1569             ;	Write to the PIO registers and read back. 
1346   1569             ;	
1347   1569             ; **********************************************************
1348   1569             piotest:
1349   1569 21 E2 25    		LXI H,piostr   ; Output test name
1350   156C CD 35 25    		CALL putstr
1351   156F             
1352   156F             		; Setup the Control Register
1353   156F             ;		MVI A,43H      ; Load configuration for PIO (A=OUT, B=OUT, C=IN, Stop Timer counter)
1354   156F             ;		OUT PIOCR      ; Set PIO chip configuration
1355   156F             
1356   156F             ; ==========================================================
1357   156F             ; Test Port A write RAM test data
1358   156F             ; ==========================================================
1359   156F 21 FD 2A    		LXI H,piotstdata ; Reuse RAM byte test data table
1360   1572             tstpioa:
1361   1572 7E          		MOV A,M          ; H = Current RAM byte test data
1362   1573 FE FE       		CPI 0FEH         ; Check end of table
1363   1575 CA 84 15    		JZ tstpioaok       
1364   1578 D3 B1       		OUT PIOA	     ; Write to PIOA Register
1365   157A DB B1       		IN  PIOA         ; Read PIOA location
1366   157C BE          		CMP M		     ; Compare locations
1367   157D C2 89 15    		JNZ tstpioafail  ; Not equal RAM location failed
1368   1580 23          		INX H            ; Get next RAM test byte
1369   1581 C3 72 15    		JMP tstpioa       
1370   1584             		
1371   1584             tstpioaok:
1372   1584 3E 41       		MVI A,'A'  	 ; Test OK
1373   1586 C3 8B 15    		JMP exitpioa
1374   1589             tstpioafail:
1375   1589 3E 46       		MVI A,'F'        ; Test Fail
1376   158B             exitpioa:
1377   158B 57          		MOV D,A          ; Save status of test
1378   158C CD 1F 25    		CALL putch
1379   158F             
1380   158F             		;Set the LPT test register it might work
1381   158F 3E 83       		MVI A,083H       ;Set the BCR, BUSY and BUSY- bits high
1382   1591 D3 B1       		OUT PIOA
1383   1593             
1384   1593 AF          		XRA A
1385   1594 F6 02       		ORI 02H
1386   1596 D3 E8       		OUT CtrlReg 	 ; E8H
1387   1598 AF          		XRA A
1388   1599 D3 E8       		OUT CtrlReg 	 ; E8H		
1389   159B             	
1390   159B             ; ==========================================================
1391   159B             ; Test Port B write RAM test data do not test power off
1392   159B             ; ==========================================================
1393   159B 21 FD 2A    		LXI H,piotstdata ; Reuse the RAM byte test data table
1394   159E             tstpiob:
1395   159E 7E          		MOV A,M   	     ; H = Current RAM test byte  data
1396   159F FE FE       		CPI 0FEH         ; Check end of table
1397   15A1 CA B3 15    		JZ tstpiobok 
1398   15A4 E6 EF       		ANI 0EFH         ; No power off  
1399   15A6 5F          		MOV E,A        
1400   15A7 D3 B2       		OUT PIOB         ; Write to PIOB Register
1401   15A9 DB B2       		IN  PIOB         ; Read PIOB location		
1402   15AB BB          		CMP E		     ; Compare locations
1403   15AC C2 B8 15    		JNZ tstpiobfail  ; Not equal RAM location failed
1404   15AF 23          		INX H            ; Get next RAM test byte
1405   15B0 C3 9E 15    		JMP tstpiob       
1406   15B3             		
1407   15B3             tstpiobok:
1408   15B3 3E 42       		MVI A,'B'  	 ; Test OK
1409   15B5 C3 BA 15    		JMP exitpiob
1410   15B8             tstpiobfail:
1411   15B8 3E 46       		MVI A,'F'        ; Test Fail
1412   15BA             exitpiob:
1413   15BA CD 1F 25    		CALL putch		
1414   15BD             
1415   15BD 3E E4       		MVI A,0E4H       ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=RS232, Keyscan col 9 enable)
1416   15BF D3 B2       		OUT PIOB         ; Set PIO chip port B configuration	
1417   15C1             
1418   15C1             ; ==========================================================
1419   15C1             ; Check for Port A or B Failure. 
1420   15C1             ; Jump to REMOTE test on failure.
1421   15C1             ; ==========================================================
1422   15C1             		;Check for failure of PIO B		
1423   15C1 FE 46       		CPI 'F'
1424   15C3 CA EA 15    		JZ piofail
1425   15C6             		
1426   15C6             		;Check for failure of PIO A	
1427   15C6 7A          		MOV A,D
1428   15C7 FE 46       		CPI 'F'
1429   15C9 CA EA 15    		JZ piofail
1430   15CC             		
1431   15CC 3E FF       		MVI A,0FFH      ; PIO A configuration (Used for Key scan, LCD data, etc.)
1432   15CE D3 B1       		OUT PIOA        ; Initialize PIO chip port A			        
1433   15D0              
1434   15D0             ; ==========================================================
1435   15D0             ; Check PIO C
1436   15D0             ; Ignore modem bits and serial port bits - tested in serial test
1437   15D0             ; ==========================================================      
1438   15D0             tstpioc:        
1439   15D0 DB B3       		IN PIOC     	; Check PIO chip port C
1440   15D2 E6 06       		ANI 006H        ; Ignore top bits they will be tested with the serial port. Modem will not be tested.
1441   15D4 FE 06       		CPI 006H        ; 0x06 magic port C read
1442   15D6 C2 EA 15    		JNZ piofail
1443   15D9 3E 43       		MVI A,'C'  	; Test OK
1444   15DB CD 1F 25    		CALL putch
1445   15DE             	
1446   15DE             ;		MVI A,'L'
1447   15DE             ;		OUT PIOT1
1448   15DE             ;		IN  PIOT1
1449   15DE             ;	CALL putch
1450   15DE             ;		CPI 'L'
1451   15DE             ;		JNZ piofail
1452   15DE             ;		MVI A,'1'  		; Test OK
1453   15DE             ;		CALL putch
1454   15DE             ;
1455   15DE             ;		MVI A,'H'
1456   15DE             ;		OUT PIOT2
1457   15DE             ;		IN  PIOT2
1458   15DE             ;	CALL putch
1459   15DE             ;		CPI 'H'
1460   15DE             ;		JNZ piofail
1461   15DE             ;		MVI A,'2'  		; Test OK
1462   15DE             ;		CALL putch
1463   15DE             
1464   15DE             piotestdone:	
1465   15DE 21 CA 25    		LXI H,passstr
1466   15E1 CD 35 25    		CALL putstr
1467   15E4             
1468   15E4 CD A8 25    		CALL diagscreenpause
1469   15E7             	
1470   15E7 C3 2C 16    		JMP chklcd     ; Test the M100/102 main LCD
1471   15EA             	
1472   15EA             ; ==========================================================
1473   15EA             ; PIO Fail
1474   15EA             ; If either PIO registers fail test flow needs to change
1475   15EA             ; ========================================================== 		
1476   15EA             piofail:		
1477   15EA 21 D0 25    		LXI H,piofailstr
1478   15ED CD 35 25    		CALL putstr	
1479   15F0             		
1480   15F0             ;Write and read the A & B locations
1481   15F0             ;Print to the bottom of the screen
1482   15F0 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1483   15F2 CD 2A 25    		CALL putins
1484   15F5             
1485   15F5             ; Test the PIO A register		
1486   15F5 AF          		XRA A
1487   15F6 CD 55 25    		CALL prthex
1488   15F9             		
1489   15F9 D3 B1       		OUT PIOA
1490   15FB DB B1       		IN PIOA
1491   15FD             		
1492   15FD CD 55 25    		CALL prthex
1493   1600             		
1494   1600 3E FF       		MVI A,0FFH
1495   1602             		
1496   1602 CD 55 25    		CALL prthex
1497   1605             		
1498   1605 D3 B1       		OUT PIOA
1499   1607 DB B1       		IN PIOA
1500   1609             		
1501   1609 CD 55 25    		CALL prthex		
1502   160C             
1503   160C             ; Test the PIO B register	
1504   160C             
1505   160C AF          		XRA A	
1506   160D CD 55 25    		CALL prthex
1507   1610             		
1508   1610 D3 B2       		OUT PIOB
1509   1612 DB B2       		IN PIOB
1510   1614             		
1511   1614 CD 55 25    		CALL prthex
1512   1617             		
1513   1617 3E EF       		MVI A,0EFH  ; Might accidentally power off the board!!!
1514   1619             		
1515   1619 CD 55 25    		CALL prthex
1516   161C             		
1517   161C D3 B2       		OUT PIOB
1518   161E DB B2       		IN PIOB
1519   1620             				
1520   1620 CD 55 25    		CALL prthex			
1521   1623 CD A8 25    		CALL diagscreenpause
1522   1626             
1523   1626 C3 11 1E    		JMP stromtestpiofail
1524   1629             		;CALL buzzer     ; Test the buzzer now the PIO is working		
1525   1629 C3 04 24    		JMP cpuhlt      ; Stop here for now
1526   162C             
1527   162C             ; ##########################################################
1528   162C             ; ##########################################################
1529   162C             ; **********************************************************
1530   162C             ; Screen Verification
1531   162C             ;  Determine if real screen or test dongle
1532   162C             ; **********************************************************
1533   162C             ; Write 00 to PIOA to set CS20-CS27 to 0 
1534   162C             ; Set the data register with 00H this will set the dongle to ins1
1535   162C             ; Read Instruction register 1 should be 00H 
1536   162C             
1537   162C             chklcd:
1538   162C AF          		XRA A  		   ; Set PIO A port to 0, this sets CSx lines	
1539   162D D3 B1       		OUT PIOA	
1540   162F             	
1541   162F D3 FF       		OUT scrdata ; Set the data portion to 0, sets D0 if dongle
1542   1631 DB FE       		IN scrins
1543   1633             		
1544   1633 FE 00       		CPI 0
1545   1635 C2 85 17    		JNZ lcdtest ; If not 0 then real LCD is present	
1546   1638             					; else continue test using dongle
1547   1638             					
1548   1638             ; **********************************************************
1549   1638             ; Test Screen dongle
1550   1638             ;  Test the LCD interface using the LCD test dongle.
1551   1638             ;  Dongle contains registers to perform loopbacks of the data
1552   1638             ;  connector bus.  The test also checks the individual CSx
1553   1638             ;  lines to the LCD memory chips.
1554   1638             ;      Data Read - LCD  scrdata (test Data) 0FFH
1555   1638             ;      Inst Read - LCD  scrins  (test CSx)  0FEH
1556   1638             ; 
1557   1638             ;  There are two Inst registers that are selected by D0
1558   1638             ;  of the data register.  
1559   1638             ;  
1560   1638             ; **********************************************************
1561   1638             dongletest:
1562   1638 CD 87 25    		CALL clrscreen  ; Clear the diag screen
1563   163B             
1564   163B 3E 80       		MVI A,080H      ; Set Cursor to top line
1565   163D CD 2A 25    		CALL putins
1566   1640             		
1567   1640 21 0A 26    		LXI H,donglestrdata ; Indicate this is a dongle test
1568   1643 CD 35 25    		CALL putstr
1569   1646             	
1570   1646             ; ==========================================================
1571   1646             ; Test data lines to LCD screen, AD0-AD7
1572   1646             ; ==========================================================
1573   1646 21 FD 2A    		LXI H,dongletestdata ; Reuse RAM byte test data table
1574   1649             		
1575   1649             tstdongle:
1576   1649 7E          		MOV A,M          ; H = Current RAM byte test data
1577   164A FE FE       		CPI 0FEH         ; Check end of table
1578   164C CA 5B 16    		JZ tstdongleok       
1579   164F D3 FF       		OUT scrdata	     ; Write to LCD Data Register
1580   1651 DB FF       		IN  scrdata      ; Read LCD Data register
1581   1653 BE          		CMP M		     ; Compare locations
1582   1654 C2 64 16    		JNZ tstdonglefail; Not equal location failed
1583   1657 23          		INX H            ; Get next RAM test byte
1584   1658 C3 49 16    		JMP tstdongle  
1585   165B             		
1586   165B             tstdongleok:
1587   165B 21 CA 25    		LXI H,passstr    ; Output PASS to diag LCD
1588   165E CD 35 25    		CALL putstr      ; Indicate LCD Data bus pass
1589   1661 C3 8A 16    		JMP dongletestend
1590   1664             			
1591   1664             tstdonglefail:
1592   1664 F5          		PUSH PSW         ; Save the failing data
1593   1665 E5          		PUSH H
1594   1666             		
1595   1666 21 D0 25    		LXI H,dongledatafail ; Output FAIL to diag LCD
1596   1669 CD 35 25    		CALL putstr
1597   166C             		
1598   166C 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1599   166E CD 2A 25    		CALL putins
1600   1671             		
1601   1671 21 3E 26    		LXI H,donglestrstat ; Output WR RD text to diag LCD
1602   1674 CD 35 25    		CALL putstr		
1603   1677             
1604   1677 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
1605   1679 CD 2A 25    		CALL putins
1606   167C             		
1607   167C             		; Print the data written
1608   167C E1          		POP H         ; Retrieve the data written
1609   167D 7E          		MOV A,M        						
1610   167E CD 55 25    		CALL prthex
1611   1681             
1612   1681 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
1613   1683 CD 2A 25    		CALL putins				
1614   1686             		
1615   1686             		; Print out Read value
1616   1686 F1          		POP PSW        ; Retrieve the data read
1617   1687 CD 55 25    		CALL prthex
1618   168A             
1619   168A             dongletestend:		
1620   168A CD A8 25    		CALL diagscreenpause 	;Delay to allow review
1621   168D             
1622   168D             ; ==========================================================
1623   168D             ; Test CSx lines to LCD screen, CS20-27 label as INS1
1624   168D             ; ==========================================================				
1625   168D             dongletestins:		
1626   168D             		;MVI A,0
1627   168D             		;OUT scrdata     ; Set to read instruction register 1
1628   168D             
1629   168D CD 87 25    		CALL clrscreen		
1630   1690 21 16 26    		LXI H,donglestrins1 ; Indicate this is a dongle test
1631   1693 CD 35 25    		CALL putstr
1632   1696             			
1633   1696 21 FD 2A    		LXI H,dongletestdata ; Reuse RAM byte test data table	
1634   1699             tstdongleins:
1635   1699 7E          		MOV A,M          ; H = Current RAM byte test data
1636   169A FE FE       		CPI 0FEH         ; Check end of table
1637   169C CA AB 16    		JZ tstdongleinsok       
1638   169F D3 B1       		OUT PIOA	     ; Write to PIOA Register
1639   16A1 DB FE       		IN  scrins       ; Read the lower instruction register
1640   16A3 BE          		CMP M		     ; Compare locations
1641   16A4 C2 B4 16    		JNZ tstdongleinsfail  ; Not equal RAM location failed
1642   16A7 23          		INX H            ; Get next RAM test byte
1643   16A8 C3 99 16    		JMP tstdongleins  
1644   16AB             
1645   16AB             tstdongleinsok:
1646   16AB 21 CA 25    		LXI H,passstr ; Output PASS to diag LCD
1647   16AE CD 35 25    		CALL putstr         ; Indicate Data bus pass
1648   16B1 C3 DA 16    		JMP dongletestinsend
1649   16B4             			
1650   16B4             tstdongleinsfail:
1651   16B4 F5          		PUSH PSW         ; Save the failing data
1652   16B5 E5          		PUSH H
1653   16B6             		
1654   16B6 21 D0 25    		LXI H,dongledatafail ; Output FAIL to diag LCD
1655   16B9 CD 35 25    		CALL putstr
1656   16BC             		
1657   16BC 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1658   16BE CD 2A 25    		CALL putins
1659   16C1             		
1660   16C1 21 3E 26    		LXI H,donglestrstat ; Output WR RD text to diag LCD
1661   16C4 CD 35 25    		CALL putstr		
1662   16C7             
1663   16C7 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
1664   16C9 CD 2A 25    		CALL putins
1665   16CC             		
1666   16CC             		; Print the data written
1667   16CC E1          		POP H          ; Retrieve the data written
1668   16CD 7E          		MOV A,M        						
1669   16CE CD 55 25    		CALL prthex
1670   16D1             
1671   16D1 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
1672   16D3 CD 2A 25    		CALL putins				
1673   16D6             		
1674   16D6             		; Print out Read value
1675   16D6 F1          		POP PSW        ; Retrieve the data read
1676   16D7 CD 55 25    		CALL prthex
1677   16DA             
1678   16DA             dongletestinsend:		
1679   16DA CD A8 25    		CALL diagscreenpause 	;Delay to allow review
1680   16DD             
1681   16DD             ; ==========================================================
1682   16DD             ; Test other CSx and ctl lines to LCD screen 
1683   16DD             ;   1, 1, 1, 1, 1, RST-, C29, C28 (D7-D0) 4 and E
1684   16DD             ; ==========================================================		
1685   16DD             dongletestins2:
1686   16DD CD 87 25    		CALL clrscreen		
1687   16E0 21 22 26    		LXI H,donglestrins2 ; Indicate this is a dongle test
1688   16E3 CD 35 25    		CALL putstr
1689   16E6             
1690   16E6 3E 01       		MVI A,01H
1691   16E8 D3 FF       		OUT scrdata ; Set to read instruction register 2
1692   16EA             		
1693   16EA 3E EC       		MVI A,0ECH  ; 
1694   16EC D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 0.
1695   16EE DB FE       		IN scrins   ; Read back the settings.
1696   16F0             		
1697   16F0 E6 03       		ANI 003H    ;
1698   16F2 C2 4E 17    		JNZ  tstdongleins2fail	
1699   16F5             		
1700   16F5 3E ED       		MVI A,0EDH  ; 
1701   16F7 D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 1 0.
1702   16F9 DB FE       		IN scrins   ; Read back the settings.
1703   16FB             		
1704   16FB E6 03       		ANI 003H    ;
1705   16FD FE 01       		CPI 001H
1706   16FF C2 4E 17    		JNZ  tstdongleins2fail	
1707   1702             
1708   1702 3E EE       		MVI A,0EEH  ; 
1709   1704 D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 0 1.
1710   1706 DB FE       		IN scrins   ; Read back the settings.
1711   1708             		
1712   1708 E6 03       		ANI 003H    ;
1713   170A FE 02       		CPI 002H
1714   170C C2 4E 17    		JNZ  tstdongleins2fail					
1715   170F             		
1716   170F 3E EF       		MVI A,0EFH  ; 
1717   1711 D3 B2       		OUT PIOB    ; Set CS28 and CS29 bits to 1.
1718   1713             		
1719   1713 DB FE       		IN scrins   ; Read back the settings.
1720   1715 E6 03       		ANI 003H    ;
1721   1717 FE 03       		CPI 003H
1722   1719 C2 4E 17    		JNZ  tstdongleins2fail
1723   171C             		
1724   171C             			
1725   171C             		
1726   171C             tstdonglins2ok:
1727   171C 21 CA 25    		LXI H,passstr ; Output PASS to diag LCD
1728   171F CD 35 25    		CALL putstr         ; Indicate Data bus pass
1729   1722 3E C0       		MVI A,0C0H          ; Set Cursor to next line
1730   1724 CD 2A 25    		CALL putins
1731   1727             
1732   1727 21 2E 26    		LXI H,dongleins2data ; Reuse RAM byte test data table
1733   172A CD 35 25    		CALL putstr          ; Indicate Data bus pass	
1734   172D             		
1735   172D 3E C4       		MVI A,0C4H           ; Set Cursor to print out RESET- state	
1736   172F CD 2A 25    		CALL putins
1737   1732             
1738   1732 DB FE       		IN scrins            ; Read back the resgister.
1739   1734             		
1740   1734 E6 04       		ANI 004H				 ; Retrieve the Reset state should always be 1
1741   1736 1F          		RAR
1742   1737 1F          		RAR
1743   1738 C6 30       		ADI 030H             ; Make into ASCII 0 or 1
1744   173A CD 1F 25    		CALL putch
1745   173D             		
1746   173D 3E CE       		MVI A,0CEH           ; Set Cursor to print out RESET- state	
1747   173F CD 2A 25    		CALL putins
1748   1742             
1749   1742 DB FE       		IN scrins            ; Read back the register state.
1750   1744             		
1751   1744 E6 03       		ANI 003H		     ; Retrieve the CS28 and CS29 states should be 1 if not failed
1752   1746 C6 30       		ADI 030H             ; Make into ASCII 0 or 1
1753   1748 CD 1F 25    		CALL putch
1754   174B             				
1755   174B C3 77 17    		JMP dongletestins2end
1756   174E             			
1757   174E             tstdongleins2fail:		
1758   174E 21 D0 25    		LXI H,dongledatafail ; Output FAIL to diag LCD
1759   1751 CD 35 25    		CALL putstr
1760   1754             		
1761   1754 3E C0       		MVI A,0C0H           ; Set Cursor to next line
1762   1756 CD 2A 25    		CALL putins
1763   1759             		
1764   1759 21 3E 26    		LXI H,donglestrstat  ; Output WR RD text to diag LCD
1765   175C CD 35 25    		CALL putstr		
1766   175F             
1767   175F 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
1768   1761 CD 2A 25    		CALL putins
1769   1764             		
1770   1764             		; Print the data written
1771   1764 DB B2       		IN PIOB        ; Read the data written to the PIOB  
1772   1766 E6 03       		ANI 003H       ; Get D1, D0  						
1773   1768 CD 55 25    		CALL prthex
1774   176B             
1775   176B 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
1776   176D CD 2A 25    		CALL putins				
1777   1770             		
1778   1770             		; Print out Read value
1779   1770 DB FE       		IN scrins      ; Retrieve the data from the screen
1780   1772 E6 03       		ANI 003H       ; Put the CS29 and CS28 bits in D1 and D0
1781   1774 CD 55 25    		CALL prthex
1782   1777             
1783   1777             dongletestins2end:		
1784   1777             
1785   1777 3E E4       		MVI A,0E4H       ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=RS232, Keyscan col 9 enable)
1786   1779 D3 B2       		OUT PIOB         ; Set PIO chip port B configuration
1787   177B             		
1788   177B 3E FF       		MVI A,0FFH
1789   177D D3 B1       		OUT PIOA         ; Reset PIO to 0FFH
1790   177F             		
1791   177F CD A8 25    		CALL diagscreenpause ; Delay to allow review
1792   1782 C3 23 19    		JMP clktest          ; Continue with clock test
1793   1785             		
1794   1785             ; **********************************************************
1795   1785             ; Test Screen
1796   1785             ;  Check the screen can be accessed and write to screen RAM.
1797   1785             ;  Write the all 1's pattern and then all 0's
1798   1785             ;  Write a set of test chars on all 8 lines.
1799   1785             ; **********************************************************
1800   1785             ; Write to screen check it can read back status
1801   1785             lcdtest:
1802   1785 3E 00       		MVI A,00H	    ; Set PIO A port to 0, this sets CSx lines to 1	
1803   1787 D3 B1       		OUT PIOA
1804   1789             		
1805   1789 3E C0       		MVI A,0C0H      ; Set Cursor to next line
1806   178B CD 2A 25    		CALL putins
1807   178E             		
1808   178E 21 EC 25    		LXI H,lcdstr    ; Output to diag LCD text
1809   1791 CD 35 25    		CALL putstr
1810   1794             
1811   1794             		;Init screen 6D02H
1812   1794 CD 05 19    		CALL lcdshortdelay ; 7533H Enable LCD drivers after short delay
1813   1797 AF          		XRA A              ; OUT 0 to LCD
1814   1798 D3 FE       		OUT scrins
1815   179A CD 05 19    		CALL lcdshortdelay ; 7533H Enable LCD drivers after short delay
1816   179D 3E 3B       		MVI A,03BH	       ; OUT 3BH to LCD UP mode
1817   179F D3 FE       		OUT scrins
1818   17A1 CD FD 18    		CALL lcdsettopline ; 752BH Set the display top line to zero for all LCD controllers
1819   17A4 CD 05 19    		CALL lcdshortdelay ; 7533H Enable LCD drivers after short delay
1820   17A7 3E 39       		MVI A,39H          ; OUT 39H to LCD Display ON
1821   17A9 D3 FE       		OUT scrins
1822   17AB             
1823   17AB 3E 49       		MVI A,'I'          ; Indicate LCD init complete.  Should see random text on LCD
1824   17AD CD 1F 25    		CALL putch
1825   17B0             		
1826   17B0 DB FE       		IN scrins          ; Check the LCD has completed init
1827   17B2             		; If LCD present read back should be X100 0000, else X111 1111
1828   17B2             
1829   17B2 E6 7F       		ANI 07FH
1830   17B4 FE 40       		CPI 040H           ; Check for valid LCD present
1831   17B6 C2 BE 17    		JNZ LCDfail
1832   17B9             
1833   17B9 3E 55       		MVI A,'U'          ; LCD Success
1834   17BB C3 CA 17    		JMP LCDprt
1835   17BE             		
1836   17BE             		;LCD fail or is not present
1837   17BE             LCDfail:
1838   17BE 21 D0 25    		LXI H,lcdfailstr     ; Output fail to diag LCD text
1839   17C1 CD 35 25    		CALL putstr
1840   17C4 CD A8 25    		CALL diagscreenpause ;Delay to allow review
1841   17C7 C3 23 19    		JMP clktest 
1842   17CA             LCDprt:
1843   17CA CD 1F 25    		CALL putch
1844   17CD             
1845   17CD             		;Fill screen with dark pattern
1846   17CD 0E EF       		MVI C,0EFH      ; Clear screen
1847   17CF CD E3 18    		CALL fillscreen
1848   17D2             	
1849   17D2 CD B4 25    		CALL longdelay
1850   17D5             
1851   17D5             		;Clear the screen with space ie clear screen
1852   17D5 0E 58       		MVI C,'X'      ; Fill screen with 'X'
1853   17D7 CD E3 18    		CALL fillscreen
1854   17DA             
1855   17DA             		;Output 8 lines of text.  Text is stored below
1856   17DA 21 EE 29    		LXI H,tstline0
1857   17DD 11 01 01    		LXI D,0101H
1858   17E0 CD 2E 18    		CALL putlcdstr
1859   17E3             
1860   17E3 21 18 2A    		LXI H,tstline1
1861   17E6 11 02 01    		LXI D,0102H
1862   17E9 CD 2E 18    		CALL putlcdstr
1863   17EC             
1864   17EC 21 3A 2A    		LXI H,tstline2
1865   17EF 11 03 01    		LXI D,0103H
1866   17F2 CD 2E 18    		CALL putlcdstr
1867   17F5             
1868   17F5 21 5A 2A    		LXI H,tstline3
1869   17F8 11 04 01    		LXI D,0104H
1870   17FB CD 2E 18    		CALL putlcdstr
1871   17FE             
1872   17FE 21 79 2A    		LXI H,tstline4
1873   1801 11 05 01    		LXI D,0105H
1874   1804 CD 2E 18    		CALL putlcdstr
1875   1807             
1876   1807 21 9A 2A    		LXI H,tstline5
1877   180A 11 06 01    		LXI D,0106H
1878   180D CD 2E 18    		CALL putlcdstr
1879   1810             
1880   1810 21 BB 2A    		LXI H,tstline6
1881   1813 11 07 01    		LXI D,0107H
1882   1816 CD 2E 18    		CALL putlcdstr
1883   1819             
1884   1819 21 DC 2A    		LXI H,tstline7
1885   181C 11 08 01    		LXI D,0108H
1886   181F CD 2E 18    		CALL putlcdstr
1887   1822             
1888   1822 21 F9 25    		LXI H,lcddone        ; Output diagnostic LCD text
1889   1825 CD 35 25    		CALL putstr
1890   1828             		
1891   1828 CD A8 25    		CALL diagscreenpause ;Delay to allow review
1892   182B             
1893   182B C3 23 19    		JMP clktest 
1894   182E             
1895   182E             ; ==========================================================
1896   182E             ; PUT String to the main LCD screen. D,E should point to location
1897   182E             ; 	Does not word wrap for end of line
1898   182E             ; ==========================================================
1899   182E             putlcdstr:		
1900   182E F5          		PUSH PSW
1901   182F             putlcdloop:
1902   182F AF          		XRA A           ; A = 0
1903   1830 4E          		MOV C,M   	; H = Current Character
1904   1831 BE          		CMP M           ; Check end of table
1905   1832 CA 41 18    		JZ putlcdexit 
1906   1835 E5          		PUSH H
1907   1836 D5          		PUSH D      
1908   1837 CD 43 18    		CALL plotchar   ; Write to main screen
1909   183A D1          		POP D
1910   183B E1          		POP H
1911   183C 23          		INX H           ; Get next Char
1912   183D 14          		INR D           ; Next row entry
1913   183E C3 2F 18    		JMP putlcdloop
1914   1841             		
1915   1841             putlcdexit:
1916   1841 F1          		POP PSW
1917   1842 C9          		RET
1918   1843             		
1919   1843             ; ======================================================
1920   1843             ; Plot character in C on LCD at (D,E)
1921   1843             ; All regiters are destroyed
1922   1843             ; ======================================================
1923   1843             plotchar: ;73EEH
1924   1843 15          		DCR D          ; DCR D COL - 1?
1925   1844 1D          		DCR E          ; DCR E ROW - 1?
1926   1845             ;		XCHG           ; DE <-> HL 
1927   1845 D5          		PUSH D         ; save COL-1,ROW-1
1928   1846 79          		MOV A,C        ; A = C Character
1929   1847 11 15 2C    		LXI D,lcdasciitable - 1 ; 7710H Load top of Char FONT table - 1
1930   184A D6 20       		SUI 20H        ; A = A - 32
1931   184C CA 58 18    		JZ charfound   ; 7410H If char = SPACE
1932   184F 13          		INX D          ; INC D
1933   1850 FE 60       		CPI 60H        ; A = 60H => 80H Graphics 
1934   1852 DA 58 18    		JC charfound   ; 7410H If less then must be a char
1935   1855 11 B6 2B    		LXI D,lcdasciitable - 60H ; 76B1H = 7711H - 60H Load top of Graphic FONT table
1936   1858             
1937   1858             ;Printable Character found. 
1938   1858             charfound: ;7410H
1939   1858 F5          		PUSH PSW       ; Save status from Compare CPI 60H
1940   1859 6F          		MOV L,A        ; L = A
1941   185A 26 00       		MVI H,00H      ; H = 0 => HL = char - 32
1942   185C 44          		MOV B,H        ; B = 0
1943   185D 4D          		MOV C,L        ; C = L => BC = char - 32
1944   185E 29          		DAD H          ; HL + HL
1945   185F 29          		DAD H          ; HL + HL  = 4 x HL
1946   1860 09          		DAD B          ; HL + BC  = 5 x HL
1947   1861 F1          		POP PSW        ; POP A
1948   1862 F5          		PUSH PSW       ; PUSH A  Get status to check for character type ASCII or Graphic
1949   1863 DA 67 18    		JC asciichar   ; 741FH  < 60H
1950   1866 09          		DAD B          ; HL + BC = 6 x HL
1951   1867             
1952   1867             ;ASCII Char
1953   1867             asciichar: ;741FH
1954   1867 19          		DAD D          ; HL + DC = Table + Char x 5 or Graphics x 6
1955   1868 F1          		POP PSW        ; POP A
1956   1869 E5          		PUSH H
1957   186A             		
1958   186A D2 79 18    		JNC printlcdchar ; 7430H
1959   186D             
1960   186D             ;If ASCII Char put into buffer
1961   186D E1          		POP H
1962   186E CD 47 24    		CALL ramsblockstart  ;Get the start of the RAM in DE
1963   1871             ;Move ASCII Char into RAM space
1964   1871 D5          		PUSH D
1965   1872 06 05       		MVI B,05H
1966   1874 CD EB 24    		CALL movemem ; 2542H Move B bytes from M to (DE)
1967   1877 AF          		XRA A
1968   1878 12          		STAX D
1969   1879             	
1970   1879             ;Graphics char
1971   1879             printlcdchar:   ;7430H
1972   1879 C1          		POP B          ; Either Graphic Font Table Pointer or RAM Table for ASCII Char
1973   187A E1          		POP H          ; Retrieve the COL-1,ROW-1
1974   187B CD 83 18    		CALL printchar ; 74A2H Byte Plot - Send bit pattern to LCD for character
1975   187E AF          		XRA A          ; CLR A
1976   187F CD FD 18    		CALL lcdsettopline ; 752BH Set the display top line to zero for all LCD controllers
1977   1882 C9          		RET
1978   1883             
1979   1883             ; ======================================================
1980   1883             ; Send bit pattern to Main LCD for the character
1981   1883             ; ======================================================
1982   1883             printchar: ;74A2H
1983   1883 C5          		PUSH B     ; Save Font Table Pointer
1984   1884 1E 06       		MVI E,06H  ; E = 6  Number of bytes for a Graphic
1985   1886             ;74A5H  (3AH) LDA FFF5H  ; COL
1986   1886 7C          		MOV A,H    ; A = H = COL - 1
1987   1887 FE 08       		CPI 08H    ; A = 8   Col is a bridge
1988   1889 CA 96 18    		JZ decfour ; 74B7H E = E - 4
1989   188C FE 10       		CPI 10H    ; A = 16  Col is a bridge
1990   188E CA 98 18    		JZ dectwo  ; 74B9H E = E - 2
1991   1891 FE 21       		CPI 21H    ; A = 33 Col is a bridge E - 4
1992   1893 C2 9A 18    		JNZ nodec  ; 74BBH E = E  
1993   1896             decfour: ;74B7H
1994   1896 1D          		DCR E      ; E--
1995   1897 1D          		DCR E      ; E--
1996   1898             dectwo:  ;74B9H
1997   1898 1D          		DCR E      ; E--
1998   1899 1D          		DCR E      ; E--
1999   189A             nodec:   ;74BBH
2000   189A 4F          		MOV C,A    ; C = A COL - 1
2001   189B 81          		ADD C      ; A + A
2002   189C 81          		ADD C      ; 2A + A
2003   189D 4F          		MOV C,A    ; C = 3*COL - 3  
2004   189E 06 00       		MVI B,00H  ; B = 0  
2005   18A0 7D          		MOV A,L    ; ROW
2006   18A1 1F          		RAR        ; /2
2007   18A2 1F          		RAR        ; /4
2008   18A3 1F          		RAR        ; /8  0 1 2 3   4 5 6 7 See which section upper or lower RAM modules 
2009   18A4             				   ; 2 -> 7 -> C0
2010   18A4             				   		
2011   18A4 21 82 2B    		LXI H,lcdlowercs ; 75C9H 8155 PIO chip bit patterns for Lower LCD drivers
2012   18A7 DA AD 18    		JC setuptable    ; 74D0H
2013   18AA 21 0A 2B    		LXI H,lcduppercs ; 7551H 8155 PIO chip bit patterns for Upper LCD drivers
2014   18AD             		
2015   18AD             setuptable:   ;74D0H
2016   18AD 09          		DAD B       ; HL + BC  HL + 3xCOL 75C9 Set pointer to LCD PIO Tables: PIOA, PIOB and RAM Address  
2017   18AE             
2018   18AE 47          	    MOV B,A     ; Save LCD RAM Address
2019   18AF             
2020   18AF CD 0D 19    		CALL enablelcd ; 753BH Enable LCD driver(s) specified by (HL)
2021   18B2             
2022   18B2 54          		MOV D,H
2023   18B3 4D          		MOV C,L    ; Save HL to D,C as PIO address field table pointer
2024   18B4             		
2025   18B4 78          		MOV A,B     ; 
2026   18B5 B6          		ORA M       ; OR with 3rd entry in PIO table to set address
2027   18B6 47          		MOV B,A     ; Save B = A, Address setting
2028   18B7             		
2029   18B7 E1          		POP H       ;Get font data bits pointer
2030   18B8 D5          		PUSH D		
2031   18B9 CD CE 18    		CALL writebyteslcd ; 74F7H Send E bytes from HL to the LCD RAM
2032   18BC             
2033   18BC D1          		POP D
2034   18BD             ;Finish the print
2035   18BD 3E 06       		MVI A,006H 	; See how many have been missed
2036   18BF 93          		SUB E
2037   18C0 C8          		RZ        	; Return if all done
2038   18C1             	
2039   18C1             ;Complete the missing bits on the next RAM Chip
2040   18C1 5F          		MOV E,A      ; E = Missing byte cnt  
2041   18C2             
2042   18C2 E5          		PUSH H
2043   18C3 62          		MOV H,D
2044   18C4 69          		MOV L,C      ; Restore HL form D,C as PIO address field table pointer
2045   18C5             
2046   18C5 23          		INX H          ; Get the next PIO field 
2047   18C6 CD 0D 19    		CALL enablelcd ; 753BH Enable LCD driver(s) specified by (HL) 
2048   18C9             		
2049   18C9 78          		MOV A,B
2050   18CA E6 C0       		ANI 0C0H       ; clr lower address leave row address ok
2051   18CC 47          		MOV B,A        ; save 
2052   18CD             
2053   18CD E1          		POP H
2054   18CE             						
2055   18CE             ;		MOV E,C
2056   18CE              
2057   18CE             ; Write the selected bytes
2058   18CE             writebyteslcd:  ;74F7H
2059   18CE 78          		MOV A,B
2060   18CF CD 1A 19    		CALL lcdbusy   ; 7548H Wait for LCD driver to be available
2061   18D2 D3 FE       		OUT scrins     ; FEH Set Address for the LCD RAM Chip
2062   18D4             lcdwrite:       
2063   18D4             lcdwait:
2064   18D4 DB FE       		IN scrins 		; FEH Wait for LCD 
2065   18D6 17          		RAL
2066   18D7 DA D4 18    		JC lcdwait     ; 750BH
2067   18DA 7E          		MOV A,M        ; Put font byte to A
2068   18DB D3 FF       		OUT scrdata    ; FFH Output to LCD
2069   18DD 23          		INX H          ; Next byte
2070   18DE 1D          		DCR E          ; Byte count
2071   18DF C2 D4 18    		JNZ lcdwait    ; 750BH      ; Next byte
2072   18E2 C9          		RET
2073   18E3             			
2074   18E3             ; ======================================================
2075   18E3             ; Fill Screen use DE and print char in C
2076   18E3             ; ======================================================
2077   18E3             fillscreen:    ;4601H
2078   18E3 1E 01       		MVI E,1      ; Prepare to point to LCD RAM (1,1) ROW
2079   18E5             nextlcdrow:
2080   18E5 16 01       		MVI D,1      ;   " 				   COL
2081   18E7             nextlcdchar:
2082   18E7 C5          		PUSH B
2083   18E8 D5          		PUSH D
2084   18E9 CD 43 18    		CALL plotchar  ; 73EEH  or 4566H Call Level 6 Character Draw routine
2085   18EC D1          		POP D
2086   18ED C1          		POP B
2087   18EE 14          		INR D          ; Increment column
2088   18EF 7A          		MOV A,D        ; Prepare to test for column 40
2089   18F0 FE 29       		CPI 41         ; Test if beyond column 40
2090   18F2 C2 E7 18    		JNZ nextlcdchar; 4608H Jump if more columns on this line
2091   18F5 1C          		INR E          ; Increment line
2092   18F6 7B          		MOV A,E        ; Prepare to test if last line refreshed
2093   18F7 FE 09       		CPI 9          ; Test if beyond line 8
2094   18F9 C2 E5 18    		JNZ nextlcdrow ; 4606H Jump back to refresh next line if not on line 9
2095   18FC C9          		RET
2096   18FD             
2097   18FD             ; ======================================================
2098   18FD             ; Set the display top line to zero for all LCD controllers
2099   18FD             ; This configures the HW scrolling to start displaying
2100   18FD             ; from the natural ROW 0 (i.e. not scrolled).
2101   18FD             ; ======================================================
2102   18FD             lcdsettopline: ;752BH
2103   18FD CD 05 19    		CALL lcdshortdelay    ; 7533H Enable LCD drivers after short delay
2104   1900 3E 3E       		MVI A,03EH            ; Load command to set top line = 0
2105   1902 D3 FE       		OUT scrins            ; FEH Send the command
2106   1904 C9          		RET
2107   1905             	
2108   1905             ; ======================================================
2109   1905             ; Enable LCD drivers after short delay
2110   1905             ; ======================================================
2111   1905             lcdshortdelay: ;7533H
2112   1905 0E 03       		MVI C,03H            ; Prepare for a short delay 
2113   1907 CD 7C 25    		CALL shortdelay      ; 7657H Delay routine - decrement C until zero
2114   190A 21 FA 2B    		LXI H,lcdalldrivers  ; 7641H Point to LCD enable bits to enable all 
2115   190D             
2116   190D             ; ======================================================
2117   190D             ; Enable LCD drivers specified by (HL)
2118   190D             ; ======================================================
2119   190D             enablelcd:     ;753BH
2120   190D 7E          		MOV A,M        ; Get Bit pattern for 8 drivers
2121   190E D3 B1       		OUT PIOA       ; B9H OUTput the bit pattern for 8 drivers
2122   1910 23          		INX H          ; Increment to bit pattern for next 2 LCD drivers
2123   1911 DB B2       		IN PIOB        ; BAH Get current value of I/O port with 2 LCD drivers
2124   1913 E6 FC       		ANI 0FCH       ; Mask off LCD driver bit positions
2125   1915 B6          		ORA M          ; OR in selected LCD driver enable bits
2126   1916 D3 B2       		OUT PIOB       ; BAH OUTput selected LCD driver bits
2127   1918 23          		INX H          ; Increment to next set of LCD driver enable bits
2128   1919 C9          		RET
2129   191A             
2130   191A             ; ======================================================
2131   191A             ; Wait for LCD driver to be available
2132   191A             ; ======================================================
2133   191A             lcdbusy:        ;7548H
2134   191A F5          		PUSH PSW       ; Save A on stack
2135   191B             lcdrdbusy:
2136   191B DB FE       		IN scrins      ; FEH Read the LCD driver input port
2137   191D 17          		RAL            ; Rotate the busy bit into the C flag
2138   191E DA 1B 19    		JC lcdrdbusy   ; Jump to keep waiting until not busy
2139   1921 F1          		POP PSW        ; Restore A
2140   1922 C9          		RET
2141   1923             
2142   1923             ; ##########################################################
2143   1923             ; ##########################################################		
2144   1923             ; **********************************************************
2145   1923             ; Test CLK chip
2146   1923             ; Write and read back from the clk chip
2147   1923             ; Check the chip is ticking
2148   1923             ; **********************************************************
2149   1923             clktest:
2150   1923 F3          		DI
2151   1924             		 
2152   1924 3E 1F       		MVI A,01FH
2153   1926 30          		SIM
2154   1927             
2155   1927 CD 6D 19    		CALL initclock  ; Set the clock ticking with defaults
2156   192A             
2157   192A CD 87 25    		CALL clrscreen
2158   192D             
2159   192D 21 02 26    		LXI H,clkteststr
2160   1930 CD 35 25    		CALL putstr
2161   1933 CD B4 25     		CALL longdelay  ; Let the LCD Screen
2162   1936             	
2163   1936 3E 80       		MVI A,080H      ; Set Cursor to top line
2164   1938 CD 2A 25    		CALL putins   
2165   193B             			
2166   193B CD 79 19    		CALL printclkdata  ; Print the clock data		
2167   193E             
2168   193E CD B4 25    		CALL longdelay  ; Let the clock tick
2169   1941 CD B4 25    		CALL longdelay  ; Let the clock tick
2170   1944 CD B4 25    		CALL longdelay  ; Let the clock tick
2171   1947 CD B4 25    		CALL longdelay  ; Let the clock tick
2172   194A             
2173   194A 3E C0       		MVI A,0C0H         ; Set Cursor to bottom line
2174   194C CD 2A 25    		CALL putins	
2175   194F             
2176   194F CD 79 19    		CALL printclkdata ; Print the clock data
2177   1952             
2178   1952             		;MVI A,' '
2179   1952             		;CALL putch
2180   1952             
2181   1952 CD 69 24    		CALL clocklocation
2182   1955             
2183   1955 7E          		MOV A,M
2184   1956             
2185   1956 21 CA 25    		LXI H,passstr ; Output PASS string to Diag Screen
2186   1959             
2187   1959 FE 00       		CPI 0H
2188   195B CA 61 19    		JZ clkfail
2189   195E             
2190   195E C3 64 19    		JMP clkdone
2191   1961             
2192   1961             clkfail:		
2193   1961 21 D0 25    		LXI H,clkfailstr
2194   1964             clkdone:		
2195   1964 CD 35 25    		CALL putstr
2196   1967             
2197   1967 CD A8 25    		CALL diagscreenpause ;Delay to allow review
2198   196A             
2199   196A C3 0F 1A    		JMP rst75test
2200   196D             		
2201   196D             ; ======================================================
2202   196D             ; Init the clock chip
2203   196D             ; ======================================================
2204   196D             initclock: ;7E9DH
2205   196D 21 01 1A    		LXI H,clockinitvalues ; 7F01H Initial clock chip register values
2206   1970 CD 9C 19    		CALL updatetime       ; 732AH Update clock chip regs from M
2207   1973 3E 05       		MVI A,05H
2208   1975 CD F0 19    		CALL setclkmode       ; 7383H Set clock chip mode
2209   1978 C9          		RET
2210   1979             		
2211   1979             ; ======================================================
2212   1979             ; Print raw clock data to Test LCD
2213   1979             ; ======================================================
2214   1979             ; m100_rtc Stucture
2215   1979             ; Month/DOW/DayH/DayL/HourH/HourL/MinH/MinL/SecH/SecsL
2216   1979             ; All BCD except Month is Hex
2217   1979             ; 00 - 0F
2218   1979             ; 40 - 4F
2219   1979             printclkdata:
2220   1979 CD 69 24    		CALL clocklocation ; HL points to start or clock data RAM
2221   197C CD 9B 19    		CALL copytime2mem
2222   197F             	       
2223   197F 2B          		DCX H		
2224   1980 7E          		MOV A,M	       ; Get Month
2225   1981 CD 55 25    		CALL prthex    ; Print as HEX
2226   1984 0E 09       		MVI C,009H	
2227   1986             			
2228   1986             printclkloop:			
2229   1986 2B          		DCX H
2230   1987 7E          		MOV A,M 	;Get Next Value
2231   1988 C6 30       		ADI '0'   ;Convert to ASCII number
2232   198A CD 1F 25    		CALL putch	;Print it out		
2233   198D 0D          		DCR C
2234   198E C2 86 19    		JNZ printclkloop
2235   1991 C9          		RET
2236   1992             
2237   1992             ; ======================================================
2238   1992             ; Update in-memory (F923H) clock values
2239   1992             ; ======================================================
2240   1992             updateclock:  ;19A0H
2241   1992 E5          		PUSH H         ; Preserve BASIC string pointer to stack
2242   1993             ;		LXI H,F923H    ; Seconds (ones)
2243   1993 CD 69 24    		CALL clocklocation
2244   1996             
2245   1996             		;DI             ; Disable interrupts during copy
2246   1996 CD 9B 19    		CALL copytime2mem ; 7329H Copy clock chip regs to M
2247   1999             		;EI             ; Re-enable interrupts
2248   1999 E1          		POP H          ; Restore BASIC string pointer
2249   199A C9          		RET
2250   199B             	
2251   199B             ; ======================================================
2252   199B             ; Copy clock chip regs to M pointed to by HL
2253   199B             ; ======================================================
2254   199B             copytime2mem: ;7329H
2255   199B             ;7329H  (F6H) ORI AFH       
2256   199B F6          		.db 0F6H        ; Copy Clock   registers to Memory
2257   199C             updatetime:   ;732AH
2258   199C AF          		XRA A           ; Update clock registers from Memory
2259   199D F5          		PUSH PSW
2260   199E             		;CALL disablebackground ; 765CH Disable Background task & barcode interrupts
2261   199E 3E 03       		MVI A,03H       ; Read Time
2262   19A0 C4 F0 19    		CNZ setclkmode  ; 7383H      ; If A! = 0 Read the time registers 7329H
2263   19A3 3E 01       		MVI A,01H       ; Register Shift mode
2264   19A5 CD F0 19    		CALL setclkmode ; 7383H     ; Set clock chip mode 
2265   19A8             	
2266   19A8 0E 07       		MVI C,07H       
2267   19AA CD 7C 25    		CALL shortdelay ; 7657H     ; Delay routine - decrement C until zero
2268   19AD             	
2269   19AD             ;Init the data read
2270   19AD 06 0A       		MVI B,0AH      ; 10 Digits to read
2271   19AF             
2272   19AF             ; Read 4 bits
2273   19AF             next4bits: ;7340H
2274   19AF 0E 04       		MVI C,04H      ; Number of bits
2275   19B1 56          		MOV D,M        ; Move memory to D
2276   19B2             
2277   19B2             nextbits:  ;7343H
2278   19B2 F1          		POP PSW
2279   19B3 F5          		PUSH PSW
2280   19B4 CA C1 19    		JZ readnextbit ; 7352H Read next bit from Clock Chip
2281   19B7 DB B3       		IN PIOC        ; BBH/B3H Get CLK DataIN
2282   19B9 1F          		RAR            ; Put bit into Carry
2283   19BA 7A          		MOV A,D        ; A = D
2284   19BB 1F          		RAR            ; C -> A -> C 
2285   19BC 57          		MOV D,A        ; D = A
2286   19BD AF          		XRA A          ; CLR
2287   19BE C3 CC 19    		JMP readclkbit ; 735DH Next bit
2288   19C1             
2289   19C1             ; ======================================================
2290   19C1             ; Read next bit from Clock Chip
2291   19C1             ; ======================================================
2292   19C1             readnextbit: ;7352H
2293   19C1 7A          		MOV A,D  ; Put CLK Memory to A
2294   19C2 0F          		RRC      ; Get LSB to CY
2295   19C3 57          		MOV D,A  ; Save A to D
2296   19C4 3E 10       		MVI A,10H ;
2297   19C6 1F          		RAR      ; 
2298   19C7 1F          		RAR
2299   19C8 1F          		RAR
2300   19C9 1F          		RAR      ; 0000CY001
2301   19CA D3 B1       		OUT PIOA ; B9H Write PIO CLK bit
2302   19CC             
2303   19CC             ; Read bit
2304   19CC             readclkbit: ;735DH
2305   19CC             ;Clock the data into the Chip
2306   19CC F6 09       		ORI 09H  ; CLK and C0 bits
2307   19CE D3 B1       		OUT PIOA ; B9H  ; PIO A
2308   19D0 E6 F7       		ANI 0F7H  ; Reset CLK bits
2309   19D2 D3 B1       		OUT PIOA ; B9H  ; PIO A
2310   19D4             
2311   19D4 0D          		DCR C    ; Bits -- 
2312   19D5 C2 B2 19    		JNZ nextbits ; 7343H ; 
2313   19D8 7A          		MOV A,D  ; A = D Top 4 bits are the new data
2314   19D9 0F          		RRC      ; 
2315   19DA 0F          		RRC
2316   19DB 0F          		RRC
2317   19DC 0F          		RRC      ; Move Top 4 bits to bottom 4 bis
2318   19DD E6 0F       		ANI 0FH  ; Get the bottom 4 bits
2319   19DF 77          		MOV M,A  ; Store in Memory 
2320   19E0 23          		INX H    ; Next memory locations
2321   19E1 05          		DCR B    ; Number of loops
2322   19E2 C2 AF 19    		JNZ next4bits   ; 7340H
2323   19E5 F1          		POP PSW
2324   19E6 3E 02       		MVI A,02H ; 
2325   19E8 CC F0 19    		CZ setclkmode   ; 7383H     ; Set clock chip mode
2326   19EB AF          		XRA A
2327   19EC CD F0 19    		CALL setclkmode ; 7383H     ; Set clock chip mode
2328   19EF             ; Enable the background tasks
2329   19EF             		;MVI A,09H  ;743CH
2330   19EF             		;SIM
2331   19EF C9          		RET
2332   19F0             
2333   19F0             ; ======================================================
2334   19F0             ; Set clock chip mode
2335   19F0             ; ======================================================
2336   19F0             setclkmode: ;7383H
2337   19F0 D3 B1       		OUT PIOA     ; B9H PIO A
2338   19F2             ;7385H  (3AH) LDA FF45H      ; Contents of port E8H
2339   19F2 E5          		PUSH H
2340   19F3 CD 7D 24    		CALL stromlocation
2341   19F6 7E          		MOV A,M 
2342   19F7 F6 04       		ORI 04H      ; CLK Strobe HI
2343   19F9 D3 E8       		OUT CtrlReg  ; E8H 
2344   19FB E6 FB       		ANI 0FBH     ; CLK Strobe LO
2345   19FD D3 E8       		OUT CtrlReg  ; E8H
2346   19FF E1          		POP H
2347   1A00 C9          		RET    
2348   1A01             
2349   1A01             ; ======================================================
2350   1A01             ; Initial clock chip register values
2351   1A01             ; ======================================================
2352   1A01             clockinitvalues: ;7F01H
2353   1A01             ; Order is in reverse:
2354   1A01             ; SecL/SecH/MinL/MinH/HourL/HourH/DayL/DayH/DOW/Month
2355   1A01             ;                  M D Dy Ho Mi Se
2356   1A01             ; Setting below => 1 0 01 11 53 50
2357   1A01 00 05 03 05 	.db 000H,005H,0003H,005H,001H,001H,001H,000H
2357   1A05 01 01 01 00 
2358   1A09 00 01 CF 9D 	.db 000H,001H,0CFH,09DH,0CFH,0DDH	
2358   1A0D CF DD 
2359   1A0F             ;	.db 000H,000H,000H,000H,000H,000H,001H,000H
2360   1A0F             ;	.db 000H,001H,0CFH,09DH,0CFH,0DDH
2361   1A0F             
2362   1A0F             ; ##########################################################
2363   1A0F             ; ##########################################################
2364   1A0F             ; **********************************************************
2365   1A0F             ; Test timer interrupt
2366   1A0F             ; 	Initial set up of the test.
2367   1A0F             ; **********************************************************
2368   1A0F             ; Set interrupt.
2369   1A0F             rst75test:
2370   1A0F CD 87 25    		CALL clrscreen
2371   1A12             
2372   1A12 CD 8A 24    		CALL rst75testlocation
2373   1A15 36 00       		MVI M,0
2374   1A17             		
2375   1A17 21 9E 26    		LXI H,rst75teststr
2376   1A1A CD 35 25    		CALL putstr
2377   1A1D CD B4 25     		CALL longdelay  ; Let the clock tick
2378   1A20              		
2379   1A20 3E 80        		MVI A,080H         ; Set Cursor to top line
2380   1A22 CD 2A 25    		CALL putins
2381   1A25 CD 79 19    		CALL printclkdata  ; Print the clock data	
2382   1A28             		
2383   1A28 3E 1B       		MVI A,1BH      ; Prepare to re-enable RST 7.5 interrupt, Set bit 0
2384   1A2A 30          		SIM            ; Re-enable RST 7.5 interrupt
2385   1A2B FB          		EI             ; Re-enable interrupts
2386   1A2C             	
2387   1A2C             		;Approx 6s delay. Clock should tick ~6s & Test location should reach 2x that
2388   1A2C             		
2389   1A2C CD B4 25    		CALL longdelay
2390   1A2F CD B4 25    		CALL longdelay
2391   1A32 CD B4 25    		CALL longdelay
2392   1A35 CD B4 25    		CALL longdelay
2393   1A38 CD B4 25    		CALL longdelay
2394   1A3B CD B4 25    		CALL longdelay
2395   1A3E             
2396   1A3E F3          		DI
2397   1A3F 3E 1F       		MVI A,1FH      ; Load to disble interrupts
2398   1A41 30          		SIM            ; Disable all interrupts
2399   1A42             
2400   1A42 3E C0        		MVI A,0C0H         ; Set Cursor to bottom line
2401   1A44 CD 2A 25    		CALL putins
2402   1A47 CD 79 19    		CALL printclkdata  ; Print the clock data
2403   1A4A             			
2404   1A4A 3E 8C       		MVI A,08CH         ; Set cursor to top line
2405   1A4C CD 2A 25    		CALL putins
2406   1A4F             			
2407   1A4F             		;Check the operation of the interrupt		
2408   1A4F CD 8A 24    		CALL rst75testlocation
2409   1A52 7E          		MOV A,M
2410   1A53 FE 06       		CPI 6   	; Make sure it is ticking should > 6s	
2411   1A55             				
2412   1A55 F5          		PUSH PSW
2413   1A56             		
2414   1A56 1F          		RAR	       ; /2 This should match the difference in seconds
2415   1A57             
2416   1A57 CD 55 25    		CALL prthex    ; Print the count
2417   1A5A             
2418   1A5A 3E CB        		MVI A,0CBH     ; Set Cursor to bottom line
2419   1A5C CD 2A 25    		CALL putins
2420   1A5F             		
2421   1A5F 21 CA 25    		LXI H,passstr
2422   1A62             		
2423   1A62 F1          		POP PSW
2424   1A63 D2 69 1A    		JNC rst75testdone
2425   1A66 21 D0 25    		LXI H,testfailstr
2426   1A69             
2427   1A69             rst75testdone:
2428   1A69 CD 35 25    		CALL putstr
2429   1A6C             	
2430   1A6C CD A8 25    		CALL diagscreenpause ;Delay to allow review
2431   1A6F C3 8C 1A    		JMP rst65test
2432   1A72             
2433   1A72             ; ======================================================
2434   1A72             ; RST 7.5 interrupt routine (Background tick)
2435   1A72             ; ======================================================
2436   1A72             timint:
2437   1A72 E5          		PUSH H         ; \
2438   1A73 D5          		PUSH D         ;  \ Save all registers on stack
2439   1A74 C5          		PUSH B         ;  /
2440   1A75 F5          		PUSH PSW       ; /
2441   1A76 3E 1B       		MVI A,01BH     ; Prepare to re-enable RST 7.5 interrupt
2442   1A78 30          		SIM            ; Re-enable RST 7.5 interrupt
2443   1A79 FB          		EI             ; Re-enable interrupts
2444   1A7A             
2445   1A7A CD 70 24    		CALL getcountdown
2446   1A7D 35          		DCR M           ; Decrement the 2Hz count-down counter
2447   1A7E C2 87 1A    		JNZ timintdone  ; 1BAEH Jump if not zero to skip 10Hz background logic
2448   1A81 36 7D       		MVI M,07DH      ; Re-load count-down value for 2 Hz
2449   1A83             
2450   1A83 CD 8A 24    		CALL rst75testlocation
2451   1A86 34          		INR M
2452   1A87             
2453   1A87             timintdone:
2454   1A87 F1          		POP PSW     ; \
2455   1A88 C1          		POP B       ;  \ Retrieve all registers on stack
2456   1A89 D1          		POP D       ;  /
2457   1A8A E1          		POP H		; /
2458   1A8B C9          		RET
2459   1A8C             
2460   1A8C             
2461   1A8C             ; ##########################################################
2462   1A8C             ; ##########################################################
2463   1A8C             ; **********************************************************
2464   1A8C             ; Test Serial Port
2465   1A8C             ; Send and receive a character in loopback
2466   1A8C             ; Use interrupt to receive character
2467   1A8C             ; Switch to modem and check serial port does not work.
2468   1A8C             ; **********************************************************
2469   1A8C             rst65test:
2470   1A8C CD 87 25    		CALL clrscreen
2471   1A8F             		
2472   1A8F 21 C9 26    		LXI H,rst65teststr
2473   1A92 CD 35 25    		CALL putstr
2474   1A95             
2475   1A95 3E C0        		MVI A,0C0H     ; Set Cursor to back to start
2476   1A97 CD 2A 25    		CALL putins	
2477   1A9A 21 DA 26    		LXI H,dsrteststr
2478   1A9D CD 35 25    		CALL putstr	
2479   1AA0             
2480   1AA0             ; ======================================================		
2481   1AA0             ; Test CTS/RTS/DSR/DTS
2482   1AA0             ;  CTS - PC4 10H, DSR - PC5 20H 4E
2483   1AA0             ;  RTS - PB7 80H, DTR - PB6 40H 46
2484   1AA0             ; ======================================================
2485   1AA0             
2486   1AA0 06 00       		MVI B,0        ; Use B for failure count
2487   1AA2             ;Test setting 1		
2488   1AA2 DB B2       		IN PIOB        ; Read PIOB port
2489   1AA4 F6 C0       		ORI 0C0H       ; Set RTS and DTR = 1
2490   1AA6 D3 B2       		OUT PIOB  
2491   1AA8             		
2492   1AA8             ;RTS Set 1
2493   1AA8 3E C6        		MVI A,0C6H     ; Set Cursor to back to start
2494   1AAA CD 2A 25    		CALL putins	
2495   1AAD             
2496   1AAD DB B3       		IN PIOC        ; Read Port C	
2497   1AAF E6 10       		ANI 010H       ; Get CTS-RTS	
2498   1AB1             		
2499   1AB1 CA B9 1A    		JZ rtsonefail
2500   1AB4 3E 31       		MVI A,'1'
2501   1AB6 C3 BD 1A    		JMP rtsonedone
2502   1AB9             rtsonefail:
2503   1AB9 3E 46       		MVI A,'F'
2504   1ABB 06 01       		MVI B,1
2505   1ABD             rtsonedone:		
2506   1ABD CD 1F 25    		CALL putch
2507   1AC0             		
2508   1AC0             ;DTR Set 1
2509   1AC0 3E CE        		MVI A,0CEH     ; Set Cursor to back to slot
2510   1AC2 CD 2A 25    		CALL putins	
2511   1AC5             		
2512   1AC5 DB B3       		IN PIOC
2513   1AC7 E6 20       		ANI 020H       ; Get DSR-DTR	
2514   1AC9             
2515   1AC9 CA D1 1A    		JZ dtronefail
2516   1ACC 3E 31       		MVI A,'1'
2517   1ACE C3 D5 1A    		JMP dtronedone
2518   1AD1             dtronefail:
2519   1AD1 3E 46       		MVI A,'F'
2520   1AD3 06 01       		MVI B,1
2521   1AD5             dtronedone:
2522   1AD5 CD 1F 25    		CALL putch
2523   1AD8             
2524   1AD8 CD B4 25    		CALL longdelay
2525   1ADB CD B4 25     		CALL longdelay
2526   1ADE CD B4 25     		CALL longdelay
2527   1AE1             		
2528   1AE1             ;Test setting 0	
2529   1AE1 DB B2       		IN PIOB        ; Read PIOB port
2530   1AE3 E6 3F       		ANI 03FH       ; Set RTS and DSR = 0
2531   1AE5 D3 B2       		OUT PIOB  
2532   1AE7             		
2533   1AE7             ;RTS Set 0
2534   1AE7 3E C6        		MVI A,0C6H     ; Set Cursor to back to RTS position
2535   1AE9 CD 2A 25    		CALL putins	
2536   1AEC             
2537   1AEC DB B3       		IN PIOC        ; Read Port C	
2538   1AEE E6 10       		ANI 010H       ; Get CTS-RTS	
2539   1AF0             		
2540   1AF0 C2 F8 1A    		JNZ rtszerofail
2541   1AF3 3E 30       		MVI A,'0'
2542   1AF5 C3 FC 1A    		JMP rtszerodone
2543   1AF8             rtszerofail:
2544   1AF8 3E 46       		MVI A,'F'
2545   1AFA 06 01       		MVI B,1
2546   1AFC             rtszerodone:
2547   1AFC CD 1F 25    		CALL putch
2548   1AFF             		
2549   1AFF             ;DTR Set 0
2550   1AFF 3E CE       		MVI A,0CEH     ; Set Cursor to DTR position	
2551   1B01 CD 2A 25    		CALL putins	
2552   1B04             		
2553   1B04 DB B3       		IN PIOC
2554   1B06 E6 20       		ANI 020H       ; Get DTR	
2555   1B08             
2556   1B08 C2 10 1B    		JNZ dtrzerofail
2557   1B0B 3E 30       		MVI A,'0'
2558   1B0D C3 14 1B    		JMP dtrzerodone
2559   1B10             dtrzerofail:
2560   1B10 3E 46       		MVI A,'F'
2561   1B12 06 01       		MVI B,1
2562   1B14             dtrzerodone:
2563   1B14 CD 1F 25    		CALL putch	
2564   1B17             
2565   1B17 CD B4 25    		CALL longdelay
2566   1B1A CD B4 25     		CALL longdelay
2567   1B1D CD B4 25     		CALL longdelay
2568   1B20             
2569   1B20 3E 8B       		MVI A,08BH     ; Set Cursor to back to start
2570   1B22 CD 2A 25    		CALL putins		
2571   1B25             
2572   1B25 21 CA 25    		LXI H,passstr
2573   1B28 78          		MOV A,B
2574   1B29 FE 00       		CPI 0
2575   1B2B CA 31 1B    		JZ rst65dtrdone
2576   1B2E             
2577   1B2E             rst65testfail:		
2578   1B2E 21 D0 25    		LXI H,testfailstr
2579   1B31             rst65dtrdone:
2580   1B31 CD 35 25    		CALL putstr
2581   1B34             		
2582   1B34 3E 80       		MVI A,080H     ; Set Cursor to back to start
2583   1B36 CD 2A 25    		CALL putins	
2584   1B39             				
2585   1B39 CD A8 25     		CALL diagscreenpause ;Delay to allow review
2586   1B3C              		
2587   1B3C CD A6 24     		CALL rxbuffer  ; Store received character
2588   1B3F 36 00       		MVI M,0
2589   1B41             
2590   1B41             ; ======================================================		
2591   1B41             ; Configure serial port loopback test
2592   1B41             ; ======================================================		
2593   1B41 21 EB 26    		LXI H,loopbackteststr
2594   1B44 CD 35 25      		CALL putstr
2595   1B47             
2596   1B47 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
2597   1B49 CD 2A 25    		CALL putins	  		
2598   1B4C               				
2599   1B4C 21 FC 26      		LXI H,loopbackstatstr
2600   1B4F CD 35 25      		CALL putstr
2601   1B52             
2602   1B52             		; Reset buffer
2603   1B52 AF          		XRA A
2604   1B53 CD A6 24    		CALL rxbuffer  ; Store received character
2605   1B56 77          		MOV M,A
2606   1B57 23          		INX H
2607   1B58 77          		MOV M,A    
2608   1B59             	
2609   1B59             ; Set baud rate 19200 using PIO Timer	
2610   1B59 3E 08       		MVI A,008H
2611   1B5B D3 B4       		OUT PIOT1     ; BCH Timer 0
2612   1B5D 3E 40       		MVI A,040H
2613   1B5F D3 B5       		OUT PIOT2	  ; BDH Timer 1
2614   1B61 3E C3       		MVI A,0C3H
2615   1B63 D3 B0       		OUT PIOCR	  ; B8H Control Reg
2616   1B65             		
2617   1B65             ; Configure UART Chip
2618   1B65             ; B11100: 8bits + No Parity + 1 stop
2619   1B65 3E 1C       		MVI A,01CH
2620   1B67 D3 D8       		OUT UARTmode  ; D8H
2621   1B69             
2622   1B69 3E 1D       		MVI A,01DH     ; Prepare to re-enable RST 6.5 interrupt
2623   1B6B 30          		SIM  
2624   1B6C FB          		EI
2625   1B6D             ; ======================================================
2626   1B6D             ; Begin the loopback test	
2627   1B6D             ; ======================================================
2628   1B6D 06 00       		MVI B,0		
2629   1B6F             		
2630   1B6F             txnewchar:
2631   1B6F             ;TX Byte      ;6E3AH
2632   1B6F 3E C2       		MVI A,0C2H     ; Set Cursor to C gap
2633   1B71 CD 2A 25    		CALL putins	 
2634   1B74             		
2635   1B74 DB D8       		IN UARTmode   ; D8H
2636   1B76 CD 55 25    		CALL prthex
2637   1B79             	
2638   1B79 E6 10       		ANI 010H      ; TX Buffer empty - High buffer empty
2639   1B7B CA BE 1B    		JZ txfail     ; 6E3AH       ; Send character in C to serial port
2640   1B7E             
2641   1B7E 3E C8       		MVI A,0C8H     ; Set Cursor  TX gap
2642   1B80 CD 2A 25    		CALL putins			
2643   1B83 78          		MOV A,B
2644   1B84 D3 C8       		OUT UARTsend ; C8H
2645   1B86 CD 55 25    		CALL prthex
2646   1B89             
2647   1B89 3E CA       		MVI A,0CAH     ; Set Cursor  RX gap
2648   1B8B CD 2A 25    		CALL putins		
2649   1B8E             
2650   1B8E             		; Short delay to make sure char is there
2651   1B8E 16 0A       		MVI D,10
2652   1B90             TXdelay:
2653   1B90 0E FF       		MVI C,255   ;
2654   1B92 CD 7C 25    		CALL shortdelay ; Wait ~1ms to allow char to be received
2655   1B95 15          		DCR D
2656   1B96 C2 90 1B    		JNZ TXdelay
2657   1B99             
2658   1B99             ;RX Char
2659   1B99             ;RXwait:		
2660   1B99 CD A6 24    		CALL rxbuffer  ; Get Received Char
2661   1B9C 23          		INX H
2662   1B9D 7E          		MOV A,M
2663   1B9E FE BF       		CPI 0BFH
2664   1BA0             		;No character RX failed
2665   1BA0 C2 C4 1B    		JNZ rxfail
2666   1BA3 2B          		DCX H
2667   1BA4              
2668   1BA4 3E CE       		MVI A,0CEH     ; Set Cursor to RX gap
2669   1BA6 CD 2A 25    		CALL putins 
2670   1BA9             
2671   1BA9 7E          		MOV A,M
2672   1BAA CD 55 25    		CALL prthex
2673   1BAD             		
2674   1BAD B8          		CMP B
2675   1BAE C2 C4 1B    		JNZ rxfail
2676   1BB1             		
2677   1BB1             		;Reset Char received
2678   1BB1 23          		INX H
2679   1BB2 36 00       		MVI M,0
2680   1BB4             ;Next Char				
2681   1BB4 05          		DCR B
2682   1BB5 C2 6F 1B    		JNZ txnewchar
2683   1BB8             
2684   1BB8             rst65loopbacksuccess:				
2685   1BB8 21 1E 27    		LXI H,loopbackpassstr	
2686   1BBB C3 CD 1B    		JMP rst65testdone
2687   1BBE             
2688   1BBE             txfail:
2689   1BBE 21 2F 27    		LXI H,txfailstr
2690   1BC1 C3 CD 1B    		JMP rst65testdone
2691   1BC4             
2692   1BC4             rxfail:
2693   1BC4 21 40 27    		LXI H,rxfailstr
2694   1BC7 C3 CD 1B    		JMP rst65testdone
2695   1BCA             		
2696   1BCA             rst65loopbackfail:
2697   1BCA 21 0D 27    		LXI H,loopbackfailstr	
2698   1BCD             			
2699   1BCD             rst65testdone:
2700   1BCD F3          		DI
2701   1BCE 3E 1F       		MVI A,01FH     ; Prepare to re-enable RST 7.5 interrupt
2702   1BD0 30          		SIM            ; Re-enable RST 7.5 interrupt
2703   1BD1             		
2704   1BD1 3E 43               MVI A,43H      ; Stop timer
2705   1BD3 D3 B0       		OUT PIOCR      ; B8H Control Reg
2706   1BD5             
2707   1BD5 3E 80       		MVI A,080H     ; Set Cursor to upper line
2708   1BD7 CD 2A 25    		CALL putins			
2709   1BDA CD 35 25    		CALL putstr
2710   1BDD             waiting:
2711   1BDD CD A8 25    		CALL diagscreenpause ;Delay to allow review
2712   1BE0 C3 F6 1B    		JMP sysbustest
2713   1BE3             
2714   1BE3             ; ==========================================================
2715   1BE3             ; Serial port (6.5) Interrupt Service routine 	
2716   1BE3             ; ==========================================================	
2717   1BE3             serint:
2718   1BE3 E5          		PUSH H         ; \
2719   1BE4 D5          		PUSH D         ;  \ Save all registers on stack
2720   1BE5 C5          		PUSH B         ;  /
2721   1BE6 F5          		PUSH PSW       ; /
2722   1BE7             
2723   1BE7 DB C8       		IN UARTread    ; C8H         ; Serial Register
2724   1BE9             
2725   1BE9 CD A6 24    		CALL rxbuffer  ; Store received character
2726   1BEC 77          		MOV M,A
2727   1BED 23          		INX H
2728   1BEE 36 BF       		MVI M,0BFH     ; Char received 
2729   1BF0             
2730   1BF0 F1          		POP PSW     ; \
2731   1BF1 C1          		POP B       ;  \ Retrieve all registers on stack
2732   1BF2 D1          		POP D       ;  /
2733   1BF3 E1          		POP H		; /
2734   1BF4             		
2735   1BF4 FB          		EI
2736   1BF5 C9          		RET
2737   1BF6             
2738   1BF6             ; ##########################################################
2739   1BF6             ; ##########################################################
2740   1BF6             ; **********************************************************
2741   1BF6             ; Test Sys BUS @ 80H
2742   1BF6             ;  Read and write to the sysbus
2743   1BF6             ; **********************************************************
2744   1BF6             ;Write to the sys bus register
2745   1BF6             sysbustest:
2746   1BF6 F3          		DI 
2747   1BF7 CD 87 25    		CALL clrscreen
2748   1BFA             		
2749   1BFA 21 A7 26    		LXI H, sysbusteststr
2750   1BFD CD 35 25    		CALL putstr
2751   1C00             		
2752   1C00 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
2753   1C02 CD 2A 25    		CALL putins	
2754   1C05             		
2755   1C05 21 B8 26    		LXI H, systeststr
2756   1C08 CD 35 25    		CALL putstr
2757   1C0B             
2758   1C0B 21 FD 2A    		LXI H,ramtstdata ; Load the RAM byte test data table
2759   1C0E             sysbus1:
2760   1C0E 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
2761   1C10 CD 2A 25    		CALL putins
2762   1C13             
2763   1C13 7E          		MOV A,M   	     ; Get first entry
2764   1C14 FE FE       		CPI 0FEH         ; Check end of table
2765   1C16 CA 43 1C    		JZ sysbustestdone    
2766   1C19             	
2767   1C19 D3 80        		OUT sysreg     ; Send to the Sys bus port
2768   1C1B              		 	
2769   1C1B CD 55 25     		CALL prthex    ; Print the written character
2770   1C1E             
2771   1C1E 3E C9       		MVI A,0C9H     ; Set Cursor to RD back
2772   1C20 CD 2A 25    		CALL putins	
2773   1C23             		 			
2774   1C23 DB 80        		IN sysreg       ; Read from the sys bus port
2775   1C25             
2776   1C25 CD 55 25     		CALL prthex     ; Print the rd character
2777   1C28             
2778   1C28 BE          		CMP M 
2779   1C29 C2 3D 1C    		JNZ sysbustestfail
2780   1C2C CD B4 25    		CALL longdelay  ; Brief wait
2781   1C2F             
2782   1C2F 23          		INX H           ; Get next RAM test byte
2783   1C30             
2784   1C30             		;Print out the settings
2785   1C30 3E CE       		MVI A,0CEH     ; Set Cursor to Settings slot
2786   1C32 CD 2A 25    		CALL putins
2787   1C35             		
2788   1C35 DB 81       		IN setreg
2789   1C37 CD 55 25    		CALL prthex
2790   1C3A             
2791   1C3A C3 0E 1C    		JMP sysbus1
2792   1C3D             
2793   1C3D             sysbustestfail:
2794   1C3D 21 D0 25    		LXI H,sysfailstr
2795   1C40 C3 46 1C    		JMP sysbustestprt
2796   1C43             		
2797   1C43             sysbustestdone:				
2798   1C43 21 CA 25    		LXI H,passstr
2799   1C46             		
2800   1C46             sysbustestprt:
2801   1C46 3E 8A       		MVI A,08AH     ; Set Cursor to back to upper line
2802   1C48 CD 2A 25    		CALL putins	
2803   1C4B             		
2804   1C4B CD 35 25    		CALL putstr
2805   1C4E CD A8 25    		CALL diagscreenpause ;Delay to allow review
2806   1C51 C3 54 1C    		JMP lpttest	
2807   1C54             
2808   1C54             ; ##########################################################
2809   1C54             ; ##########################################################	
2810   1C54             ; **********************************************************
2811   1C54             ; Test Printer Port
2812   1C54             ; Write to the LPT port
2813   1C54             ; Check the strobe works
2814   1C54             ; Check busy- and busy works.
2815   1C54             ; **********************************************************
2816   1C54             lpttest:
2817   1C54 CD 87 25    		CALL clrscreen  ; Reset the screen for the new test
2818   1C57             		
2819   1C57 21 51 27    		LXI H,lptteststr
2820   1C5A CD 35 25    		CALL putstr
2821   1C5D             
2822   1C5D 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
2823   1C5F CD 2A 25    		CALL putins	
2824   1C62             		
2825   1C62 21 5A 27    		LXI H, lptloopteststr ;
2826   1C65 CD 35 25    		CALL putstr
2827   1C68             		
2828   1C68 11 FD 2A    		LXI D,ramtstdata ; Load the RAM byte test data table
2829   1C6B             lpttest1:
2830   1C6B 3E C3        		MVI A,0C3H     ; Set Cursor to back for new count
2831   1C6D CD 2A 25    		CALL putins	
2832   1C70             		
2833   1C70 1A          		LDAX D   	 ; D = Current RAM byte test data
2834   1C71 FE FE       		CPI 0FEH     ; Check end of table
2835   1C73 CA 9E 1C    		JZ lpttestdone1
2836   1C76             
2837   1C76             		;CMA         ; Complement
2838   1C76 D3 B1       		OUT PIOA   	 ; B9H 
2839   1C78 CD 55 25    		CALL prthex  ; Print the data
2840   1C7B             			
2841   1C7B 4F          		MOV C,A      ; Save A
2842   1C7C             	    
2843   1C7C             		; Pulse the strobe line to write data to register   
2844   1C7C CD 7D 24    		CALL stromlocation
2845   1C7F 7E          		MOV A,M
2846   1C80 47          		MOV B,A
2847   1C81 F6 02       		ORI 02H
2848   1C83 D3 E8       		OUT CtrlReg 	 ; E8H
2849   1C85 78          		MOV A,B
2850   1C86 D3 E8       		OUT CtrlReg 	 ; E8H
2851   1C88             
2852   1C88 1A          		LDAX D
2853   1C89             
2854   1C89 3E C9        		MVI A,0C9H     ; Set Cursor to back for new count
2855   1C8B CD 2A 25    		CALL putins		
2856   1C8E             
2857   1C8E DB 82       		IN lptreg      ; Read the LPT reg
2858   1C90             		
2859   1C90             		;CMA 
2860   1C90 CD 55 25    		CALL prthex    ; Print the data
2861   1C93             
2862   1C93 CD B4 25    		CALL longdelay
2863   1C96             
2864   1C96 B9          		CMP C
2865   1C97 C2 48 1D    		JNZ lpttestfail		
2866   1C9A 13          		INX D          ; Get next RAM test byte
2867   1C9B C3 6B 1C    		JMP lpttest1
2868   1C9E             		
2869   1C9E             		
2870   1C9E             lpttestdone1:				
2871   1C9E 3E 8A       		MVI A,08AH     ; Set Cursor to back upper line
2872   1CA0 CD 2A 25    		CALL putins	
2873   1CA3             		
2874   1CA3 21 CA 25    		LXI H,passstr
2875   1CA6             		
2876   1CA6 CD 35 25    		CALL putstr
2877   1CA9 CD A8 25    		CALL diagscreenpause ;Delay to allow review
2878   1CAC             		
2879   1CAC             ; *********************************************
2880   1CAC             ; ** Test the two busy lines, busy and busy- **
2881   1CAC             ; *********************************************
2882   1CAC             lpttestnext:
2883   1CAC             ;Check Busy and Busy- lines PC1 Busy- PC2 Busy
2884   1CAC 3E 80        		MVI A,080H     ; Set Cursor to back to start
2885   1CAE CD 2A 25    		CALL putins	
2886   1CB1 21 66 27    		LXI H,nbusyteststr
2887   1CB4 CD 35 25    		CALL putstr	
2888   1CB7             
2889   1CB7             
2890   1CB7 3E C0        		MVI A,0C0H     ; Set Cursor to back to start
2891   1CB9 CD 2A 25    		CALL putins	
2892   1CBC 21 77 27    		LXI H,busyteststr
2893   1CBF CD 35 25    		CALL putstr	
2894   1CC2             
2895   1CC2 3E 86        		MVI A,086H     ; Set Cursor to BUSY-
2896   1CC4 CD 2A 25    		CALL putins	
2897   1CC7             
2898   1CC7             ; Set up BUSY line tests
2899   1CC7 AF          		XRA A         ; Set Busy and Busy- to 0
2900   1CC8 4F          		MOV C,A
2901   1CC9 D3 B1       		OUT PIOA   	  ; B9H 
2902   1CCB             
2903   1CCB             		; Pulse the strobe line to write data to register   
2904   1CCB CD 7D 24    		CALL stromlocation
2905   1CCE 7E          		MOV A,M
2906   1CCF 47          		MOV B,A
2907   1CD0 F6 02       		ORI 02H
2908   1CD2 D3 E8       		OUT CtrlReg 	 ; E8H
2909   1CD4 78          		MOV A,B
2910   1CD5 D3 E8       		OUT CtrlReg 	 ; E8H
2911   1CD7             
2912   1CD7             		; Read the state of the busy lines				
2913   1CD7 DB B3       		IN PIOC        ; Read Port C
2914   1CD9             	
2915   1CD9 47          		MOV B,A
2916   1CDA             			
2917   1CDA E6 02       		ANI 002H       ; Get Busy-	
2918   1CDC CA E6 1C    		JZ nbusyzero
2919   1CDF             		
2920   1CDF 3E 46       		MVI A,'F'
2921   1CE1 0E 01       		MVI C,1
2922   1CE3 C3 E8 1C    		JMP nbusydone
2923   1CE6             		
2924   1CE6             nbusyzero:
2925   1CE6 3E 30       		MVI A,'0'
2926   1CE8             nbusydone:
2927   1CE8 CD 1F 25    		CALL putch
2928   1CEB             
2929   1CEB 3E C6        		MVI A,0C6H     ; Set Cursor to BUSY
2930   1CED CD 2A 25    		CALL putins	
2931   1CF0             				
2932   1CF0 78          		MOV A,B
2933   1CF1             		
2934   1CF1 E6 04       		ANI 004H       ; Get Busy	
2935   1CF3 CA FD 1C    		JZ busyzero
2936   1CF6 3E 46       		MVI A,'F'
2937   1CF8 0E 01       		MVI C,1
2938   1CFA C3 FF 1C    		JMP busydone
2939   1CFD             busyzero:
2940   1CFD 3E 30       		MVI A,'0'
2941   1CFF             busydone:
2942   1CFF CD 1F 25    		CALL putch
2943   1D02             
2944   1D02             
2945   1D02 3E 87        		MVI A,087H     ; Set Cursor to BUSY-
2946   1D04 CD 2A 25    		CALL putins	
2947   1D07             		
2948   1D07 3E 03       		MVI A,3       ; Set Busy and Busy- to 1
2949   1D09 D3 B1       		OUT PIOA   	  ; B9H 
2950   1D0B             
2951   1D0B             lpttestbusy:
2952   1D0B             		; Pulse the strobe line to write data to register   
2953   1D0B CD 7D 24    		CALL stromlocation
2954   1D0E 7E          		MOV A,M
2955   1D0F 47          		MOV B,A
2956   1D10 F6 02       		ORI 02H
2957   1D12 D3 E8       		OUT CtrlReg 	 ; E8H
2958   1D14 78          		MOV A,B
2959   1D15 D3 E8       		OUT CtrlReg 	 ; E8H
2960   1D17             
2961   1D17             		; Read the state of the busy lines				
2962   1D17 DB B3       		IN PIOC        ; Read Port C
2963   1D19             	
2964   1D19 47          		MOV B,A
2965   1D1A             			
2966   1D1A E6 02       		ANI 002H       ; Get Busy-	
2967   1D1C C2 26 1D    		JNZ nbusyone
2968   1D1F             		
2969   1D1F 3E 46       		MVI A,'F'
2970   1D21 0E 01       		MVI C,1
2971   1D23 C3 28 1D    		JMP nbusydone1
2972   1D26             		
2973   1D26             nbusyone:
2974   1D26 3E 31       		MVI A,'1'
2975   1D28             nbusydone1:
2976   1D28 CD 1F 25    		CALL putch
2977   1D2B             
2978   1D2B 3E C7        		MVI A,0C7H     ; Set Cursor to BUSY
2979   1D2D CD 2A 25    		CALL putins	
2980   1D30             				
2981   1D30 78          		MOV A,B
2982   1D31             		
2983   1D31 E6 04       		ANI 004H       ; Get Busy	
2984   1D33 C2 3D 1D    		JNZ busyone
2985   1D36 3E 46       		MVI A,'F'
2986   1D38 0E 01       		MVI C,1
2987   1D3A C3 3F 1D    		JMP busydone1
2988   1D3D             		
2989   1D3D             busyone:
2990   1D3D 3E 31       		MVI A,'1'
2991   1D3F             busydone1:
2992   1D3F CD 1F 25    		CALL putch
2993   1D42             				
2994   1D42             ;Check C for failures
2995   1D42 79          		MOV A,C
2996   1D43 FE 00       		CPI 0
2997   1D45 CA 4E 1D    		JZ lpttestdone
2998   1D48             
2999   1D48             lpttestfail:  
3000   1D48 21 D0 25    		LXI H,lptfailstr
3001   1D4B C3 51 1D    		JMP lptprtdone
3002   1D4E             		
3003   1D4E             lpttestdone:
3004   1D4E 21 CA 25    		LXI H,passstr
3005   1D51             
3006   1D51             lptprtdone:
3007   1D51 3E 89       		MVI A,089H     ; Set Cursor to back upper line
3008   1D53 CD 2A 25    		CALL putins	
3009   1D56 CD 35 25    		CALL putstr
3010   1D59             
3011   1D59             		;Set up for the BCR test
3012   1D59 3E 80       		MVI A,080H
3013   1D5B D3 B1       		OUT PIOA
3014   1D5D             
3015   1D5D             		; Pulse the strobe line to write data to register   
3016   1D5D CD 7D 24    		CALL stromlocation
3017   1D60 7E          		MOV A,M
3018   1D61 47          		MOV B,A
3019   1D62 F6 02       		ORI 02H
3020   1D64 D3 E8       		OUT CtrlReg 	 ; E8H
3021   1D66 78          		MOV A,B
3022   1D67 D3 E8       		OUT CtrlReg 	 ; E8H
3023   1D69             
3024   1D69 CD A8 25    		CALL diagscreenpause ;Delay to allow review
3025   1D6C C3 6F 1D    		JMP rst55test	
3026   1D6F             
3027   1D6F             ; ##########################################################
3028   1D6F             ; ##########################################################
3029   1D6F             ; **********************************************************
3030   1D6F             ; Test BCR
3031   1D6F             ; Read the port bit
3032   1D6F             ; Check the interrupt works.
3033   1D6F             ; **********************************************************
3034   1D6F             bcrloopcnt .equ 250
3035   1D6F             
3036   1D6F             rst55test:
3037   1D6F CD 87 25    		CALL clrscreen
3038   1D72             		
3039   1D72 21 88 27    		LXI H,rst55teststr
3040   1D75 CD 35 25    		CALL putstr
3041   1D78              		;CALL longdelay  ; Let the clock tick
3042   1D78             
3043   1D78 3E C0       		MVI A,0C0H     ; Set Cursor to back to start lower line
3044   1D7A CD 2A 25    		CALL putins
3045   1D7D             
3046   1D7D 21 91 27    		LXI H,rst55loopteststr
3047   1D80 CD 35 25    		CALL putstr
3048   1D83             
3049   1D83 CD B3 24    		CALL rst55testlocation
3050   1D86 36 00       		MVI M,0        ; Reset button counter
3051   1D88             		 				
3052   1D88 3E 0E       		MVI A,00EH     ; Prepare to re-enable RST 5.5 interrupt, Set bit 0
3053   1D8A 30          		SIM            ; Re-enable RST 5.5 interrupt
3054   1D8B FB          		EI             ; Enable Interrupts
3055   1D8C              
3056   1D8C 06 FA        		MVI B,bcrloopcnt
3057   1D8E             rst55wait:
3058   1D8E             
3059   1D8E 3E 00       		MVI A,000H    ; Set BCR to 0
3060   1D90 D3 B1       		OUT PIOA      ; B9H 
3061   1D92             
3062   1D92             		; Pulse the strobe line to write data to ctrl register   
3063   1D92 CD 7D 24    		CALL stromlocation
3064   1D95 7E          		MOV A,M
3065   1D96 4F          		MOV C,A
3066   1D97 F6 02       		ORI 02H
3067   1D99 D3 E8       		OUT CtrlReg 	 ; E8H
3068   1D9B 79          		MOV A,C
3069   1D9C D3 E8       		OUT CtrlReg 	 ; E8H
3070   1D9E             				
3071   1D9E             		; Short delay to let the interrupt happen
3072   1D9E 16 01       		MVI D,1
3073   1DA0             BCRdelay:
3074   1DA0 0E FF       		MVI C,255   ;
3075   1DA2 CD 7C 25    		CALL shortdelay ; Wait ~1ms to allow interrupt
3076   1DA5 15          		DCR D
3077   1DA6 C2 A0 1D    		JNZ BCRdelay
3078   1DA9             
3079   1DA9             		; Print the loop count and interrupt counts
3080   1DA9 3E C3        		MVI A,0C3H     ; Set Cursor to loop location
3081   1DAB CD 2A 25    		CALL putins
3082   1DAE             
3083   1DAE 78          		MOV A,B
3084   1DAF 3D          		DCR A
3085   1DB0             
3086   1DB0 CD 55 25    		CALL prthex   ; Print the count
3087   1DB3             
3088   1DB3 3E C9        		MVI A,0C9H     ; Set Interrupt count prt location
3089   1DB5 CD 2A 25    		CALL putins
3090   1DB8             
3091   1DB8 CD B3 24    		CALL rst55testlocation
3092   1DBB 7E          		MOV A,M
3093   1DBC             				
3094   1DBC CD 55 25    		CALL prthex    ; Print the interrupt count
3095   1DBF             				
3096   1DBF 05          		DCR B		
3097   1DC0 C2 8E 1D    		JNZ rst55wait
3098   1DC3             
3099   1DC3             
3100   1DC3             ;Complete test the results
3101   1DC3 F3          		DI              ; Disable interrupts
3102   1DC4 3E 1F       		MVI A,01FH      ; Prepare to disable all interrupts
3103   1DC6 30          		SIM  
3104   1DC7             
3105   1DC7 3E 87       		MVI A,087H     ; Set Cursor to top line
3106   1DC9 CD 2A 25    		CALL putins	
3107   1DCC             
3108   1DCC CD B3 24    		CALL rst55testlocation
3109   1DCF 7E          		MOV A,M
3110   1DD0             			
3111   1DD0 21 CA 25    		LXI H,passstr
3112   1DD3             		
3113   1DD3 FE FA       		CPI bcrloopcnt				
3114   1DD5 CA DB 1D    		JZ rst55testdone  ; If count == loopcount then Pass
3115   1DD8             		
3116   1DD8 21 D0 25    		LXI H,testfailstr ; Else failed
3117   1DDB             		
3118   1DDB             rst55testdone:
3119   1DDB CD 35 25    		CALL putstr
3120   1DDE CD A8 25    		CALL diagscreenpause ;Delay to allow review
3121   1DE1             
3122   1DE1 C3 14 1E    		JMP stromtest
3123   1DE4             
3124   1DE4             ; ==========================================================
3125   1DE4             ; BCR Interrupt Service routine
3126   1DE4             ; 	BCR PC3. Low level interrupt
3127   1DE4             ; ==========================================================	
3128   1DE4             bcrint:
3129   1DE4 E5          		PUSH H      ; \
3130   1DE5 D5          		PUSH D      ;  \ Save all registers on stack
3131   1DE6 C5          		PUSH B      ;  /
3132   1DE7 F5          		PUSH PSW    ; /
3133   1DE8             
3134   1DE8             
3135   1DE8 3E CE        		MVI A,0CEH     ; Set PIOC to count
3136   1DEA CD 2A 25    		CALL putins
3137   1DED             
3138   1DED             		;MVI A,'>'
3139   1DED             		;CALL putch		
3140   1DED             
3141   1DED CD B3 24    		CALL rst55testlocation
3142   1DF0             
3143   1DF0             		;Check the BCR bit is 0
3144   1DF0 DB B3       		IN PIOC        ; Read the PIO PC3 
3145   1DF2 CD 55 25        	CALL prthex
3146   1DF5 E6 08       		ANI 008H 	   ; Access the BCR Bit it is inverted so should be '1'
3147   1DF7 CA FB 1D    		JZ bcrintdone  ; If not zero do not inc count
3148   1DFA             				
3149   1DFA 34          		INR M				
3150   1DFB             		
3151   1DFB             bcrintdone:
3152   1DFB             		;Clear the interrupt
3153   1DFB 3E 80       		MVI A,080H    ; Set BCR to 1
3154   1DFD D3 B1       		OUT PIOA      ; B9H 
3155   1DFF             
3156   1DFF             		; Pulse the strobe line to write data to register   
3157   1DFF CD 7D 24    		CALL stromlocation
3158   1E02 7E          		MOV A,M
3159   1E03 4F          		MOV C,A
3160   1E04 F6 02       		ORI 02H
3161   1E06 D3 E8       		OUT CtrlReg 	 ; E8H
3162   1E08 79          		MOV A,C
3163   1E09 D3 E8       		OUT CtrlReg 	 ; E8H
3164   1E0B             
3165   1E0B F1          		POP PSW     ; \
3166   1E0C C1          		POP B       ;  \ Retrieve all registers on stack
3167   1E0D D1          		POP D       ;  /
3168   1E0E E1          		POP H		; /		
3169   1E0F FB          		EI
3170   1E10 C9          		RET
3171   1E11             		
3172   1E11             ; ##########################################################
3173   1E11             ; ##########################################################
3174   1E11             ; **********************************************************
3175   1E11             ; Test STROM register
3176   1E11             ; The STROM register controls: CLK, LPT, REMOTE, ROM selection
3177   1E11             ;  CLK bit is tested in Clock test
3178   1E11             ;  LPT bit is tested in the LPT test
3179   1E11             ;  REMOTE bit is tested in the cassette test
3180   1E11             ;
3181   1E11             ; STROM bit switches to the OPTROM.  During the switch the
3182   1E11             ; Range 0040-0048H is read to RAM. If the switch works 
3183   1E11             ; the data will be random based on the absence/presence of an
3184   1E11             ; OPTROM.  This location contains 'NO OPTROM' in the main test
3185   1E11             ; ROM.  If 'NO OPTROM' is read then the switch did not work.
3186   1E11             ; Code is run from the RAM in order to read the ROM contents.
3187   1E11             ; **********************************************************
3188   1E11             stromtestpiofail:
3189   1E11 3E 77       		MVI A,077H
3190   1E13 F5          		PUSH PSW
3191   1E14             stromtest:
3192   1E14 CD 87 25    		CALL clrscreen  ; Reset the screen for the new test
3193   1E17             		
3194   1E17 21 81 28    		LXI H,stromteststr ; 
3195   1E1A CD 35 25    		CALL putstr	
3196   1E1D             
3197   1E1D 3E C0        		MVI A,0C0H      ; Set Cursor to Bottom line
3198   1E1F CD 2A 25    		CALL putins
3199   1E22             		
3200   1E22             ;Find which memory version is being used
3201   1E22 CD 57 24    		CALL stackstart	  ;Which RAM is being used 9, B, D, F (80,A0,C0,E0) 
3202   1E25             		
3203   1E25 7A          		MOV A,D
3204   1E26             
3205   1E26 E6 F0       		ANI 0F0H
3206   1E28             ;RAM3 is the active one	
3207   1E28 FE 90       		CPI 090H
3208   1E2A C2 4C 1E    		JNZ ram2loc
3209   1E2D CD 00 91    		CALL optram3
3210   1E30 CD 57 91    		CALL getrex3
3211   1E33 2A 55 91    		LHLD checksum3t
3212   1E36 E5          		PUSH H
3213   1E37 2A 70 91    		LHLD rexstore3 ;RE
3214   1E3A E5          		PUSH H
3215   1E3B 2A 72 91    		LHLD rexstore3+2 ;X!
3216   1E3E E5          		PUSH H
3217   1E3F 2A 53 91    		LHLD checksum3  ; Get the checksum value
3218   1E42 E5          		PUSH H
3219   1E43 21 C1 28    		LXI H,ram3used
3220   1E46 11 4B 91    		LXI D,optram3open
3221   1E49 C3 BE 1E    		JMP stromdetect
3222   1E4C             		
3223   1E4C             ;RAM2 is the active one	
3224   1E4C             ram2loc:		
3225   1E4C FE B0       		CPI 0B0H
3226   1E4E C2 70 1E    		JNZ ram1loc
3227   1E51 CD 00 B1    		CALL optram2
3228   1E54 CD 57 B1    		CALL getrex2
3229   1E57 2A 55 B1    		LHLD checksum2t
3230   1E5A E5          		PUSH H
3231   1E5B 2A 70 B1    		LHLD rexstore2 ;RE
3232   1E5E E5          		PUSH H
3233   1E5F 2A 72 B1    		LHLD rexstore2+2 ;X!
3234   1E62 E5          		PUSH H
3235   1E63 2A 53 B1    		LHLD checksum2  ; Get the checksum value
3236   1E66 E5          		PUSH H
3237   1E67 21 BF 28    		LXI H,ram2used	
3238   1E6A 11 4B B1    		LXI D,optram2open
3239   1E6D C3 BE 1E    		JMP stromdetect
3240   1E70             
3241   1E70             ;RAM1 is the active one	
3242   1E70             ram1loc:		
3243   1E70 FE D0       		CPI 0D0H
3244   1E72 C2 94 1E    		JNZ ram0loc
3245   1E75 CD 00 D1    		CALL optram1
3246   1E78 CD 57 D1    		CALL getrex1
3247   1E7B 2A 55 D1    		LHLD checksum1t
3248   1E7E E5          		PUSH H
3249   1E7F 2A 70 D1    		LHLD rexstore1 ;RE
3250   1E82 E5          		PUSH H
3251   1E83 2A 72 D1    		LHLD rexstore1+2 ;X!
3252   1E86 E5          		PUSH H
3253   1E87 2A 53 D1    		LHLD checksum1  ; Get the checksum value
3254   1E8A E5          		PUSH H
3255   1E8B 21 BD 28    		LXI H,ram1used	
3256   1E8E 11 4B D1    		LXI D,optram1open
3257   1E91 C3 BE 1E    		JMP stromdetect
3258   1E94             
3259   1E94             ;RAM0 is the active one	
3260   1E94             ram0loc:	
3261   1E94 FE F0       		CPI 0F0H
3262   1E96 C2 B8 1E    		JNZ ramnotfound
3263   1E99 CD 00 F1    		CALL optram0
3264   1E9C CD 57 F1    		CALL getrex0
3265   1E9F 2A 55 F1    		LHLD checksum0t
3266   1EA2 E5          		PUSH H
3267   1EA3 2A 70 F1    		LHLD rexstore0 ;RE
3268   1EA6 E5          		PUSH H
3269   1EA7 2A 72 F1    		LHLD rexstore0+2 ;X!
3270   1EAA E5          		PUSH H		
3271   1EAB 2A 53 F1    		LHLD checksum0  ; Get the checksum value
3272   1EAE E5          		PUSH H
3273   1EAF 21 BB 28    		LXI H,ram0used	
3274   1EB2 11 4B F1    		LXI D,optram0open
3275   1EB5 C3 BE 1E    		JMP stromdetect	
3276   1EB8             
3277   1EB8             ramnotfound:
3278   1EB8 21 B4 28    		LXI H,stromfailurestr
3279   1EBB C3 E3 1E    		JMP stromtestdone
3280   1EBE             			
3281   1EBE             stromdetect:	
3282   1EBE CD 35 25    		CALL putstr
3283   1EC1 3E 80        		MVI A,080H      ; Set Cursor to top line
3284   1EC3 CD 2A 25    		CALL putins				
3285   1EC6 EB          		XCHG
3286   1EC7 11 40 00    		LXI D,040H      ; Get start of the ROM to compare values
3287   1ECA 06 06       		MVI B,6
3288   1ECC             optromloop:
3289   1ECC 1A          		LDAX D
3290   1ECD BE          		CMP M
3291   1ECE C2 DA 1E    		JNZ optromfound
3292   1ED1 13          		INX D
3293   1ED2 23          		INX H
3294   1ED3 05          		DCR B
3295   1ED4 CA E0 1E    		JZ stromtestfail
3296   1ED7 C3 CC 1E    		JMP optromloop
3297   1EDA             optromfound:
3298   1EDA 21 92 28    		LXI H,optromfoundstr
3299   1EDD C3 E3 1E    		JMP stromtestdone
3300   1EE0             				
3301   1EE0             stromtestfail:
3302   1EE0 21 A3 28    		LXI H,nooptromstr
3303   1EE3             				
3304   1EE3             stromtestdone:
3305   1EE3 CD 35 25    		CALL putstr
3306   1EE6             		
3307   1EE6             romchecksumchk:         ; Check the checksum
3308   1EE6 3E C1        		MVI A,0C1H      ; Set Cursor to Bottom line
3309   1EE8 CD 2A 25    		CALL putins
3310   1EEB 21 C3 28    		LXI H,chksum
3311   1EEE CD 35 25    		CALL putstr
3312   1EF1             
3313   1EF1 3E C2        		MVI A,0C2H      ; Set Cursor to Bottom line
3314   1EF3 CD 2A 25    		CALL putins		
3315   1EF6 E1          		POP H           ; Get the checksum
3316   1EF7              
3317   1EF7             ; Print out the check sum
3318   1EF7 7C           		MOV A,H
3319   1EF8 CD 55 25    		CALL prthex
3320   1EFB 7D          		MOV A,L
3321   1EFC CD 55 25    		CALL prthex   
3322   1EFF             
3323   1EFF EB          		XCHG   ; Save the checksum
3324   1F00             
3325   1F00             ;.text "0123456789ABCDEF"
3326   1F00             ;.text "x yyyy 
3327   1F00             
3328   1F00 3E C7        		MVI A,0C7H      ; Set Cursor to Bottom line
3329   1F02 CD 2A 25    		CALL putins		
3330   1F05             		
3331   1F05             ; See if OPTROM is a REX
3332   1F05 E1          		POP H
3333   1F06 7C          		MOV A,H
3334   1F07 FE 21       		CPI '!'
3335   1F09 C2 25 1F    		JNZ rexidend1
3336   1F0C 7D          		MOV A,L
3337   1F0D FE 58       		CPI 'X'
3338   1F0F C2 25 1F    		JNZ rexidend1
3339   1F12 E1          		POP H
3340   1F13 7C          		MOV A,H
3341   1F14 FE 45       		CPI 'E'
3342   1F16 C2 26 1F    		JNZ rexidend
3343   1F19 7D          		MOV A,L
3344   1F1A FE 52       		CPI 'R'
3345   1F1C C2 26 1F    		JNZ rexidend
3346   1F1F             		
3347   1F1F 21 DA 28    		LXI H,idrex
3348   1F22 C3 50 1F    		JMP optromfin	; HL now point to ID string	
3349   1F25             		
3350   1F25             				
3351   1F25             rexidend1:
3352   1F25 E1          		POP H ; Clean the stack in the REX! check fails
3353   1F26             		
3354   1F26             rexidend:
3355   1F26 EB          		XCHG  ; Retrieve the checksum
3356   1F27 11 40 29    		LXI D,optromidtable
3357   1F2A 01 07 00    		LXI B, 7
3358   1F2D             		
3359   1F2D             findtheoptromid:
3360   1F2D 1A          		LDAX D
3361   1F2E 13          		INX D 
3362   1F2F 94          		SUB H
3363   1F30 C2 3D 1F    		JNZ nextid1
3364   1F33 1A          		LDAX D
3365   1F34 13          		INX D
3366   1F35 95          		SUB L
3367   1F36 C2 3E 1F    		JNZ nextid
3368   1F39 EB          		XCHG
3369   1F3A C3 50 1F    		JMP optromfin	; HL now point to ID string	
3370   1F3D             nextid1:
3371   1F3D 13          		INX D
3372   1F3E             nextid:
3373   1F3E EB          		XCHG
3374   1F3F 09          		DAD B
3375   1F40 EB          		XCHG
3376   1F41 3E 29       		MVI A,((endoptromidtable >> 8) & 0FFH)
3377   1F43 92          		SUB D
3378   1F44 C2 2D 1F    		JNZ findtheoptromid
3379   1F47 3E 76       		MVI A,endoptromidtable & 0FFH
3380   1F49 93          		SUB E
3381   1F4A C2 2D 1F    		JNZ findtheoptromid	
3382   1F4D             					
3383   1F4D 21 D3 28    		LXI H,optromunknow
3384   1F50             		
3385   1F50             optromfin:
3386   1F50 CD 35 25    		CALL putstr
3387   1F53             		
3388   1F53 3E CC        		MVI A,0CCH      ; Set Cursor to Bottom line
3389   1F55 CD 2A 25    		CALL putins		
3390   1F58 E1          		POP H           ; Get the checksum for the test rom
3391   1F59             		
3392   1F59             ; Print out the check sum of the test ROM
3393   1F59 7C           		MOV A,H
3394   1F5A CD 55 25    		CALL prthex
3395   1F5D 7D          		MOV A,L
3396   1F5E CD 55 25    		CALL prthex 		
3397   1F61             
3398   1F61 CD A8 25    		CALL diagscreenpause ;Delay to allow review
3399   1F64             		
3400   1F64 F1          		POP PSW
3401   1F65 FE 77       		CPI 077H
3402   1F67 CA C5 21    		JZ castest					
3403   1F6A             
3404   1F6A C3 6D 1F    		JMP chkkbd
3405   1F6D             
3406   1F6D             
3407   1F6D             ; ##########################################################
3408   1F6D             ; ##########################################################
3409   1F6D             ; **********************************************************
3410   1F6D             ; Test Keyboard
3411   1F6D             ;  Determine if there is a real keyboard or loop back.
3412   1F6D             ;  A real keyboard or loopback maybe used to test the port.
3413   1F6D             ;  The loopback connects PA0-PA7 to KR0-KR7, this allows a 
3414   1F6D             ;  direct validation that the connectors are good and that
3415   1F6D             ;  M13 and M15 are functional.  
3416   1F6D             :  NOTE: PB0 is not tested using the loopback.  It is however
3417   1F6D             ;  exercised in the LCD test.  
3418   1F6D             ;
3419   1F6D             ; **********************************************************
3420   1F6D             ; write 0H to Port A 
3421   1F6D             ; read back the keyboard port. 
3422   1F6D             ;	If keybd = 00H then loopback test 
3423   1F6D             ;	else keyboard test
3424   1F6D             ;   
3425   1F6D             chkkbd:
3426   1F6D CD 87 25    		CALL clrscreen ; Clear the diag screen for the test
3427   1F70             		
3428   1F70 AF          		XRA A  		; Set PIO A port to 0, this sets CSx lines	
3429   1F71 D3 B1       		OUT PIOA	
3430   1F73             	
3431   1F73 DB E8       		IN readkbd  ; Read the keyboard register
3432   1F75             				
3433   1F75 FE FF       		CPI 0FFH
3434   1F77 CA D2 1F    		JZ kbdtest  ; If not 0 then real Keyboard is present	
3435   1F7A             					; else continue test using loopback
3436   1F7A             
3437   1F7A             ; **********************************************************
3438   1F7A             ; Test keyboard loopback
3439   1F7A             ;  Keyboard ports looped back run through the 256 possible 
3440   1F7A             ;  values check they are valid. 
3441   1F7A             ; **********************************************************
3442   1F7A             loopbacktest:
3443   1F7A 3E 80       		MVI A,080H      ; Set Cursor to top line
3444   1F7C CD 2A 25    		CALL putins
3445   1F7F             		
3446   1F7F 21 4F 26    		LXI H,loopbackstrdata ; Indicate this is a loopback test
3447   1F82 CD 35 25    		CALL putstr
3448   1F85             	
3449   1F85             ; ==========================================================
3450   1F85             ; Test data lines to Keyboard driver KR0-KR7 to PA0-PA7
3451   1F85             ; ==========================================================
3452   1F85 21 FD 2A    		LXI H,loopbacktstdata ; Reuse RAM byte test data table
3453   1F88             		
3454   1F88             tstloopback:
3455   1F88 7E          		MOV A,M          ; H = Current RAM byte test data
3456   1F89 FE FE       		CPI 0FEH         ; Check end of table
3457   1F8B CA 9A 1F    		JZ tstloopbackok       
3458   1F8E D3 B1       		OUT PIOA	     ; Write to Keyboard loopback
3459   1F90 DB E8       		IN readkbd       ; Read Keyboard register
3460   1F92 BE          		CMP M		     ; Compare locations
3461   1F93 C2 A3 1F    		JNZ tstloopbackfail ; Not equal location failed
3462   1F96 23          		INX H            ; Get next RAM test byte
3463   1F97 C3 88 1F    		JMP tstloopback  
3464   1F9A             		
3465   1F9A             tstloopbackok:
3466   1F9A 21 CA 25    		LXI H,passstr    ; Output PASS to diag LCD
3467   1F9D CD 35 25    		CALL putstr      ; Indicate LCD Data bus pass
3468   1FA0 C3 CC 1F    		JMP loopbacktestend
3469   1FA3             			
3470   1FA3             tstloopbackfail:
3471   1FA3 F5          		PUSH PSW         ; Save the failing data
3472   1FA4 E5          		PUSH H
3473   1FA5             		
3474   1FA5 21 D0 25    		LXI H,loopbackfail ; Output FAIL to diag LCD
3475   1FA8 CD 35 25    		CALL putstr
3476   1FAB             		
3477   1FAB 3E C0       		MVI A,0C0H      ; Set Cursor to next line
3478   1FAD CD 2A 25    		CALL putins
3479   1FB0             		
3480   1FB0 21 5B 26    		LXI H,loopbackstrstat ; Output WR RD text to diag LCD
3481   1FB3 CD 35 25    		CALL putstr		
3482   1FB6             
3483   1FB6 3E C3       		MVI A,0C3H     ; Set Cursor to WR to location
3484   1FB8 CD 2A 25    		CALL putins
3485   1FBB             		
3486   1FBB             		; Print the data written
3487   1FBB E1          		POP H         ; Retrieve the data written
3488   1FBC 7E          		MOV A,M        						
3489   1FBD CD 55 25    		CALL prthex
3490   1FC0             
3491   1FC0 3E C9       		MVI A,0C9H     ; Set Cursor to RD to location
3492   1FC2 CD 2A 25    		CALL putins				
3493   1FC5             		
3494   1FC5             		; Print out Read value
3495   1FC5 F1          		POP PSW        ; Retrieve the data read
3496   1FC6 CD 55 25    		CALL prthex
3497   1FC9 CD A8 25    		CALL diagscreenpause ;Delay to allow review
3498   1FCC             
3499   1FCC             loopbacktestend:		
3500   1FCC CD A8 25    		CALL diagscreenpause ;Delay to allow review
3501   1FCF C3 C5 21    		JMP castest
3502   1FD2             
3503   1FD2             ; **********************************************************
3504   1FD2             ; Test Keyboard
3505   1FD2             ;  Real keyboard present use this set of tests.
3506   1FD2             ; **********************************************************
3507   1FD2             ; Press key on keyboard
3508   1FD2             kbdtest:
3509   1FD2             		; CALL clrscreen
3510   1FD2             		
3511   1FD2 21 6C 26    		LXI H,kbdteststr
3512   1FD5 CD 35 25    		CALL putstr
3513   1FD8             		
3514   1FD8 3E C0        		MVI A,0C0H     ; Set Cursor to back to start lower line
3515   1FDA CD 2A 25    		CALL putins	
3516   1FDD             
3517   1FDD 21 76 26    		LXI H,keypressedstr ; 0C6H
3518   1FE0 CD 35 25    		CALL putstr
3519   1FE3             
3520   1FE3 CD 97 24    		CALL rst75testlocationreset ; Reset the timeout
3521   1FE6             	
3522   1FE6 3E 1B       		MVI A,1BH      ; Prepare to re-enable RST 7.5 interrupt, Set bit 0
3523   1FE8 30          		SIM            ; Re-enable RST 7.5 interrupt
3524   1FE9 FB          		EI
3525   1FEA             			
3526   1FEA             kbdtestloop:		
3527   1FEA CD 3F 20    		CALL scankeyboard
3528   1FED             		
3529   1FED             		;Wait for 10s after last key press
3530   1FED CD 9F 24    		CALL rst75testlocationget
3531   1FF0 FE 14       		CPI 20   ; See if 10s is up
3532   1FF2 DA F8 1F    		JC kbdtestcont
3533   1FF5 C3 FE 1F    		JMP kbdtestdone
3534   1FF8             
3535   1FF8             kbdtestcont:		
3536   1FF8 CD 13 20    		CALL ctrlbreak ; See if CTRL-BREAK pressed
3537   1FFB C2 EA 1F    		JNZ kbdtestloop
3538   1FFE             		
3539   1FFE             kbdtestdone:
3540   1FFE F3          		DI
3541   1FFF 3E 1F       		MVI A,1FH      ; Prepare to disable RST 7.5 interrupt, Set bit 0
3542   2001 30          		SIM            ; Disable RST 7.5 interrupt
3543   2002             				
3544   2002 3E C0        		MVI A,0C0H     ; Set Cursor to back to start lower line
3545   2004 CD 2A 25    		CALL putins	
3546   2007 21 8D 26    		LXI H,kbdtestdonestr
3547   200A CD 35 25    		CALL putstr
3548   200D             		
3549   200D CD A8 25    		CALL diagscreenpause ;Delay to allow review
3550   2010             
3551   2010 C3 C5 21    		JMP castest
3552   2013             			
3553   2013             ; ======================================================
3554   2013             ; Check for CTRL-BREAK
3555   2013             ;  Z flag set if CTRL-BREAK pressed
3556   2013             ; ======================================================
3557   2013             ctrlbreak:
3558   2013 3E E4       		MVI A,0E4H      ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=serial, Keyscan col 9 enable)
3559   2015 D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3560   2017 3E FF       		MVI A,0FFH      ; PIO A configuration (Used for Key scan, LCD data, etc.)
3561   2019 D3 B1       		OUT PIOA	    ; B9H Initialize PIO chip port A
3562   201B DB E8       		IN readkbd      ; E8H  Scan Keyboard to test for CTRL-BREAK (cold boot indicator)
3563   201D 2F          		CMA
3564   201E E6 82       		ANI 082H        ; Mask all but CTRL-BREAK keys
3565   2020 FE 82       		CPI 082H
3566   2022 F5          		PUSH PSW
3567   2023 3E E5       		MVI A,0E5H      ; Load code to disable key-scan col 9 (for CTRL-BREAK)
3568   2025 D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3569   2027 F1          		POP PSW
3570   2028 C9          		RET
3571   2029             
3572   2029             ; ======================================================
3573   2029             ; Check for SHIFT-BREAK
3574   2029             ;  Z flag set if CTRL-BREAK pressed
3575   2029             ; ======================================================
3576   2029             shiftbreak:
3577   2029 3E E4       		MVI A,0E4H      ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=serial, Keyscan col 9 enable)
3578   202B D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3579   202D 3E FF       		MVI A,0FFH      ; PIO A configuration (Used for Key scan, LCD data, etc.)
3580   202F D3 B1       		OUT PIOA	    ; B9H Initialize PIO chip port A
3581   2031 DB E8       		IN readkbd      ; E8H  Scan Keyboard to test for SHIFT-BREAK (cold boot indicator)
3582   2033 2F          		CMA
3583   2034 E6 81       		ANI 081H        ; Mask all but SHIFT-BREAK keys
3584   2036 FE 81       		CPI 081H
3585   2038 F5          		PUSH PSW
3586   2039 3E E5       		MVI A,0E5H      ; Load code to disable key-scan col 9 (for SHIFT-BREAK)
3587   203B D3 B2       		OUT PIOB	    ; BAH  Set PIO chip port B configuration
3588   203D F1          		POP PSW
3589   203E C9          		RET
3590   203F             		
3591   203F             ; ======================================================
3592   203F             ; Keyboard scanning management routine
3593   203F             ; ======================================================
3594   203F             scankeyboard: ;7055H
3595   203F             		
3596   203F             ; ======================================================
3597   203F             ; Scan the Mod keys
3598   203F             ; ======================================================	
3599   203F CD B0 21    		CALL scancol9  	  ; 72B1H Scan BREAK,CAPS,NUM,CODE,GRAPH,CTRL,SHIFT & set bits in A
3600   2042 FE 00       		CPI 0
3601   2044             		
3602   2044 C2 9C 20    		JNZ modkeydecode  ; Print the key type 
3603   2047             
3604   2047             ; ======================================================
3605   2047             ; Scan the regular keyboard
3606   2047             ; ======================================================	
3607   2047             ;Scan the keyboard for other keys
3608   2047 AF          		XRA A          ; Clear A
3609   2048 D3 B1       		OUT PIOA       ; B9H PORT A
3610   204A DB E8       		IN readkbd     ; E8H KBD Check any keys pressed ROWs
3611   204C 3C          		INR A          ; A++ If FFH set to 0
3612   204D 3E FF       		MVI A,0FFH     ; Reset A to FFH
3613   204F D3 B1       		OUT PIOA       ; B9H 
3614   2051 C8          		RZ             ; Return no further keys pressed
3615   2052             		
3616   2052             ;Carry on with key check				
3617   2052 3E 7F       		MVI A,07FH      ; Keyboard mask   
3618   2054 0E 07       		MVI C,007H      ; Col Count
3619   2056             
3620   2056 CD C0 24    		CALL getkeyboardstorage ; ROW, COL 
3621   2059             
3622   2059             keyscanloop:
3623   2059 47          		MOV B,A	       ; Save A 7FH
3624   205A D3 B1       		OUT PIOA       ; B9H PORT A
3625   205C DB E8       		IN readkbd     ; E8H KBD
3626   205E 2F          		CMA            ;     
3627   205F FE 00       		CPI 0          ; See if there is a Key in this column
3628   2061 CA 6E 20    		JZ resetcolscan ;7092H      ; Key different to stored key
3629   2064 77          		MOV M,A        ; Save ROW 
3630   2065 CD 55 25    		CALL prthex
3631   2068 23          		INX H
3632   2069 79          		MOV A,C
3633   206A 77          		MOV M,A        ; Save COLUMN
3634   206B              	
3635   206B C3 79 20    		JMP keydecode
3636   206E             
3637   206E             ;Reset port and DEC count
3638   206E             resetcolscan:
3639   206E 3E FF       		MVI A,0FFH ; Restore port
3640   2070 D3 B1       		OUT PIOA  ; B9H PORT A
3641   2072 78          		MOV A,B   ; 
3642   2073 0F          		RRC       ; Shift mask to right
3643   2074 0D          		DCR C     ; Shift for 7 bits
3644   2075 F2 59 20    		JP keyscanloop ;
3645   2078 C9          		RET
3646   2079             
3647   2079             ; ======================================================
3648   2079             ; Decode the Normal Keys
3649   2079             ; ======================================================
3650   2079             keydecode:	
3651   2079 7E          		MOV A,M
3652   207A             
3653   207A 4F          		MOV C,A
3654   207B 0C          		INR C
3655   207C             
3656   207C AF          		XRA A		
3657   207D 16 18       		MVI D,24   ; Char count per row
3658   207F             mult24:
3659   207F 0D          		DCR C
3660   2080 CA 87 20    		JZ rowdone
3661   2083 82          		ADD D
3662   2084 C3 7F 20    		JMP mult24
3663   2087             rowdone: 
3664   2087             		; A=C*24
3665   2087 57          		MOV D,A  ; Save A in D
3666   2088             
3667   2088 2B          		DCX H    ; Get ROW
3668   2089 7E          		MOV A,M 
3669   208A CD CA 20    		CALL rowdecode
3670   208D 0D          		DCR C
3671   208E CD D3 20    		CALL mult3  ; COL * 3
3672   2091             		
3673   2091 82          		ADD D ; A points to string
3674   2092              
3675   2092 4F          		MOV C,A
3676   2093 06 00       		MVI B,00H
3677   2095 21 F0 20    		LXI H,kbdchars
3678   2098 09          		DAD B
3679   2099 C3 AE 20    		JMP printchars
3680   209C             		
3681   209C             ; ======================================================
3682   209C             ; Decode the Mod Keys
3683   209C             ; ======================================================
3684   209C             modkeydecode:
3685   209C CD CA 20    		CALL rowdecode
3686   209F C8          		RZ                ;If 0 then false alarm
3687   20A0             		
3688   20A0 CD 55 25    		CALL prthex
3689   20A3             		
3690   20A3 0D          		DCR C
3691   20A4 CD D3 20    		CALL mult3  ; COL * 3
3692   20A7             	 
3693   20A7             modfound:
3694   20A7 21 D7 20    		LXI H,modkeystr
3695   20AA 06 00       		MVI B,00H
3696   20AC 4F          		MOV C,A
3697   20AD 09          		DAD B
3698   20AE             
3699   20AE             ; Print out the 				
3700   20AE             printchars:
3701   20AE             		
3702   20AE 3E 20       		MVI A,' '
3703   20B0 CD 1F 25    		CALL putch
3704   20B3             
3705   20B3 7E          		MOV A,M
3706   20B4 CD 1F 25    		CALL putch
3707   20B7 23          		INX H 
3708   20B8 7E          		MOV A,M
3709   20B9 CD 1F 25    		CALL putch
3710   20BC 23          		INX H 
3711   20BD 7E          		MOV A,M
3712   20BE CD 1F 25    		CALL putch
3713   20C1 CD 97 24    		CALL rst75testlocationreset ; Reset the timeout
3714   20C4             		
3715   20C4 3E C5       		MVI A,0C5H ;0C5H     ; Set Cursor to start of line for new key
3716   20C6 CD 2A 25    		CALL putins
3717   20C9             		
3718   20C9 C9          		RET
3719   20CA             
3720   20CA             ; ======================================================		
3721   20CA             ; Determine the row number
3722   20CA             ; 	A = Raw ROW data
3723   20CA             ; 	C = ROW number
3724   20CA             ; ======================================================		
3725   20CA             rowdecode:
3726   20CA 0E 08       		MVI C,08H
3727   20CC              
3728   20CC             modkeydecodeloop:
3729   20CC 07          		RLC
3730   20CD D8          		RC 
3731   20CE 0D          		DCR C
3732   20CF C2 CC 20    		JNZ modkeydecodeloop
3733   20D2 C9          		RET
3734   20D3             
3735   20D3             ; ======================================================		
3736   20D3             ; Mult3
3737   20D3             ;	A = 3*A
3738   20D3             ; ======================================================		
3739   20D3             mult3:
3740   20D3 79          		MOV A,C
3741   20D4 81          		ADD C ; 2A
3742   20D5 81          		ADD C ; 3A
3743   20D6 C9          		RET
3744   20D7             ; ======================================================		
3745   20D7             ; Key string data
3746   20D7             ; ======================================================		
3747   20D7             			
3748   20D7             modkeystr:
3749   20D7 53 48 20 43 		.text "SH CTLGRHCODNUMCAPXXXBRK"
3749   20DB 54 4C 47 52 
3749   20DF 48 43 4F 44 
3749   20E3 4E 55 4D 43 
3749   20E7 41 50 58 58 
3749   20EB 58 42 52 4B 
3750   20EF             ;              012345678901234567890123
3751   20EF 00          		.db 0	
3752   20F0             			
3753   20F0             kbdchars:  ;7BF1H
3754   20F0             ;              COL
3755   20F0             ;              012345678901234567890123  ROWs
3756   20F0 20 5A 20 20 		.text " Z  X  C  V  B  N  M  L "   0  - 0
3756   20F4 58 20 20 43 
3756   20F8 20 20 56 20 
3756   20FC 20 42 20 20 
3756   2100 4E 20 20 4D 
3756   2104 20 20 4C 20 
3757   2108 20 41 20 20 		.text " A  S  D  F  G  H  J  K "   1  - 24
3757   210C 53 20 20 44 
3757   2110 20 20 46 20 
3757   2114 20 47 20 20 
3757   2118 48 20 20 4A 
3757   211C 20 20 4B 20 
3758   2120 20 51 20 20 		.text " Q  W  E  R  T  Y  U  I "   2  - 48
3758   2124 57 20 20 45 
3758   2128 20 20 52 20 
3758   212C 20 54 20 20 
3758   2130 59 20 20 55 
3758   2134 20 20 49 20 
3759   2138 20 4F 20 20 		.text " O  P  [  ;  '  ,  .  / "   3  - 72
3759   213C 50 20 20 5B 
3759   2140 20 20 3B 20 
3759   2144 20 27 20 20 
3759   2148 2C 20 20 2E 
3759   214C 20 20 2F 20 
3760   2150 20 31 20 20 		.text " 1  2  3  4  5  6  7  8 "   4  - 96
3760   2154 32 20 20 33 
3760   2158 20 20 34 20 
3760   215C 20 35 20 20 
3760   2160 36 20 20 37 
3760   2164 20 20 38 20 
3761   2168 20 39 20 20 		.text " 9  0  -  = LFTRHTUP DWN"   5  - 120
3761   216C 30 20 20 2D 
3761   2170 20 20 3D 20 
3761   2174 4C 46 54 52 
3761   2178 48 54 55 50 
3761   217C 20 44 57 4E 
3762   2180 53 50 43 44 		.text "SPCDELTABESCPASLABPRICR "   6  - 144
3762   2184 45 4C 54 41 
3762   2188 42 45 53 43 
3762   218C 50 41 53 4C 
3762   2190 41 42 50 52 
3762   2194 49 43 52 20 
3763   2198 46 31 20 46 		.text "F1 F2 F3 F4 F5 F6 F7 F8 "   7  - 168 192
3763   219C 32 20 46 33 
3763   21A0 20 46 34 20 
3763   21A4 46 35 20 46 
3763   21A8 36 20 46 37 
3763   21AC 20 46 38 20 
3764   21B0             			
3765   21B0             ; ======================================================
3766   21B0             ; Scan BREAK,CAPS,NUM,CODE,GRAPH,CTRL,SHIFT & set bits in A
3767   21B0             ; ======================================================
3768   21B0             scancol9: ;72B1H
3769   21B0 3E FF       		MVI A,0FFH
3770   21B2 D3 B1       		OUT PIOA	;B9H PIO A
3771   21B4 DB B2       		IN PIOB	    ;BAH PIO B
3772   21B6 E6 FE       		ANI 0FEH
3773   21B8 47          		MOV B,A
3774   21B9 D3 B2       		OUT PIOB   ;BAH
3775   21BB DB E8       		IN readkbd ;E8H
3776   21BD F5          		PUSH PSW
3777   21BE 78          		MOV A,B
3778   21BF 3C          		INR A
3779   21C0 D3 B2       		OUT PIOB 	;BAH
3780   21C2 F1          		POP PSW
3781   21C3 2F          		CMA
3782   21C4 C9          		RET
3783   21C5             
3784   21C5             ; ##########################################################
3785   21C5             ; ##########################################################
3786   21C5             ; **********************************************************
3787   21C5             ; Test the cassette port
3788   21C5             ; Check remote clicks the relay
3789   21C5             ; Read in data from the port using Audacity, check header 
3790   21C5             ; Write out data to audacity check  
3791   21C5             ; **********************************************************
3792   21C5             castest:
3793   21C5 CD 87 25    		CALL clrscreen  ; Reset the screen for the new test
3794   21C8             		
3795   21C8 21 19 28    		LXI H,castestoffstr ; 11 chars
3796   21CB CD 35 25    		CALL putstr		
3797   21CE             
3798   21CE CD 7D 24    		CALL stromlocation
3799   21D1 7E          		MOV A,M
3800   21D2             		
3801   21D2             ;OFF 
3802   21D2 E6 F1       		ANI 0F1H
3803   21D4 F6 08       		ORI 08H
3804   21D6 D3 E8       		OUT CtrlReg 	; E8H	
3805   21D8 F5          		PUSH PSW
3806   21D9             
3807   21D9 3E 80        		MVI A,080H      ; Set Cursor to top line
3808   21DB CD 2A 25    		CALL putins	
3809   21DE             
3810   21DE CD B4 25    		CALL longdelay  
3811   21E1             
3812   21E1 DB 81       		IN setreg
3813   21E3 E6 80       		ANI 080H
3814   21E5 C2 1D 22    		JNZ remtestfail
3815   21E8             
3816   21E8             ;ON		
3817   21E8 21 2A 28    		LXI H,castestonstr ; 11 chars
3818   21EB CD 35 25    		CALL putstr	
3819   21EE F1          		POP PSW
3820   21EF F5          		PUSH PSW		
3821   21F0 E6 F1       		ANI 0F1H
3822   21F2 D3 E8       		OUT CtrlReg 	; E8H
3823   21F4             
3824   21F4 3E 80        		MVI A,080H      ; Set Cursor to top line
3825   21F6 CD 2A 25    		CALL putins
3826   21F9             
3827   21F9 CD B4 25    		CALL longdelay  ; Let the clock tick
3828   21FC             		
3829   21FC DB 81       		IN setreg
3830   21FE E6 80       		ANI 080H
3831   2200 CA 1D 22    		JZ remtestfail
3832   2203             
3833   2203             ;OFF 
3834   2203 21 19 28    		LXI H,castestoffstr ; 11 chars
3835   2206 CD 35 25    		CALL putstr	
3836   2209             		
3837   2209 F1          		POP PSW
3838   220A E6 F1       		ANI 0F1H
3839   220C F6 08       		ORI 08H
3840   220E D3 E8       		OUT CtrlReg ; E8H	
3841   2210             	
3842   2210 CD B4 25    		CALL longdelay
3843   2213             
3844   2213 DB 81       		IN setreg
3845   2215 E6 80       		ANI 080H
3846   2217 C2 1D 22    		JNZ remtestfail
3847   221A C3 23 22    		JMP remtestpass
3848   221D             
3849   221D             remtestfail:
3850   221D 21 B3 27    		LXI H,castestfailstr
3851   2220 C3 26 22    		JMP remtestdone
3852   2223             
3853   2223             remtestpass:
3854   2223 21 C4 27    		LXI H,castestpassstr
3855   2226             
3856   2226             remtestdone:		
3857   2226 3E 80       		MVI A,080H      ; Set Cursor to top line
3858   2228 CD 2A 25    		CALL putins
3859   222B             		
3860   222B CD 35 25    		CALL putstr	
3861   222E             
3862   222E CD A8 25    		CALL diagscreenpause        ; Delay to allow review	
3863   2231 CD 97 24    		CALL rst75testlocationreset ; Reset the timeout
3864   2234             
3865   2234             ; ***************** Outputting
3866   2234             ;Play out header use Grey Lead
3867   2234             		
3868   2234 3E C0       		MVI A,0C0H      ; Set Cursor to bottom line
3869   2236 CD 2A 25    		CALL putins
3870   2239 21 4D 28    		LXI H,castestrecstr
3871   223C CD 35 25    		CALL putstr
3872   223F             		
3873   223F 3E 1B       		MVI A,1BH      ; Prepare to re-enable RST 7.5 interrupt, Set bit 0
3874   2241 30          		SIM            ; Re-enable RST 7.5 interrupt
3875   2242 FB          		EI		
3876   2243             				
3877   2243             caswaitrec:		
3878   2243 CD 29 20    		CALL shiftbreak       ; See if the cassette tests should be skipped
3879   2246 CA 77 22    		JZ castestplayoption
3880   2249             
3881   2249             		;Wait for 10s for option to play
3882   2249 CD 9F 24    		CALL rst75testlocationget
3883   224C FE 1E       		CPI 30   ; See if 10s is up
3884   224E DA 5F 22    		JC caswaitcont
3885   2251             
3886   2251 21 08 28    		LXI H,castestaudiodonestr
3887   2254 3E C0       		MVI A,0C0H        ; Set Cursor to bottom line
3888   2256 CD 2A 25    		CALL putins
3889   2259 CD 35 25    		CALL putstr
3890   225C C3 CB 23    		JMP prtdone       ; If timeout then skip cassette tests
3891   225F             		
3892   225F             caswaitcont:
3893   225F CD 13 20    		CALL ctrlbreak	
3894   2262 C2 43 22    		JNZ caswaitrec
3895   2265             		
3896   2265 F3          		DI             ; Disable interrupts to write out the header 
3897   2266 3E 1F       		MVI A,1FH      ; Prepare to disable RST 7.5 interrupt, Set bit 0
3898   2268 30          		SIM  
3899   2269             	
3900   2269 3E C0       		MVI A,0C0H      ; Set Cursor to bottomline
3901   226B CD 2A 25    		CALL putins
3902   226E 21 70 28    		LXI H,castestrecstartedstr
3903   2271 CD 35 25    		CALL putstr
3904   2274             
3905   2274 CD D2 22    		CALL caswriteheader 
3906   2277             
3907   2277             ; ***************** Listening	
3908   2277             castestplayoption:
3909   2277 CD B4 25            CALL longdelay
3910   227A             	
3911   227A             waitforkeyrelease: 
3912   227A CD 3F 20    		CALL scankeyboard
3913   227D C2 7A 22    		JNZ waitforkeyrelease
3914   2280             	
3915   2280             ;Play in cassette search for header 
3916   2280 3E C0       		MVI A,0C0H      ; Set Cursor to bottomline
3917   2282 CD 2A 25    		CALL putins
3918   2285 21 3B 28    		LXI H,castestplaystr
3919   2288 CD 35 25    		CALL putstr		
3920   228B             
3921   228B             
3922   228B             caswaitplay:
3923   228B CD 29 20    		CALL shiftbreak
3924   228E CA CB 23    		JZ prtdone		
3925   2291 CD 13 20    		CALL ctrlbreak
3926   2294 C2 8B 22    		JNZ caswaitplay
3927   2297             
3928   2297 3E C0       		MVI A,0C0H      ; Set Cursor to bottomline
3929   2299 CD 2A 25    		CALL putins
3930   229C 21 5F 28    		LXI H,castestplaystartedstr
3931   229F CD 35 25    		CALL putstr
3932   22A2             			
3933   22A2 CD 0F 23    		CALL casreadhdrsync
3934   22A5             		
3935   22A5 F5          		PUSH PSW
3936   22A6 FE 7F       		CPI 07FH
3937   22A8 C2 B1 22    		JNZ castestfail
3938   22AB             			
3939   22AB 21 E6 27    		LXI H,castestaudiosyncstr
3940   22AE C3 B4 22    		JMP castestdone
3941   22B1             
3942   22B1             castestfail:		
3943   22B1 21 F7 27    		LXI H,castestaudiosyncfailstr
3944   22B4             
3945   22B4             castestdone:
3946   22B4 F3          		DI
3947   22B5 3E 1F       		MVI A,1FH      ; Prepare to disable RST 7.5 interrupt, Set bit 0
3948   22B7 30          		SIM  
3949   22B8             				
3950   22B8 3E C0       		MVI A,0C0H      ; Set Cursor to bottom line
3951   22BA CD 2A 25    		CALL putins
3952   22BD             
3953   22BD CD 35 25    		CALL putstr
3954   22C0             		
3955   22C0 3E CB       		MVI A,0CBH      ; Set Cursor to mid bottom line
3956   22C2 CD 2A 25    		CALL putins
3957   22C5 F1          		POP PSW
3958   22C6 CD 55 25    		CALL prthex
3959   22C9             
3960   22C9 CD A8 25    		CALL diagscreenpause ;Delay to allow review
3961   22CC CD A8 25    		CALL diagscreenpause ;Delay to allow review
3962   22CF C3 CB 23    		JMP prtdone
3963   22D2             		
3964   22D2             ; ==========================================================
3965   22D2             ; Write Header
3966   22D2             ; ==========================================================	
3967   22D2             ; ==========================================================
3968   22D2             ; Write cassette header and sync byte
3969   22D2             ; ==========================================================
3970   22D2             caswriteheader: ;6F46H
3971   22D2 01 00 02    		LXI B,0200H
3972   22D5             caswriteloop:   ;6F49H
3973   22D5 3E 55       		MVI A,55H
3974   22D7 C5          		PUSH B
3975   22D8 CD EA 22    		CALL casswrite   ;6F5EH
3976   22DB C1          		POP B
3977   22DC 0B          		DCX B
3978   22DD 78          		MOV A,B
3979   22DE B1          		ORA C
3980   22DF C2 D5 22    		JNZ caswriteloop ;6F49H
3981   22E2 3E 7F       		MVI A,7FH
3982   22E4 C3 EA 22    		JMP casswrite    ;6F5EH
3983   22E7             		
3984   22E7             ; ======================================================
3985   22E7             ; Write char in A to cassette w/o checksum
3986   22E7             ; ======================================================
3987   22E7 CD FB 22    		CALL caswritebit81 ;6F71H
3988   22EA             casswrite: ;6F5EH
3989   22EA 06 08       		MVI B,08H
3990   22EC             caswriteloop1: ;6F60H
3991   22EC CD F4 22    		CALL caswritebit8 ;6F6AH Write bit 8 of A to cassette
3992   22EF 05          		DCR B
3993   22F0 C2 EC 22    		JNZ caswriteloop1  ;6F60H
3994   22F3 C9          		RET
3995   22F4             
3996   22F4             ; ======================================================
3997   22F4             ; Write bit 8 of A to cassette
3998   22F4             ; ======================================================
3999   22F4             caswritebit8: ;6F6AH
4000   22F4 07          		RLC
4001   22F5 11 24 1F    		LXI D,1F24H        ;Cassette frequency cycle count for 1 bit
4002   22F8 DA FE 22    		JC caswritebitbit0  ;6F74H
4003   22FB             caswritebit81: ;6F71H
4004   22FB 11 49 43    		LXI D,4349H        ; Cassette frequency cycle count for 0 bit
4005   22FE             caswritebitbit0: ;6F74H
4006   22FE 15          		DCR D              ; 
4007   22FF C2 FE 22    		JNZ caswritebitbit0 ;6F74H Wait Low
4008   2302 57          		MOV D,A        
4009   2303 3E D0       		MVI A,0D0H
4010   2305 30          		SIM                 ; Write 1
4011   2306             caswritebitbit1: ;6F7CH
4012   2306 1D          		DCR E
4013   2307 C2 06 23    		JNZ caswritebitbit1 ;6F7CH Wait High
4014   230A 3E 50       		MVI A,50H
4015   230C 30          		SIM                ; Write 0
4016   230D 7A          		MOV A,D
4017   230E C9          		RET
4018   230F             
4019   230F             ; ==========================================================
4020   230F             ; Read Header
4021   230F             ; ==========================================================	
4022   230F             ; ======================================================
4023   230F             ; Read cassette header and sync byte
4024   230F             ; ======================================================
4025   230F             casreadhdrsync: ;6F85H
4026   230F 06 80       		MVI B,80H        ; Load 128
4027   2311             casreadhdrsync1: ;6F87H
4028   2311 CD 6A 23    		CALL casreadportbit ;6FDBH Read Cassette port data bit
4029   2314 D8          		RC
4030   2315 79          		MOV A,C
4031   2316 FE 08       		CPI 08H
4032   2318 DA 0F 23    		JC casreadhdrsync   ;6F85H Read cassette header and sync byte
4033   231B FE 40       		CPI 40H
4034   231D D2 0F 23    		JNC casreadhdrsync  ;6F85H Read cassette header and sync byte
4035   2320 05          		DCR B
4036   2321 C2 11 23    		JNZ casreadhdrsync1 ;6F87H
4037   2324             caschecksb: ;6F9AH
4038   2324             ;***		CALL 729FH     ; Check if SHIFT-BREAK is being pressed
4039   2324             ;		RC
4040   2324 3E 2B        MVI A,'+'
4041   2326 32 01 00     STA lcddata
4042   2329 CD 13 20    		CALL ctrlbreak
4043   232C C8          		RZ
4044   232D 21 00 00    		LXI H,0000H
4045   2330 06 40       		MVI B,40H
4046   2332             casreadhdrsync2: ;6FA3H
4047   2332 CD 9E 23    		CALL casgetnextbit ;7016H Get tape bit
4048   2335 D8          		RC
4049   2336 51          		MOV D,C
4050   2337 CD 9E 23    		CALL casgetnextbit ;7016H Get tape bit
4051   233A             casreadhdrsync2a: ;6FABH
4052   233A D8          		RC
4053   233B 7A          		MOV A,D
4054   233C 91          		SUB C
4055   233D D2 42 23    		JNC casreadhdrsync3 ;6FB3H
4056   2340 2F          		CMA
4057   2341 3C          		INR A
4058   2342             casreadhdrsync3: ;6FB3H
4059   2342 FE 0B       		CPI 0BH
4060   2344 DA 49 23    		JC casreadhdrsync5a - 1 ;6FBAH
4061   2347 24          		INR H
4062   2348 3E 2C       		MVI A,2CH
4063   234A             casreadhdrsync5a:
4064   234A 05          		DCR B
4065   234B C2 32 23    		JNZ casreadhdrsync2 ;6FA3H
4066   234E 3E 40       		MVI A,40H
4067   2350 BD          		CMP L
4068   2351 CA 58 23    		JZ casreadhdrsync4  ;6FC9H
4069   2354 94          		SUB H
4070   2355 C2 24 23    		JNZ caschecksb      ;6F9AH
4071   2358             casreadhdrsync4: ;6FC9H
4072   2358             ;6FC9H  (32H) STA FF8EH   
4073   2358 CD DB 24    		CALL putcasstorage   ;Cassette port pulse control
4074   235B             	
4075   235B 16 00       		MVI D,00H
4076   235D             casreadhdrsync5: ;6FCEH
4077   235D CD 6A 23    		CALL casreadportbit ;6FDBH Read Cassette port data bit
4078   2360 D8          		RC
4079   2361 CD AB 23    		CALL countandpackbits ;7023H Count and pack cassette input bits
4080   2364 FE 7F       		CPI 7FH
4081   2366 C2 5D 23    		JNZ casreadhdrsync5   ;6FCEH
4082   2369 C9          		RET                   ;Return when syncâd
4083   236A             		
4084   236A             ; ======================================================
4085   236A             ; Read Cassette port data bit
4086   236A             ; ======================================================
4087   236A             ;Called here
4088   236A             casreadportbit: ;6FDBH
4089   236A 0E 00       		MVI C,00H
4090   236C             ;6FDDH  (3AH) LDA FF8EH    
4091   236C CD CD 24    		CALL getcasstorage   ;Cassette port pulse control
4092   236F A7          		ANA A
4093   2370 CA 89 23    		JZ caswaitzerobit ;6FFAH Go heck for 1 0 1 transition
4094   2373             casreadport: ;6FE4H
4095   2373             ;***		CALL 729FH      ; Check if SHIFT-BREAK is being pressed
4096   2373             ;		RC
4097   2373 CD 13 20    		CALL ctrlbreak
4098   2376 C8          		RZ
4099   2377 20          		RIM
4100   2378 07          		RLC             ; Move MSB to carry to check SID
4101   2379 D2 73 23    		JNC casreadport ;6FE4H If 0 wait to 1
4102   237C             
4103   237C             casreadport1: ;6FEDH
4104   237C             ;Called here
4105   237C 0C          		INR C          ; C++
4106   237D             casreadport2: ;6FEEH
4107   237D 0C          		INR C          ; C++
4108   237E CA 73 23    		JZ casreadport ;6FE4H If C=0 try again
4109   2381 20          		RIM            ; Check SID
4110   2382 07          		RLC            ; MSB to carry
4111   2383 DA 7D 23    		JC casreadport2 ;6FEEH If 1 wait to 0
4112   2386 C3 9C 23    		JMP caswaitnextbit1 ;700DH Once 0 play sound and exit
4113   2389             
4114   2389             caswaitzerobit: ; 6FFAH
4115   2389             ;***		CALL 729FH     ; Check if SHIFT-BREAK is being pressed
4116   2389             ;		RC
4117   2389 CD 13 20    		CALL ctrlbreak
4118   238C C8          		RZ
4119   238D 20          		RIM	    ; Read SID
4120   238E 07          		RLC	    ; MSB to carry
4121   238F DA 89 23    		JC caswaitzerobit ;6FFAH If 1 wait to 0
4122   2392             		
4123   2392             ; Called here
4124   2392             caswaitnextbit: ;7003H
4125   2392 0C          		INR C          ; C++ Get the timing on the bit
4126   2393             caswaitzerobit1: ;7004H
4127   2393 0C          		INR C          ; C++
4128   2394 CA 89 23    		JZ caswaitzerobit ;6FFAH C=0 wait again not a bit
4129   2397 20          		RIM            ; Check SID
4130   2398 07          		RLC	        ; MSB to carry
4131   2399 D2 93 23    		JNC caswaitzerobit1 ;7004H      ; If 0 wait to 1
4132   239C             
4133   239C             ; Return here
4134   239C             caswaitnextbit1: ;700DH
4135   239C             ;700DH  (3AH) LDA FF44H      ; Sound flag
4136   239C             ;7010H  (A7H) ANA A          ; 
4137   239C             ;7011H  (CCH) CZ 7676H       ; Click sound port
4138   239C AF          		XRA A          ; Clear A
4139   239D C9          		RET            ; Return C = bit width
4140   239E             
4141   239E             casgetnextbit: ;7016H
4142   239E CD 92 23    		CALL caswaitnextbit ;7003H Ignore the next bit wait for 0 1 0 transition
4143   23A1 D8          		RC                 ; 
4144   23A2 0E 00       		MVI C,00H          ; C = 0
4145   23A4 CD 7C 23    		CALL casreadport1   ;6FEDH Wait for bit next bit
4146   23A7 D8          		RC                 ; Check for ctr-break  
4147   23A8 C3 92 23    		JMP caswaitnextbit ;7003H      ; Get the bit time 
4148   23AB             
4149   23AB             ; ======================================================
4150   23AB             ; Count and pack cassette input bits
4151   23AB             ; ======================================================
4152   23AB             countandpackbits: ;7023H
4153   23AB 79          		MOV A,C
4154   23AC FE 15       		CPI 15H
4155   23AE 7A          		MOV A,D
4156   23AF 17          		RAL
4157   23B0 57          		MOV D,A
4158   23B1 C9          		RET
4159   23B2             		
4160   23B2             ; ======================================================
4161   23B2             ; Read character from cassette w/o checksum
4162   23B2             ; ======================================================
4163   23B2             cascharread: ;702AH
4164   23B2 CD 6A 23    		CALL casreadportbit      ;6FDBH Read Cassette port data bit
4165   23B5 D8          		RC
4166   23B6 79          		MOV A,C
4167   23B7 FE 15       		CPI 15H
4168   23B9 DA B2 23    		JC cascharread        ;702AH Read character from cassette w/o checksum
4169   23BC 06 08       		MVI B,08H
4170   23BE             cascharread1: ;7036H
4171   23BE CD 6A 23    		CALL casreadportbit      ;6FDBH Read Cassette port data bit
4172   23C1 D8          		RC
4173   23C2 CD AB 23    		CALL countandpackbits ;7023H     ; Count and pack cassette input bits
4174   23C5 05          		DCR B
4175   23C6 C2 BE 23    		JNZ cascharread1      ;7036H
4176   23C9 AF          		XRA A
4177   23CA C9          		RET
4178   23CB             		
4179   23CB             ; ##########################################################
4180   23CB             ; ##########################################################		
4181   23CB             ; **********************************************************
4182   23CB             ; Used at the end of the tests and to test power off.
4183   23CB             ; prtdone uses RAM so cannot be used until RAM is tested.
4184   23CB             ; Prints out the DONE! message
4185   23CB             ; The board will power down to test the power
4186   23CB             ; down feature is operational.
4187   23CB             ; **********************************************************
4188   23CB             prtdone:
4189   23CB F3          		DI
4190   23CC CD 2A 24    		CALL buzzer
4191   23CF CD 87 25    		CALL clrscreen  ; Reset the screen for the new test
4192   23D2             		
4193   23D2 21 FC 28    		LXI H,testcompletestr ; 11 chars
4194   23D5 CD 35 25    		CALL putstr		
4195   23D8             
4196   23D8 3E C0       		MVI A,0C0H      ; Set Cursor to back for new count
4197   23DA CD 2A 25    		CALL putins
4198   23DD             
4199   23DD 21 0D 29    		LXI H,versioninfostr
4200   23E0 CD 35 25    		CALL putstr
4201   23E3             
4202   23E3 06 0A        		MVI B,10
4203   23E5             prtwait:
4204   23E5 CD B4 25    		CALL longdelay  ; Countdown power off	
4205   23E8 05          		DCR B		
4206   23E9 C2 E5 23    		JNZ prtwait		
4207   23EC             
4208   23EC CD 2A 24    		CALL buzzer
4209   23EF             		
4210   23EF 3E 80        		MVI A,80H       ; Set Cursor to top line
4211   23F1 CD 2A 25    		CALL putins
4212   23F4             
4213   23F4 21 EB 28    		LXI H,goodbye
4214   23F7 CD 35 25    		CALL putstr
4215   23FA             		
4216   23FA CD B4 25    		CALL longdelay  ; Let the user see the text
4217   23FD             	
4218   23FD 3E FF       		MVI A,0FFH
4219   23FF D3 B2       		OUT PIOB ; Should power down the board after 120s
4220   2401 C3 27 24    		JMP haltwait	
4221   2404             
4222   2404             ; ##########################################################
4223   2404             ; ##########################################################				
4224   2404             ; **********************************************************
4225   2404             ; Halt the CPU testing done or failure
4226   2404             ; Routine does not rely on RAM so can be used at any point
4227   2404             ; **********************************************************
4228   2404             cpuhlt:
4229   2404 21 01 00    		LXI H,lcddata  ; Load LCD Data location
4230   2407 36 48       		MVI M,'H'      ; Load H to screen
4231   2409             		
4232   2409             		; Wait 40us		
4233   2409 0E 0A       		MVI C,10      ; Counter 10 	
4234   240B             delayH0:
4235   240B 0D          		DCR C          ; Decrement C: 4
4236   240C C2 0B 24    		JNZ delayH0    ; Loop until C = 0: 7 = 11 = 4.45us	
4237   240F             		
4238   240F 36 4C       		MVI M,'L'      ; Load L to screen
4239   2411             		
4240   2411             		; Wait 40us		
4241   2411 0E 0A       		MVI C,10      ; Counter 10 	
4242   2413             delayH1:
4243   2413 0D          		DCR C          ; Decrement C: 4
4244   2414 C2 13 24    		JNZ delayH1    ; Loop until C = 0: 7 = 11 = 4.45us	
4245   2417             
4246   2417 36 54       		MVI M,'T'      ; Load T to screen
4247   2419             		
4248   2419             		; Wait 40us		
4249   2419 0E 0A       		MVI C,10      ; Counter 10 	
4250   241B             delayH2:
4251   241B 0D          		DCR C          ; Decrement C: 4
4252   241C C2 1B 24    		JNZ delayH2    ; Loop until C = 0: 7 = 11 = 4.45us			
4253   241F             
4254   241F 36 21       		MVI M,'!'      ; Load ! to screen
4255   2421             		
4256   2421             		; Wait 40us		
4257   2421 0E 0A       		MVI C,10      ; Counter 10 	
4258   2423             delayH3:
4259   2423 0D          		DCR C          ; Decrement C: 4
4260   2424 C2 23 24    		JNZ delayH3   ; Loop until C = 0: 7 = 11 = 4.45us
4261   2427             		
4262   2427             haltwait:	
4263   2427 C3 27 24    		JMP haltwait	
4264   242A             
4265   242A             ; **********************************************************
4266   242A             ;
4267   242A             ; Utility routines to provide generic functions to main test
4268   242A             ; Routines
4269   242A             ;
4270   242A             ; **********************************************************
4271   242A             ; ======================================================
4272   242A             ; Sound Buzzer
4273   242A             ; ======================================================
4274   242A             buzzer:
4275   242A 06 00       		MVI B,00H           ; Execute loop 255 times
4276   242C             buzzerwait:
4277   242C CD 39 24    		CALL clicksound     ; Click sound port
4278   242F 0E 50       		MVI C,50H
4279   2431 CD 7C 25    		CALL shortdelay     ; Delay routine - decrement C until zero
4280   2434 05          		DCR B
4281   2435 C2 2C 24    		JNZ buzzerwait
4282   2438 C9          		RET
4283   2439             
4284   2439             ; ======================================================
4285   2439             ; Click sound port
4286   2439             ; ======================================================
4287   2439             clicksound:
4288   2439 DB B2       		IN  PIOB	; 0BAH Load current value of I/O port BAH
4289   243B EE 20       		XRI 020H    ; Toggle the speaker I/O bit
4290   243D D3 B2       		OUT PIOB    ; 0BAH Write new value to speaker to cause a "click"
4291   243F C9          		RET
4292   2440             		
4293   2440             ; ======================================================
4294   2440             ; Trap routine power down the board when power off
4295   2440             ; ======================================================
4296   2440             trap:
4297   2440 DB BA       		IN  0BAH        ; Get Current I/O value of BAH
4298   2442 F6 10       		ORI 010H        ; Set the PowerDown bit
4299   2444 D3 BA       		OUT 0BAH        ; PowerDown.  We will loose power here
4300   2446 76          		HLT		
4301   2447             		
4302   2447             ; **********************************************************
4303   2447             ; Address calculation routines to deal with unknown RAM Locations
4304   2447             ; **********************************************************
4305   2447             countdownmem  .equ 14
4306   2447             strommem      .equ countdownmem + 4
4307   2447             rst75testmem  .equ strommem + 4
4308   2447             rxbuffermem   .equ rst75testmem + 4
4309   2447             rst55testmem  .equ rxbuffermem + 4
4310   2447             keyboardmem   .equ rst55testmem + 4
4311   2447             casstoragemem .equ 12 ; Stored at a different location
4312   2447             
4313   2447             ; ======================================================
4314   2447             ; Get Start of RAM block, using current SP, into DE
4315   2447             ; ======================================================
4316   2447             ramsblockstart:
4317   2447 E5          		PUSH H
4318   2448 F5          		PUSH PSW
4319   2449 21 00 00    		LXI H,0
4320   244C 39          		DAD SP
4321   244D 7C          		MOV A,H
4322   244E E6 E0       		ANI 0E0H	; Remove the 1000H Addition to SP
4323   2450 67          		MOV H,A
4324   2451 2E 00       		MVI L,0
4325   2453 EB          		XCHG
4326   2454 F1          		POP PSW
4327   2455 E1          		POP H
4328   2456 C9          		RET
4329   2457             
4330   2457             ; ======================================================
4331   2457             ; Get Start of SP + 1, into DE
4332   2457             ; Relies on Stack not getting too large and on a 00H boundary
4333   2457             ; ======================================================
4334   2457             stackstart:
4335   2457 E5          		PUSH H
4336   2458 F5          		PUSH PSW
4337   2459 21 00 00    		LXI H,0
4338   245C 39          		DAD SP
4339   245D 7C          		MOV A,H
4340   245E E6 E0       		ANI 0E0H
4341   2460 F6 10       		ORI 010H
4342   2462 67          		MOV H,A
4343   2463 2E 02       		MVI L,2
4344   2465 EB          		XCHG
4345   2466 F1          		POP PSW
4346   2467 E1          		POP H
4347   2468 C9          		RET
4348   2469             
4349   2469             ; ======================================================
4350   2469             ; Get Clock Storage into HL, SP + 2
4351   2469             ; ======================================================
4352   2469             clocklocation:
4353   2469 D5          		PUSH D
4354   246A CD 57 24    		CALL stackstart
4355   246D EB          		XCHG
4356   246E D1          		POP D	
4357   246F C9          		RET
4358   2470             
4359   2470             ; ======================================================
4360   2470             ; Get Countdown Memory location
4361   2470             ; ======================================================
4362   2470             getcountdown:
4363   2470 F5          		PUSH PSW
4364   2471 D5          		PUSH D
4365   2472 CD 57 24    		CALL stackstart  
4366   2475 EB          		XCHG	
4367   2476 D1          		POP D
4368   2477 7D          		MOV A,L
4369   2478 C6 0E       		ADI countdownmem ; Add 12 to Stack start
4370   247A 6F          		MOV L,A
4371   247B F1          		POP PSW
4372   247C C9          		RET
4373   247D             
4374   247D             ; ======================================================
4375   247D             ; Get STROM memory location
4376   247D             ; ======================================================
4377   247D             stromlocation:
4378   247D F5          		PUSH PSW
4379   247E D5          		PUSH D
4380   247F CD 57 24    		CALL stackstart
4381   2482 EB          		XCHG	
4382   2483 D1          		POP D
4383   2484 7D          		MOV A,L
4384   2485 C6 12       		ADI strommem ; Add 14 to Stack start
4385   2487 6F          		MOV L,A
4386   2488 F1          		POP PSW
4387   2489 C9          		RET
4388   248A             
4389   248A             ; ======================================================
4390   248A             ; Get RST7.5 Test Store
4391   248A             ; ======================================================
4392   248A             rst75testlocation:
4393   248A F5          		PUSH PSW
4394   248B D5          		PUSH D
4395   248C CD 57 24    		CALL stackstart
4396   248F EB          		XCHG	
4397   2490 D1          		POP D
4398   2491 7D          		MOV A,L
4399   2492 C6 16       		ADI rst75testmem ; Add 16 to Stack start
4400   2494 6F          		MOV L,A
4401   2495 F1          		POP PSW
4402   2496 C9          		RET
4403   2497             
4404   2497             ; ======================================================
4405   2497             ; Reset RST7.5 count Store
4406   2497             ; ======================================================
4407   2497             rst75testlocationreset:
4408   2497 CD 8A 24    		CALL rst75testlocation
4409   249A F3          		DI
4410   249B 36 00       		MVI M,0
4411   249D FB          		EI
4412   249E C9          		RET
4413   249F             
4414   249F             ; ======================================================
4415   249F             ; Retrieve RST7.5 count Store
4416   249F             ; ======================================================
4417   249F             rst75testlocationget:
4418   249F CD 8A 24    		CALL rst75testlocation
4419   24A2 F3          		DI
4420   24A3 7E          		MOV A,M
4421   24A4 FB          		EI
4422   24A5 C9          		RET
4423   24A6             	
4424   24A6             ; ======================================================
4425   24A6             ; Storage for RX Buffer 2-bytes
4426   24A6             ; ======================================================
4427   24A6             rxbuffer:
4428   24A6 F5          		PUSH PSW
4429   24A7 D5          		PUSH D
4430   24A8 CD 57 24    		CALL stackstart
4431   24AB EB          		XCHG	
4432   24AC D1          		POP D
4433   24AD 7D          		MOV A,L
4434   24AE C6 1A       		ADI rxbuffermem ; Add 18 to Stack start
4435   24B0 6F          		MOV L,A
4436   24B1 F1          		POP PSW
4437   24B2 C9          		RET		
4438   24B3             			
4439   24B3             ; ======================================================
4440   24B3             ; Get RST5.5 Test Store
4441   24B3             ; ======================================================
4442   24B3             rst55testlocation:
4443   24B3 F5          		PUSH PSW
4444   24B4 D5          		PUSH D
4445   24B5 CD 57 24    		CALL stackstart
4446   24B8 EB          		XCHG	
4447   24B9 D1          		POP D
4448   24BA 7D          		MOV A,L
4449   24BB C6 1E       		ADI rst55testmem ; Add 22 to Stack start
4450   24BD 6F          		MOV L,A
4451   24BE F1          		POP PSW
4452   24BF C9          		RET		
4453   24C0             	
4454   24C0             ; ======================================================
4455   24C0             ; Keyboard storage area
4456   24C0             ; ======================================================
4457   24C0             getkeyboardstorage:
4458   24C0 F5          		PUSH PSW
4459   24C1 D5          		PUSH D
4460   24C2 CD 57 24    		CALL stackstart
4461   24C5 EB          		XCHG	
4462   24C6 D1          		POP D
4463   24C7 7D          		MOV A,L
4464   24C8 C6 22       		ADI keyboardmem  ; Add 24 to Stack start
4465   24CA 6F          		MOV L,A
4466   24CB F1          		POP PSW
4467   24CC C9          		RET		
4468   24CD             
4469   24CD             ; ======================================================
4470   24CD             ; GET Cassette Sync Read storage area
4471   24CD             ; ======================================================
4472   24CD             getcasstorage:
4473   24CD E5          		PUSH H
4474   24CE 21 00 00    		LXI H,0
4475   24D1 39          		DAD SP
4476   24D2 7C          		MOV A,H
4477   24D3 E6 E0       		ANI 0E0H
4478   24D5 67          		MOV H,A
4479   24D6 2E 0C       		MVI L,casstoragemem ; 12
4480   24D8 7E          		MOV A,M
4481   24D9 E1          		POP H
4482   24DA C9          		RET	
4483   24DB             
4484   24DB             ; ======================================================
4485   24DB             ; PUT Cassette Sync Read storage area
4486   24DB             ; ======================================================
4487   24DB             putcasstorage:
4488   24DB E5          		PUSH H
4489   24DC F5          		PUSH PSW
4490   24DD 21 00 00    		LXI H,0
4491   24E0 39          		DAD SP
4492   24E1 7C          		MOV A,H
4493   24E2 E6 E0       		ANI 0E0H
4494   24E4 67          		MOV H,A
4495   24E5 2E 0C       		MVI L,casstoragemem ; 12
4496   24E7 F1          		POP PSW
4497   24E8 77          		MOV M,A
4498   24E9 E1          		POP H
4499   24EA C9          		RET	
4500   24EB             								
4501   24EB             ; ======================================================
4502   24EB             ; Move B bytes from M to (DE)
4503   24EB             ; ======================================================
4504   24EB             movemem: ; 2542H
4505   24EB 7E          		MOV A,M
4506   24EC 12          		STAX D
4507   24ED 23          		INX H
4508   24EE 13          		INX D
4509   24EF 05          		DCR B
4510   24F0 C2 EB 24    		JNZ movemem	;2542H Move B bytes from M to (DE)
4511   24F3 C9          		RET
4512   24F4             
4513   24F4             ; **********************************************************
4514   24F4             ; Debug Helper routines
4515   24F4             ; **********************************************************
4516   24F4             ; ======================================================
4517   24F4             ; HEX Dump memory (HL) to Diagnostic LCD on bottom line
4518   24F4             ; ======================================================
4519   24F4             dumpmem:
4520   24F4 F5          		PUSH PSW
4521   24F5 C5          		PUSH B
4522   24F6 E5          		PUSH H
4523   24F7             
4524   24F7 3E C0       		MVI A,0C0H
4525   24F9 CD 2A 25    		CALL putins
4526   24FC             
4527   24FC 06 08       		MVI B,8
4528   24FE             dumploop:
4529   24FE 7E          		MOV A,M
4530   24FF CD 55 25    		CALL prthex
4531   2502 23          		INX H
4532   2503 05          		DCR B
4533   2504 C2 FE 24    		JNZ dumploop
4534   2507             
4535   2507 E1          		POP H
4536   2508 C1          		POP B
4537   2509 F1          		POP PSW
4538   250A C9          		RET
4539   250B             
4540   250B             ; ======================================================
4541   250B             ; HEX Dump HL
4542   250B             ; ======================================================
4543   250B             dumpHL:
4544   250B F5          		PUSH PSW
4545   250C C5          		PUSH B
4546   250D E5          		PUSH H
4547   250E             
4548   250E 3E 80       		MVI A,080H
4549   2510 CD 2A 25    		CALL putins
4550   2513             
4551   2513 7C          		MOV A,H
4552   2514 CD 55 25    		CALL prthex
4553   2517 7D          		MOV A,L
4554   2518 CD 55 25    		CALL prthex
4555   251B             
4556   251B E1          		POP H
4557   251C C1          		POP B
4558   251D F1          		POP PSW
4559   251E C9          		RET
4560   251F             
4561   251F             ; ==========================================================
4562   251F             ; PUT Char on Diagnostic LCD. A contains character
4563   251F             ; ==========================================================
4564   251F             putch: 
4565   251F C5          		PUSH B           ; Save BC
4566   2520             
4567   2520 32 01 00    		STA lcddata    	 ; Send char to LCD		
4568   2523 0E 10       		MVI C,16         ; Counter 16 	
4569   2525 CD 7C 25    		CALL shortdelay
4570   2528             		
4571   2528 C1          		POP B	
4572   2529 C9          		RET
4573   252A             		
4574   252A             ; ==========================================================
4575   252A             ; PUT instruction to Diagnostic LCD.  A contains instruction
4576   252A             ; ==========================================================
4577   252A             putins:
4578   252A C5          		PUSH B           ; Save BC
4579   252B             
4580   252B 32 00 00    		STA lcdins    	 ; Send ins to LCD		
4581   252E 0E 10       		MVI C,16         ; Counter 16 	
4582   2530 CD 7C 25    		CALL shortdelay
4583   2533             			
4584   2533 C1          		POP B			
4585   2534 C9          		RET	
4586   2535             
4587   2535             ; ==========================================================
4588   2535             ; PUT String on Diagnostic LCD HL points to string
4589   2535             ; ==========================================================
4590   2535             putstr:
4591   2535 F5          		PUSH PSW
4592   2536             putsloop:
4593   2536 7E          		MOV A,M   	     ; H = Current Character
4594   2537 FE 00       		CPI 0H           ; Check end of table
4595   2539 CA 43 25    		JZ putstrexit       
4596   253C CD 1F 25    		CALL putch       ; Write to screen
4597   253F 23          		INX H            ; Get next Char
4598   2540 C3 36 25    		JMP putsloop
4599   2543             		
4600   2543             putstrexit:
4601   2543 F1          		POP PSW
4602   2544 C9          		RET
4603   2545             
4604   2545             ; ==========================================================
4605   2545             ; Print A as 2 HEX digits
4606   2545             ; ==========================================================
4607   2545             hexchar: 
4608   2545 30 31 32 33 		.text "0123456789ABCDEF"
4608   2549 34 35 36 37 
4608   254D 38 39 41 42 
4608   2551 43 44 45 46 
4609   2555             prthex:
4610   2555 F5          		PUSH PSW
4611   2556 E5          		PUSH H
4612   2557 C5          		PUSH B
4613   2558 D5          		PUSH D
4614   2559             		
4615   2559 06 00       		MVI B,0
4616   255B             		
4617   255B 21 45 25    		LXI H,hexchar ; Point to ASCII table
4618   255E 57          		MOV D,A			; Store away A
4619   255F 1F          		RAR 
4620   2560 1F          		RAR
4621   2561 1F          		RAR
4622   2562 1F          		RAR
4623   2563 E6 0F       		ANI 00FH        ; Get Upper Digit
4624   2565 4F          		MOV C,A		
4625   2566 09          		DAD B
4626   2567 7E          		MOV A,M
4627   2568 CD 1F 25    		CALL putch      ; Print upper Digit
4628   256B             
4629   256B 21 45 25    		LXI H,hexchar ; Point to ASCII table		
4630   256E 7A          		MOV A,D
4631   256F E6 0F       		ANI 00FH 		; Get Bottom Digit
4632   2571 4F          		MOV C,A
4633   2572 09          		DAD B
4634   2573 7E          		MOV A,M
4635   2574 CD 1F 25    		CALL putch      ; Print Bottom Digit
4636   2577             		
4637   2577 D1          		POP D
4638   2578 C1          		POP B
4639   2579 E1          		POP H
4640   257A F1          		POP PSW
4641   257B C9          		RET		
4642   257C             				
4643   257C             ; ==========================================================
4644   257C             ; Short delay.  C = loop counter
4645   257C             ; ==========================================================
4646   257C             shortdelay: ;7657H
4647   257C 0D          		DCR C           ; Decrement C: 4
4648   257D C2 7C 25    		JNZ shortdelay  ; Loop until C = 0: 7 = 11 = 4.45us
4649   2580 C9          		RET
4650   2581             
4651   2581             ; ======================================================
4652   2581             ; Disable Background task & barcode interrupts
4653   2581             ; ======================================================
4654   2581             disablebackground: ;765CH
4655   2581 F3          		DI             ; Disable interrupts
4656   2582 3E 1D       		MVI A,1DH      ; Load SIM mask to disable RST 5.5 & 7.5
4657   2584 30          		SIM            ; Set new interrupt mask (disable Background & barcode)
4658   2585 FB          		EI             ; Re-enable interrupts
4659   2586 C9          		RET
4660   2587             
4661   2587             ; ==========================================================
4662   2587             ; Clear Diagnostic LCD Screen
4663   2587             ; ==========================================================
4664   2587             clrscreen:
4665   2587             		;LCD CLEAR
4666   2587 3E 01       		MVI A,lcdclr   ; LCD Clear
4667   2589 32 00 00    		STA lcdins
4668   258C             		
4669   258C             		; Wait 1.64ms		
4670   258C             		; Wait 800us
4671   258C 06 02       		MVI B,2
4672   258E             delayclrs:
4673   258E 0E C8       		MVI C,200      ; Counter 190 	
4674   2590             delayclr:
4675   2590 0D          		DCR C          ; Decrement C: 4
4676   2591 C2 90 25    		JNZ delayclr    ; Loop until C = 0: 7 = 11 = 4.45us		
4677   2594             		
4678   2594 05          		DCR B
4679   2595 C2 8E 25    		JNZ delayclrs	
4680   2598             
4681   2598 3E 06       		MVI A,lcdmode
4682   259A CD 2A 25    		Call putins
4683   259D             
4684   259D C9          		RET
4685   259E             		
4686   259E             ; ==========================================================
4687   259E             ; Wait for 2s	
4688   259E             ; ==========================================================
4689   259E             wait2seconds:
4690   259E 3E 02       		MVI A,2
4691   25A0             wait2secondsloop:
4692   25A0 CD B4 25    		CALL longdelay
4693   25A3 3D          		DCR A
4694   25A4 C2 A0 25    		JNZ wait2secondsloop
4695   25A7 C9          		RET
4696   25A8             
4697   25A8             ; ==========================================================
4698   25A8             ; Pause between tests	
4699   25A8             ; ==========================================================
4700   25A8             diagscreenpause:
4701   25A8 C5          		PUSH B
4702   25A9             		
4703   25A9 06 06       		MVI B,6
4704   25AB             		
4705   25AB             diagscreenpauseloop:
4706   25AB CD B4 25    		CALL longdelay
4707   25AE 05          		DCR B
4708   25AF C2 AB 25    		JNZ diagscreenpauseloop
4709   25B2             		
4710   25B2 C1          		POP B
4711   25B3 C9          		RET
4712   25B4             
4713   25B4             ; ==========================================================
4714   25B4             ; Long Delay routine set for 0.5s	
4715   25B4             ; ==========================================================
4716   25B4             longdelay:
4717   25B4 F5          		PUSH PSW
4718   25B5 C5          		PUSH B
4719   25B6 E5          		PUSH H
4720   25B7 06 02       		MVI B,2
4721   25B9             waithalflong:
4722   25B9 21 50 C3    		LXI H,0C350H   ; Load 16-bit delay counter for a 1s Loop
4723   25BC             waithalflooplong:
4724   25BC 2B          		DCX H         ; Decrement delay counter: 6
4725   25BD 7C          		MOV A,H       ; Test count for 0: 4
4726   25BE B5          		ORA L         ; Test lower byte: 4
4727   25BF C2 BC 25    		JNZ waithalflooplong  ; wait for zero count: 7 = 21cycles = 8.54us * 65536 = 0.55s
4728   25C2             
4729   25C2 05          		DCR B
4730   25C3 C2 B9 25    		JNZ waithalflong
4731   25C6             		
4732   25C6 E1          		POP H
4733   25C7 C1          		POP B
4734   25C8 F1          		POP PSW
4735   25C9 C9          		RET
4736   25CA             				
4737   25CA             ; ==========================================================
4738   25CA             ; Diagnostic LCD Strings	
4739   25CA             ; ==========================================================
4740   25CA             passstr:		
4741   25CA 20 50 41 53 		.text " PASS"
4741   25CE 53 
4742   25CF 00          		.db   0
4743   25D0             sysfailstr:
4744   25D0             lcdfailstr:
4745   25D0             piofailstr:	
4746   25D0             clkfailstr:
4747   25D0             testfailstr:
4748   25D0             lptfailstr:
4749   25D0             dongledatafail:
4750   25D0             loopbackfail:
4751   25D0             ;		.text "0123456789ABCDEF"
4752   25D0 20 46 41 49 		.text " FAIL"
4752   25D4 4C 
4753   25D5 00          		.db   0
4754   25D6             testdone:	
4755   25D6 20 44 4F 4E 		.text " DONE!"
4755   25DA 45 21 
4756   25DC 00          		.db   0
4757   25DD             ramstr:		
4758   25DD 50 49 4F 20 		.text "PIO "
4759   25E1 00          		.db   0
4760   25E2             piostr:		
4761   25E2 50 49 4F 20 		.text "PIO "
4762   25E6 00          		.db   0
4763   25E7             kbdstr:	
4764   25E7 4B 42 44 20 		.text "KBD "
4765   25EB 00          		.db   0
4766   25EC             lcdstr:	
4767   25EC 4C 43 44 20 		.text "LCD "
4768   25F0 00          		.db   0
4769   25F1             lcdfound:	
4770   25F1 20 46 4F 55 		.text " FOUND "
4770   25F5 4E 44 20 
4771   25F8 00          		.db   0		
4772   25F9             lcddone:
4773   25F9 20 4C 43 44 		.text " LCD OK?"
4773   25FD 20 4F 4B 3F 
4774   2601 00          		.db   0
4775   2602             clkteststr:
4776   2602 43 4C 4B 20 		.text "CLK IC " 
4776   2606 49 43 20 
4777   2609 00          		.db 0
4778   260A             donglestrdata:
4779   260A 44 4E 47 4C 		.text "DNGL-AD7-0 " 
4779   260E 2D 41 44 37 
4779   2612 2D 30 20 
4780   2615 00          		.db 0
4781   2616             donglestrins1:
4782   2616 44 4E 47 4C 		.text "DNGL-C20-27" 
4782   261A 2D 43 32 30 
4782   261E 2D 32 37 
4783   2621 00          		.db 0
4784   2622             donglestrins2:
4785   2622 44 4E 47 4C 		.text "DNGL-C28-29" 
4785   2626 2D 43 32 38 
4785   262A 2D 32 39 
4786   262D 00          		.db 0
4787   262E             dongleins2data:
4788   262E 52 53 54 20 		.text "RST X CS28-29 X"
4788   2632 58 20 43 53 
4788   2636 32 38 2D 32 
4788   263A 39 20 58 
4789   263D 00          		.db 0
4790   263E             donglestrstat:
4791   263E 57 52 20 58 		.text "WR XX RD XX     "
4791   2642 58 20 52 44 
4791   2646 20 58 58 20 
4791   264A 20 20 20 20 
4792   264E 00          		.db 0
4793   264F             loopbackstrdata:
4794   264F 4B 45 59 20 		.text "KEY LOOPED " 
4794   2653 4C 4F 4F 50 
4794   2657 45 44 20 
4795   265A 00          		.db 0
4796   265B             loopbackstrstat:
4797   265B 57 52 20 58 		.text "WR XX RD XX     "
4797   265F 58 20 52 44 
4797   2663 20 58 58 20 
4797   2667 20 20 20 20 
4798   266B 00          		.db 0
4799   266C             kbdteststr:
4800   266C 4B 45 59 42 		.text "KEYBOARD " 
4800   2670 4F 41 52 44 
4800   2674 20 
4801   2675 00          		.db 0
4802   2676             keypressedstr:
4803   2676 4B 45 59 3A 		.text "KEY: " 
4803   267A 20 
4804   267B 00          		.db 0
4805   267C             kbdtestfailstr:
4806   267C 54 45 53 54 		.text "TEST FAILED     " 
4806   2680 20 46 41 49 
4806   2684 4C 45 44 20 
4806   2688 20 20 20 20 
4807   268C 00          		.db 0
4808   268D             kbdtestdonestr:
4809   268D 54 45 53 54 		.text "TEST COMPLETED  " 
4809   2691 20 43 4F 4D 
4809   2695 50 4C 45 54 
4809   2699 45 44 20 20 
4810   269D 00          		.db 0
4811   269E             rst75teststr:
4812   269E 52 53 54 20 		.text "RST 7.5 "
4812   26A2 37 2E 35 20 
4813   26A6 00          		.db 0
4814   26A7             sysbusteststr:
4815   26A7 53 59 53 20 		.text "SYS BUS         "
4815   26AB 42 55 53 20 
4815   26AF 20 20 20 20 
4815   26B3 20 20 20 20 
4816   26B7 00          		.db 0
4817   26B8             systeststr:
4818   26B8 57 52 20 58 		.text "WR XX RD XX S xx"
4818   26BC 58 20 52 44 
4818   26C0 20 58 58 20 
4818   26C4 53 20 78 78 
4819   26C8 00          		.db 0
4820   26C9             rst65teststr:
4821   26C9 43 54 52 4C 		.text "CTRL BITS       "
4821   26CD 20 42 49 54 
4821   26D1 53 20 20 20 
4821   26D5 20 20 20 20 
4822   26D9 00          		.db 0
4823   26DA             dsrteststr:
4824   26DA 52 54 2F 43 		.text "RT/CT X DS/DT X "
4824   26DE 54 20 58 20 
4824   26E2 44 53 2F 44 
4824   26E6 54 20 58 20 
4825   26EA 00          		.db 0
4826   26EB             loopbackteststr:
4827   26EB 4C 4F 4F 50 		.text "LOOPBACK TEST   "
4827   26EF 42 41 43 4B 
4827   26F3 20 54 45 53 
4827   26F7 54 20 20 20 
4828   26FB 00          		.db 0
4829   26FC             loopbackstatstr:
4830   26FC 43 20 78 78 		.text "C xx TX xx RX xx"
4830   2700 20 54 58 20 
4830   2704 78 78 20 52 
4830   2708 58 20 78 78 
4831   270C 00          		.db 0		
4832   270D             loopbackfailstr:
4833   270D 4C 4F 4F 50 		.text "LOOPBACK FAIL   "
4833   2711 42 41 43 4B 
4833   2715 20 46 41 49 
4833   2719 4C 20 20 20 
4834   271D 00          		.db 0
4835   271E             loopbackpassstr:
4836   271E 4C 4F 4F 50 		.text "LOOPBACK PASS   "
4836   2722 42 41 43 4B 
4836   2726 20 50 41 53 
4836   272A 53 20 20 20 
4837   272E 00          		.db 0
4838   272F             txfailstr: 
4839   272F 54 58 20 46 		.text "TX Failed       "
4839   2733 61 69 6C 65 
4839   2737 64 20 20 20 
4839   273B 20 20 20 20 
4840   273F 00          		.db 0
4841   2740             rxfailstr: 
4842   2740 52 58 20 46 		.text "RX Failed       "
4842   2744 61 69 6C 65 
4842   2748 64 20 20 20 
4842   274C 20 20 20 20 
4843   2750 00          		.db 0
4844   2751             lptteststr:
4845   2751 4C 50 54 20 		.text "LPT I/F "
4845   2755 49 2F 46 20 
4846   2759 00          		.db 0
4847   275A             lptloopteststr:
4848   275A 57 52 20 58 		.text "WR XX RD XX"
4848   275E 58 20 52 44 
4848   2762 20 58 58 
4849   2765 00          		.db 0
4850   2766             nbusyteststr:
4851   2766 42 75 73 79 		.text "Busy- ??        "
4851   276A 2D 20 3F 3F 
4851   276E 20 20 20 20 
4851   2772 20 20 20 20 
4852   2776 00          		.db 0
4853   2777             busyteststr:
4854   2777 42 75 73 79 		.text "Busy  ??        "
4854   277B 20 20 3F 3F 
4854   277F 20 20 20 20 
4854   2783 20 20 20 20 
4855   2787 00          		.db 0
4856   2788             rst55teststr:
4857   2788 42 43 52 20 		.text "BCR I/F "
4857   278C 49 2F 46 20 
4858   2790 00          		.db 0
4859   2791             rst55loopteststr:
4860   2791 4C 50 20 58 		.text "LP XX CT XX P   "
4860   2795 58 20 43 54 
4860   2799 20 58 58 20 
4860   279D 50 20 20 20 
4861   27A1 00          		.db 0
4862   27A2             casteststr:
4863   27A2 43 41 53 20 		.text "CAS REMOTE      "  ; 11
4863   27A6 52 45 4D 4F 
4863   27AA 54 45 20 20 
4863   27AE 20 20 20 20 
4864   27B2 00          		.db 0
4865   27B3             castestfailstr:
4866   27B3 43 41 53 20 		.text "CAS REMOTE FAIL "  ; 11
4866   27B7 52 45 4D 4F 
4866   27BB 54 45 20 46 
4866   27BF 41 49 4C 20 
4867   27C3 00          		.db 0
4868   27C4             castestpassstr:
4869   27C4 43 41 53 20 		.text "CAS REMOTE PASS "  ; 11
4869   27C8 52 45 4D 4F 
4869   27CC 54 45 20 50 
4869   27D0 41 53 53 20 
4870   27D4 00          		.db 0
4871   27D5             castestaudiostr:
4872   27D5 43 41 53 20 		.text "CAS AUDIO TEST  "  ; 3
4872   27D9 41 55 44 49 
4872   27DD 4F 20 54 45 
4872   27E1 53 54 20 20 
4873   27E5 00          		.db 0
4874   27E6             castestaudiosyncstr:
4875   27E6 53 59 4E 43 		.text "SYNC PASS:      "  ; 3
4875   27EA 20 50 41 53 
4875   27EE 53 3A 20 20 
4875   27F2 20 20 20 20 
4876   27F6 00          		.db 0
4877   27F7             castestaudiosyncfailstr:
4878   27F7 53 59 4E 43 		.text "SYNC FAIL:      "  ; 3
4878   27FB 20 46 41 49 
4878   27FF 4C 3A 20 20 
4878   2803 20 20 20 20 
4879   2807 00          		.db 0
4880   2808             castestaudiodonestr:
4881   2808 43 41 53 20 		.text "CAS AUDIO DONE  "  ; 3
4881   280C 41 55 44 49 
4881   2810 4F 20 44 4F 
4881   2814 4E 45 20 20 
4882   2818 00          		.db 0
4883   2819             castestoffstr:
4884   2819 43 41 53 20 		.text "CAS REMOTE OFF  "  ; 3
4884   281D 52 45 4D 4F 
4884   2821 54 45 20 4F 
4884   2825 46 46 20 20 
4885   2829 00          		.db 0
4886   282A             castestonstr:
4887   282A 43 41 53 20 		.text "CAS REMOTE ON   "  ; 3
4887   282E 52 45 4D 4F 
4887   2832 54 45 20 4F 
4887   2836 4E 20 20 20 
4888   283A 00          		.db 0
4889   283B             castestplaystr:
4890   283B 50 4C 41 59 		.text "PLAY[BLK] ctl-brk"
4890   283F 5B 42 4C 4B 
4890   2843 5D 20 63 74 
4890   2847 6C 2D 62 72 
4890   284B 6B 
4891   284C 00          		.db 0	
4892   284D             castestrecstr:
4893   284D 52 45 43 20 		.text "REC [GRY] ctl-brk"
4893   2851 5B 47 52 59 
4893   2855 5D 20 63 74 
4893   2859 6C 2D 62 72 
4893   285D 6B 
4894   285E 00          		.db 0
4895   285F             castestplaystartedstr
4896   285F 4C 49 53 54 		.text "LISTENING....   "
4896   2863 45 4E 49 4E 
4896   2867 47 2E 2E 2E 
4896   286B 2E 20 20 20 
4897   286F 00          		.db 0
4898   2870             castestrecstartedstr
4899   2870 53 45 4E 44 		.text "SENDING AUDIO   "
4899   2874 49 4E 47 20 
4899   2878 41 55 44 49 
4899   287C 4F 20 20 20 
4900   2880 00          		.db 0
4901   2881             stromteststr:
4902   2881 53 57 49 54 		.text "SWITCH 2 OPTROM "
4902   2885 43 48 20 32 
4902   2889 20 4F 50 54 
4902   288D 52 4F 4D 20 
4903   2891 00          		.db 0
4904   2892             optromfoundstr:
4905   2892 4F 50 54 52 		.text "OPTROM SWITCHED "
4905   2896 4F 4D 20 53 
4905   289A 57 49 54 43 
4905   289E 48 45 44 20 
4906   28A2 00          		.db 0
4907   28A3             nooptromstr:
4908   28A3 4F 50 54 52 		.text "OPTROM FAILED   "
4908   28A7 4F 4D 20 46 
4908   28AB 41 49 4C 45 
4908   28AF 44 20 20 20 
4909   28B3 00          		.db 0
4910   28B4             stromfailurestr:
4911   28B4 4E 4F 20 52 		.text "NO RAM"
4911   28B8 41 4D 
4912   28BA 00          		.db 0
4913   28BB             ram0used:
4914   28BB 30          		.text "0"
4915   28BC 00          		.db 0
4916   28BD             ram1used:
4917   28BD 31          		.text "1"
4918   28BE 00          		.db 0
4919   28BF             ram2used:
4920   28BF 32          		.text "2"
4921   28C0 00          		.db 0
4922   28C1             ram3used:
4923   28C1 33          		.text "3"
4924   28C2 00          		.db 0	
4925   28C3             chksum:
4926   28C3             ;		.text "0123456789ABCDEF"
4927   28C3 20 78 78 78 		.text " xxxx PASS yyyy"
4927   28C7 78 20 50 41 
4927   28CB 53 53 20 79 
4927   28CF 79 79 79 
4928   28D2 00          		.db 0
4929   28D3             optromunknow:
4930   28D3 55 4E 4B 3F 		.text "UNK?  "
4930   28D7 20 20 
4931   28D9 00          		.db 0
4932   28DA             idrex:
4933   28DA 52 45 58 20 		.text "REX   "
4933   28DE 20 20 
4934   28E0 00          		.db 0
4935   28E1             settingsvalue:
4936   28E1 53 45 54 54 		.text "SETTINGS:"
4936   28E5 49 4E 47 53 
4936   28E9 3A 
4937   28EA 00          		.db 0
4938   28EB             goodbye:
4939   28EB 50 6F 77 65 		.text "Powering off!   "
4939   28EF 72 69 6E 67 
4939   28F3 20 6F 66 66 
4939   28F7 21 20 20 20 
4940   28FB 00          		.db 0	
4941   28FC             testcompletestr:
4942   28FC 57 41 49 54 		.text "WAIT FOR PWR OFF"
4942   2900 20 46 4F 52 
4942   2904 20 50 57 52 
4942   2908 20 4F 46 46 
4943   290C 00          		.db 0
4944   290D             versioninfostr:
4945   290D 28 63 29 20 		.text "(c)  2/2021 "
4945   2911 20 32 2F 32 
4945   2915 30 32 31 20 
4946   2919 56 33 2E 33 		VERSION
4947   291D 00          		.db 0
4948   291E             ;		.text "0123456789ABCDEF"
4949   291E             dumpromstr:
4950   291E 44 55 4D 50 		.text "DUMP ROM BEGIN  "
4950   2922 20 52 4F 4D 
4950   2926 20 42 45 47 
4950   292A 49 4E 20 20 
4951   292E 00          		.db 0
4952   292F             dumpromstrend:
4953   292F 44 55 4D 50 		.text "DUMP ROM END    "
4953   2933 20 52 4F 4D 
4953   2937 20 45 4E 44 
4953   293B 20 20 20 20 
4954   293F 00          		.db 0
4955   2940             ; ==========================================================
4956   2940             ; OPTROM IDs
4957   2940             ; ==========================================================
4958   2940             optromidtable:
4959   2940 C0 00       	.db 0C0H,000H ; Empty Socket
4960   2942 4E 55 4C 4C 	.text "NULL  "
4960   2946 20 20 
4961   2948 00          	.db 0
4962   2949 19 32       	.db 019H,032H ; UR II
4963   294B 55 52 32 20 	.text "UR2   "
4963   294F 20 20 
4964   2951 00          	.db 0	
4965   2952 74 1A       	.db 074H,01AH ; Clueseau
4966   2954 52 4F 4D 32 	.text "ROM2  "
4966   2958 20 20 
4967   295A 00          	.db 0
4968   295B 3C 09       	.db 03CH,009H ; Sardine
4969   295D 53 41 52 31 	.text "SAR10 "
4969   2961 30 20 
4970   2963 00          	.db 0
4971   2964 40 7C       	.db 040H,07CH ; 
4972   2966 53 55 50 31 	.text "SUP10 "
4972   296A 30 20 
4973   296C 00          	.db 0	
4974   296D 44 38       	.db 044H,038H ; TSDOS
4975   296F 54 53 44 31 	.text "TSD10 "
4975   2973 30 20 
4976   2975 00          	.db 0	
4977   2976             endoptromidtable .equ $
4978   2976             
4979   2976             ; ==========================================================
4980   2976             ; Init serial port
4981   2976             ; ==========================================================
4982   2976             initRS:
4983   2976             ; Configure the serial port, switch to RS232
4984   2976 3E 24       		MVI A,024H       ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=RS232, Keyscan col 9 enable)
4985   2978 D3 B2       		OUT PIOB         ; Set PIO chip port B configuration	
4986   297A             
4987   297A             ; Set baud rate 19200 using PIO Timer	
4988   297A 3E 08       		MVI A,008H
4989   297C D3 B4       		OUT PIOT1     ; BCH Timer 0
4990   297E 3E 40       		MVI A,040H
4991   2980 D3 B5       		OUT PIOT2	  ; BDH Timer 1
4992   2982 3E C3       		MVI A,0C3H
4993   2984 D3 B0       		OUT PIOCR	  ; B8H Control Reg
4994   2986             		
4995   2986             ; Configure UART Chip
4996   2986             ; B11100: 8bits + No Parity + 1 stop
4997   2986 3E 1C       		MVI A,01CH
4998   2988 D3 D8       		OUT UARTmode  ; D8H
4999   298A C9          		RET
5000   298B             		
5001   298B             ; ==========================================================
5002   298B             ; Put Char in A to serial port
5003   298B             ; ==========================================================
5004   298B             putchRS:
5005   298B F5          		PUSH PSW      ; Save A
5006   298C             putchwaitRS:
5007   298C DB D8       		IN UARTmode    ; D8H	
5008   298E E6 10       		ANI 010H       ; TX Buffer empty - High buffer empty
5009   2990 CA 8C 29    		JZ putchwaitRS ; Wait for TX buffer to empty		
5010   2993 F1          		POP PSW        ; Restore A
5011   2994 D3 C8       		OUT UARTsend   ; C8H
5012   2996 C9          		RET	
5013   2997             
5014   2997             ; ==========================================================
5015   2997             ; Put string to serial port HL points to string
5016   2997             ; ==========================================================
5017   2997             putstrRS:
5018   2997 F5          		PUSH PSW
5019   2998             putsloopRS:
5020   2998 7E          		MOV A,M   	     ; H = Current Character
5021   2999 FE 00       		CPI 0H           ; Check end of table
5022   299B CA A5 29    		JZ putstrRSexit       
5023   299E             		
5024   299E CD 8B 29    		CALL putchRS     ; Write to Serial Port
5025   29A1 23          		INX H            ; Get next Char
5026   29A2 C3 98 29    		JMP putsloopRS
5027   29A5             		
5028   29A5             putstrRSexit:
5029   29A5 F1          		POP PSW
5030   29A6 C9          		RET
5031   29A7             		
5032   29A7             ; ======================================================
5033   29A7             ; Dump memory (HL) size of B to Serial port in Binary
5034   29A7             ; ======================================================
5035   29A7             dumpmemRS:
5036   29A7 F5          		PUSH PSW
5037   29A8 C5          		PUSH B
5038   29A9 E5          		PUSH H
5039   29AA             dumploopRS:
5040   29AA 7E          		MOV A,M
5041   29AB CD 8B 29    		CALL putchRS     ; Write to Serial Port
5042   29AE 23          		INX H
5043   29AF 05          		DCR B
5044   29B0 C2 AA 29    		JNZ dumploopRS
5045   29B3             
5046   29B3 E1          		POP H
5047   29B4 C1          		POP B
5048   29B5 F1          		POP PSW
5049   29B6 C9          		RET
5050   29B7             ; ==========================================================
5051   29B7             ; Diagnostic Serial Strings	
5052   29B7             ; ==========================================================		
5053   29B7             romdumpstart:
5054   29B7 53 74 61 72 	.text "Start ROM dump \r\n>"
5054   29BB 74 20 52 4F 
5054   29BF 4D 20 64 75 
5054   29C3 6D 70 20 0D 
5054   29C7 0A 3E 
5055   29C9 00          	.db 0
5056   29CA             romdumpend:
5057   29CA 3C 0D 0A 20 	.text "<\r\n End ROM dump \r\n"
5057   29CE 45 6E 64 20 
5057   29D2 52 4F 4D 20 
5057   29D6 64 75 6D 70 
5057   29DA 20 0D 0A 
5058   29DD 00          	.db 0
5059   29DE             ;*************************************
5060   29DE             dumpromtest:
5061   29DE 21 00 00    		LXI H, 0  ; Start of ROM
5062   29E1             dumpromlooptest:
5063   29E1 7E          		MOV A,M   ; Get byte
5064   29E2 CD 8B 29    		CALL putchRS
5065   29E5 23          		INX  H    ; Point to next byte
5066   29E6 7C          		MOV A,H   ; Test count for 0: 4
5067   29E7 DE 80       		SBI 080H  ;
5068   29E9 B5          		ORA L     ; Test lower byte: 4
5069   29EA C2 E1 29            JNZ dumpromlooptest  ; If ~0 continue 
5070   29ED C9          		RET
5071   29EE             		
5072   29EE             ; ==========================================================
5073   29EE             ; Main LCD Screen Strings for MT100/102
5074   29EE             ; 	The following strings are used for the LCD test
5075   29EE             ; ==========================================================
5076   29EE             tstline0:
5077   29EE 4D 6F 64 65 		.text "Model 100 Test ROM Version "
5077   29F2 6C 20 31 30 
5077   29F6 30 20 54 65 
5077   29FA 73 74 20 52 
5077   29FE 4F 4D 20 56 
5077   2A02 65 72 73 69 
5077   2A06 6F 6E 20 
5078   2A09 56 33 2E 33 		VERSION
5079   2A0D 20 46 65 62 		.text " Feb 2021*"
5079   2A11 20 32 30 32 
5079   2A15 31 2A 
5080   2A17 00          		.db 0
5081   2A18             tstline1:	
5082   2A18 21 22 23 24 		.text "!\"#$%&'()*+`-./01234567890:;<=>?@"
5082   2A1C 25 26 27 28 
5082   2A20 29 2A 2B 60 
5082   2A24 2D 2E 2F 30 
5082   2A28 31 32 33 34 
5082   2A2C 35 36 37 38 
5082   2A30 39 30 3A 3B 
5082   2A34 3C 3D 3E 3F 
5082   2A38 40 
5083   2A39 00          		.db   0	
5084   2A3A             tstline2:	
5085   2A3A 41 42 43 44 		.text "ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`"
5085   2A3E 45 46 47 48 
5085   2A42 49 4A 4B 4C 
5085   2A46 4D 4E 4F 50 
5085   2A4A 51 52 53 54 
5085   2A4E 55 56 57 58 
5085   2A52 59 5A 5B 5D 
5085   2A56 5E 5F 60 
5086   2A59 00          		.db   0	
5087   2A5A             tstline3:	
5088   2A5A 61 62 63 64 		.text "abcdefghijklmnopqrstuvwxyz{|}~"
5088   2A5E 65 66 67 68 
5088   2A62 69 6A 6B 6C 
5088   2A66 6D 6E 6F 70 
5088   2A6A 71 72 73 74 
5088   2A6E 75 76 77 78 
5088   2A72 79 7A 7B 7C 
5088   2A76 7D 7E 
5089   2A78 00          		.db   0	
5090   2A79             tstline4:
5091   2A79 80 81 82 83 		.db 080H,081H,082H,083H,084H,085H,086H,087H
5091   2A7D 84 85 86 87 
5092   2A81 88 89 8A 8B 		.db 088H,089H,08Ah,08BH,08CH,08DH,08EH,08FH		
5092   2A85 8C 8D 8E 8F 
5093   2A89 90 98 92 93 		.db 090H,098H,092h,093H,094H,095H,096H,097H
5093   2A8D 94 95 96 97 
5094   2A91 98 99 9A 9B 		.db 098H,099H,09Ah,09BH,09CH,09DH,09EH,09FH
5094   2A95 9C 9D 9E 9F 
5095   2A99 00          		.db 0
5096   2A9A             tstline5:
5097   2A9A A0 A1 A2 A3 		.db 0A0H,0A1H,0A2H,0A3H,0A4H,0A5H,0A6H,0A7H
5097   2A9E A4 A5 A6 A7 
5098   2AA2 A8 A9 AA AB 		.db 0A8H,0A9H,0AAH,0ABH,0ACH,0ADH,0AEH,0AFH		
5098   2AA6 AC AD AE AF 
5099   2AAA B0 B1 B2 B3 		.db 0B0H,0B1H,0B2H,0B3H,0B4H,0B5H,0B6H,0B7H
5099   2AAE B4 B5 B6 B7 
5100   2AB2 B8 B9 BA BB 		.db 0B8H,0B9H,0BAH,0BBH,0BCH,0BDH,0BEH,0BFH
5100   2AB6 BC BD BE BF 
5101   2ABA 00          		.db 0
5102   2ABB             tstline6:
5103   2ABB C0 C1 C2 C3 		.db 0C0H,0C1H,0C2H,0C3H,0C4H,0C5H,0C6H,0C7H
5103   2ABF C4 C5 C6 C7 
5104   2AC3 C8 C9 CA CB 		.db 0C8H,0C9H,0CAH,0CBH,0CCH,0CDH,0CEH,0CFH		
5104   2AC7 CC CD CE CF 
5105   2ACB D0 D1 D2 D3 		.db 0D0H,0D1H,0D2H,0D3H,0D4H,0D5H,0D6H,0D7H
5105   2ACF D4 D5 D6 D7 
5106   2AD3 D8 D9 DA DB 		.db 0D8H,0D9H,0DAH,0DBH,0DCH,0DDH,0DEH,0CFH
5106   2AD7 DC DD DE CF 
5107   2ADB 00          		.db 0
5108   2ADC             
5109   2ADC             tstline7:
5110   2ADC E0 E1 E2 E3 		.db 0E0H,0E1H,0E2H,0E3H,0E4H,0E5H,0E6H,0E7H
5110   2AE0 E4 E5 E6 E7 
5111   2AE4 E8 E9 EA EB 		.db 0E8H,0E9H,0EAH,0EBH,0ECH,0EDH,0EEH,0EFH		
5111   2AE8 EC ED EE EF 
5112   2AEC F0 F1 F2 F3 		.db 0F0H,0F1H,0F2H,0F3H,0F4H,0F5H,0F6H,0F7H
5112   2AF0 F4 F5 F6 F7 
5113   2AF4 F8 F9 FA FB 		.db 0F8H,0F9H,0FAH,0FBH,0FCH,0FDH,0FEH,0FFH
5113   2AF8 FC FD FE FF 
5114   2AFC 00          		.db 0
5115   2AFD             
5116   2AFD             ; ==========================================================
5117   2AFD             ; RAM TEST Data used buy the RAM and all port tests
5118   2AFD             ; ==========================================================
5119   2AFD             piotstdata:
5120   2AFD             ramtstdata:
5121   2AFD             dongletestdata:
5122   2AFD             loopbacktstdata:
5123   2AFD 00          		.db 000H
5124   2AFE 01          		.db	001H
5125   2AFF 02          		.db	002H
5126   2B00 04          		.db	004H
5127   2B01 08          		.db	008H
5128   2B02 10          		.db	010H
5129   2B03 20          		.db	020H
5130   2B04 40          		.db	040H
5131   2B05 80          		.db	080H
5132   2B06 FF          		.db	0FFH
5133   2B07 55          		.db	055H
5134   2B08 AA          		.db	0AAH
5135   2B09             eotramtests: .equ 0FEH
5136   2B09 FE          		.db	0FEH  ; End of table marker
5137   2B0A             
5138   2B0A             ; ======================================================
5139   2B0A             ; 8155 PIO chip bit patterns for LCD drivers
5140   2B0A             ; ======================================================
5141   2B0A             ; 8155 PIO chip bit patterns for Upper LCD drivers
5142   2B0A             lcduppercs: ;7551H
5143   2B0A 01 00 00 01 	.db   001H,000H,000H,001H,000H,006H,001H,000H
5143   2B0E 00 06 01 00 
5144   2B12 0C 01 00 12 	.db   00CH,001H,000H,012H,001H,000H,018H,001H
5144   2B16 01 00 18 01 
5145   2B1A 00 1E 01 00 	.db   000H,01EH,001H,000H,024H,001H,000H,02AH
5145   2B1E 24 01 00 2A 
5146   2B22 01 00 30 02 	.db   001H,000H,030H,002H,000H,004H,002H,000H
5146   2B26 00 04 02 00 
5147   2B2A 0A 02 00 10 	.db   00AH,002H,000H,010H,002H,000H,016H,002H
5147   2B2E 02 00 16 02 
5148   2B32 00 1C 02 00 	.db   000H,01CH,002H,000H,022H,002H,000H,028H
5148   2B36 22 02 00 28 
5149   2B3A 02 00 2E 04 	.db   002H,000H,02EH,004H,000H,002H,004H,000H
5149   2B3E 00 02 04 00 
5150   2B42 08 04 00 0E 	.db   008H,004H,000H,00EH,004H,000H,014H,004H
5150   2B46 04 00 14 04 
5151   2B4A 00 1A 04 00 	.db   000H,01AH,004H,000H,020H,004H,000H,026H
5151   2B4E 20 04 00 26 
5152   2B52 04 00 2C 08 	.db   004H,000H,02CH,008H,000H,000H,008H,000H
5152   2B56 00 00 08 00 
5153   2B5A 06 08 00 0C 	.db   006H,008H,000H,00CH,008H,000H,012H,008H
5153   2B5E 08 00 12 08 
5154   2B62 00 18 08 00 	.db   000H,018H,008H,000H,01EH,008H,000H,024H
5154   2B66 1E 08 00 24 
5155   2B6A 08 00 2A 08 	.db   008H,000H,02AH,008H,000H,030H,010H,000H
5155   2B6E 00 30 10 00 
5156   2B72 04 10 00 0A 	.db   004H,010H,000H,00AH,010H,000H,010H,010H
5156   2B76 10 00 10 10 
5157   2B7A 00 16 10 00 	.db   000H,016H,010H,000H,01CH,010H,000H,022H
5157   2B7E 1C 10 00 22 
5158   2B82             ; 8155 PIO chip bit patterns for lower LCD drivers
5159   2B82             lcdlowercs: ;75C9H
5160   2B82 20 00 00 20 	.db   020H,000H,000H,020H,000H,006H,020H,000H
5160   2B86 00 06 20 00 
5161   2B8A 0C 20 00 12 	.db   00CH,020H,000H,012H,020H,000H,018H,020H
5161   2B8E 20 00 18 20 
5162   2B92 00 1E 20 00 	.db   000H,01EH,020H,000H,024H,020H,000H,02AH
5162   2B96 24 20 00 2A 
5163   2B9A 20 00 30 40 	.db   020H,000H,030H,040H,000H,004H,040H,000H
5163   2B9E 00 04 40 00 
5164   2BA2 0A 40 00 10 	.db   00AH,040H,000H,010H,040H,000H,016H,040H
5164   2BA6 40 00 16 40 
5165   2BAA 00 1C 40 00 	.db   000H,01CH,040H,000H,022H,040H,000H,028H
5165   2BAE 22 40 00 28 
5166   2BB2 40 00 2E 80 	.db   040H,000H,02EH,080H,000H,002H,080H,000H
5166   2BB6 00 02 80 00 
5167   2BBA 08 80 00 0E 	.db   008H,080H,000H,00EH,080H,000H,014H,080H
5167   2BBE 80 00 14 80 
5168   2BC2 00 1A 80 00 	.db   000H,01AH,080H,000H,020H,080H,000H,026H
5168   2BC6 20 80 00 26 
5169   2BCA 80 00 2C 00 	.db   080H,000H,02CH,000H,001H,000H,000H,001H
5169   2BCE 01 00 00 01 
5170   2BD2 06 00 01 0C 	.db   006H,000H,001H,00CH,000H,001H,012H,000H
5170   2BD6 00 01 12 00 
5171   2BDA 01 18 00 01 	.db   001H,018H,000H,001H,01EH,000H,001H,024H
5171   2BDE 1E 00 01 24 
5172   2BE2 00 01 2A 00 	.db   000H,001H,02AH,000H,001H,030H,000H,002H
5172   2BE6 01 30 00 02 
5173   2BEA 04 00 02 0A 	.db   004H,000H,002H,00AH,000H,002H,010H,000H
5173   2BEE 00 02 10 00 
5174   2BF2 02 16 00 02 	.db   002H,016H,000H,002H,01CH,000H,002H,022H
5174   2BF6 1C 00 02 22 
5175   2BFA             
5176   2BFA             ; ======================================================
5177   2BFA             ; 8155 PIO chip bit patterns to enable all LCD drivers
5178   2BFA             ; ======================================================
5179   2BFA             lcdalldrivers: ;7641H
5180   2BFA FF 03       		.db   0FFH,003H
5181   2BFC             
5182   2BFC             ; ======================================================
5183   2BFC             ; 8155 PIO chip bit patterns for LCD drivers
5184   2BFC             ; ======================================================
5185   2BFC             lcdchipbitpatterns: ;7643H
5186   2BFC 01 00 02 00 		.db 001H,000H,002H,000H,004H,000H,008H,000H
5186   2C00 04 00 08 00 
5187   2C04 10 00 20 00 		.db 010H,000H,020H,000H,040H,000H,080H,000H
5187   2C08 40 00 80 00 
5188   2C0C 00 01 00 02 		.db 000H,001H,000H,002H
5189   2C10             	
5190   2C10             ; ======================================================
5191   2C10             ; DVI command table - sent to external DVI
5192   2C10             ; ======================================================
5193   2C10             dvicmds: ;770BH
5194   2C10 02 01 00 00 		.db 002H,001H,000H,000H,001H,00H
5194   2C14 01 00 
5195   2C16             ; ======================================================
5196   2C16             ; LCD char generator format table (20H-7FH)
5197   2C16             ; ======================================================
5198   2C16             lcdasciitable: ;7711H
5199   2C16 00 00 00 00 		.db   000H,000H,000H,000H,000H,000H,000H,04FH
5199   2C1A 00 00 00 4F 
5200   2C1E 00 00 00 07 		.db   000H,000H,000H,007H,000H,007H,000H,014H
5200   2C22 00 07 00 14 
5201   2C26 7F 14 7F 14 		.db   07FH,014H,07FH,014H,024H,02AH,07FH,02AH
5201   2C2A 24 2A 7F 2A 
5202   2C2E 12 23 13 08 		.db   012H,023H,013H,008H,064H,062H,03AH,045H
5202   2C32 64 62 3A 45 
5203   2C36 4A 30 28 00 		.db   04AH,030H,028H,000H,004H,002H,001H,000H
5203   2C3A 04 02 01 00 
5204   2C3E 00 1C 22 41 		.db   000H,01CH,022H,041H,000H,000H,041H,022H
5204   2C42 00 00 41 22 
5205   2C46 1C 00 22 14 		.db   01CH,000H,022H,014H,07FH,014H,022H,008H
5205   2C4A 7F 14 22 08 
5206   2C4E 08 3E 08 08 		.db   008H,03EH,008H,008H,000H,080H,060H,000H
5206   2C52 00 80 60 00 
5207   2C56 00 08 08 08 		.db   000H,008H,008H,008H,008H,008H,000H,060H
5207   2C5A 08 08 00 60 
5208   2C5E 60 00 00 40 		.db   060H,000H,000H,040H,020H,010H,008H,004H
5208   2C62 20 10 08 04 
5209   2C66 3E 51 49 45 		.db   03EH,051H,049H,045H,03EH,044H,042H,07FH
5209   2C6A 3E 44 42 7F 
5210   2C6E 40 40 62 51 		.db   040H,040H,062H,051H,051H,049H,046H,022H
5210   2C72 51 49 46 22 
5211   2C76 41 49 49 36 		.db   041H,049H,049H,036H,018H,014H,012H,07FH
5211   2C7A 18 14 12 7F 
5212   2C7E 10 47 45 45 		.db   010H,047H,045H,045H,029H,011H,03CH,04AH
5212   2C82 29 11 3C 4A 
5213   2C86 49 49 30 03 		.db   049H,049H,030H,003H,001H,079H,005H,003H
5213   2C8A 01 79 05 03 
5214   2C8E 36 49 49 49 		.db   036H,049H,049H,049H,036H,006H,049H,049H
5214   2C92 36 06 49 49 
5215   2C96 29 1E 00 00 		.db   029H,01EH,000H,000H,024H,000H,000H,000H
5215   2C9A 24 00 00 00 
5216   2C9E 80 64 00 00 		.db   080H,064H,000H,000H,008H,01CH,036H,063H
5216   2CA2 08 1C 36 63 
5217   2CA6 41 14 14 14 		.db   041H,014H,014H,014H,014H,014H,041H,063H
5217   2CAA 14 14 41 63 
5218   2CAE 36 1C 08 02 		.db   036H,01CH,008H,002H,001H,051H,009H,006H
5218   2CB2 01 51 09 06 
5219   2CB6 32 49 79 41 		.db   032H,049H,079H,041H,03EH,07CH,012H,011H
5219   2CBA 3E 7C 12 11 
5220   2CBE 12 7C 41 7F 		.db   012H,07CH,041H,07FH,049H,049H,036H,01CH
5220   2CC2 49 49 36 1C 
5221   2CC6 22 41 41 22 		.db   022H,041H,041H,022H,041H,07FH,041H,022H
5221   2CCA 41 7F 41 22 
5222   2CCE 1C 7F 49 49 		.db   01CH,07FH,049H,049H,049H,041H,07FH,009H
5222   2CD2 49 41 7F 09 
5223   2CD6 09 09 01 3E 		.db   009H,009H,001H,03EH,041H,049H,049H,03AH
5223   2CDA 41 49 49 3A 
5224   2CDE 7F 08 08 08 		.db   07FH,008H,008H,008H,07FH,000H,041H,07FH
5224   2CE2 7F 00 41 7F 
5225   2CE6 41 00 30 40 		.db   041H,000H,030H,040H,041H,03FH,001H,07FH
5225   2CEA 41 3F 01 7F 
5226   2CEE 08 14 22 41 		.db   008H,014H,022H,041H,07FH,040H,040H,040H
5226   2CF2 7F 40 40 40 
5227   2CF6 40 7F 02 0C 		.db   040H,07FH,002H,00CH,002H,07FH,07FH,006H
5227   2CFA 02 7F 7F 06 
5228   2CFE 08 30 7F 3E 		.db   008H,030H,07FH,03EH,041H,041H,041H,03EH
5228   2D02 41 41 41 3E 
5229   2D06 7F 09 09 09 		.db   07FH,009H,009H,009H,006H,03EH,041H,051H
5229   2D0A 06 3E 41 51 
5230   2D0E 21 5E 7F 09 		.db   021H,05EH,07FH,009H,019H,029H,046H,026H
5230   2D12 19 29 46 26 
5231   2D16 49 49 49 32 		.db   049H,049H,049H,032H,001H,001H,07FH,001H
5231   2D1A 01 01 7F 01 
5232   2D1E 01 3F 40 40 		.db   001H,03FH,040H,040H,040H,03FH,00FH,030H
5232   2D22 40 3F 0F 30 
5233   2D26 40 30 0F 7F 		.db   040H,030H,00FH,07FH,020H,018H,020H,07FH
5233   2D2A 20 18 20 7F 
5234   2D2E 63 14 08 14 		.db   063H,014H,008H,014H,063H,007H,008H,078H
5234   2D32 63 07 08 78 
5235   2D36 08 07 61 51 		.db   008H,007H,061H,051H,049H,045H,043H,000H
5235   2D3A 49 45 43 00 
5236   2D3E 7F 41 41 00 		.db   07FH,041H,041H,000H,004H,008H,010H,020H
5236   2D42 04 08 10 20 
5237   2D46 40 00 41 41 		.db   040H,000H,041H,041H,07FH,000H,004H,002H
5237   2D4A 7F 00 04 02 
5238   2D4E 01 02 04 40 		.db   001H,002H,004H,040H,040H,040H,040H,040H
5238   2D52 40 40 40 40 
5239   2D56 00 01 02 04 		.db   000H,001H,002H,004H,000H,020H,054H,054H
5239   2D5A 00 20 54 54 
5240   2D5E 54 78 7F 28 		.db   054H,078H,07FH,028H,044H,044H,038H,038H
5240   2D62 44 44 38 38 
5241   2D66 44 44 44 28 		.db   044H,044H,044H,028H,038H,044H,044H,028H
5241   2D6A 38 44 44 28 
5242   2D6E 7F 38 54 54 		.db   07FH,038H,054H,054H,054H,018H,008H,008H
5242   2D72 54 18 08 08 
5243   2D76 7E 09 0A 18 		.db   07EH,009H,00AH,018H,0A4H,0A4H,098H,07CH
5243   2D7A A4 A4 98 7C 
5244   2D7E 7F 04 04 04 		.db   07FH,004H,004H,004H,078H,000H,044H,07DH
5244   2D82 78 00 44 7D 
5245   2D86 40 00 40 80 		.db   040H,000H,040H,080H,084H,07DH,000H,000H
5245   2D8A 84 7D 00 00 
5246   2D8E 7F 10 28 44 		.db   07FH,010H,028H,044H,000H,041H,07FH,040H
5246   2D92 00 41 7F 40 
5247   2D96 00 7C 04 78 		.db   000H,07CH,004H,078H,004H,078H,07CH,008H
5247   2D9A 04 78 7C 08 
5248   2D9E 04 04 78 38 		.db   004H,004H,078H,038H,044H,044H,044H,038H
5248   2DA2 44 44 44 38 
5249   2DA6 FC 18 24 24 		.db   0FCH,018H,024H,024H,018H,018H,024H,024H
5249   2DAA 18 18 24 24 
5250   2DAE 18 FC 7C 08 		.db   018H,0FCH,07CH,008H,004H,004H,008H,058H
5250   2DB2 04 04 08 58 
5251   2DB6 54 54 54 24 		.db   054H,054H,054H,024H,004H,03FH,044H,044H
5251   2DBA 04 3F 44 44 
5252   2DBE 20 3C 40 40 		.db   020H,03CH,040H,040H,03CH,040H,01CH,020H
5252   2DC2 3C 40 1C 20 
5253   2DC6 40 20 1C 3C 		.db   040H,020H,01CH,03CH,040H,038H,040H,03CH
5253   2DCA 40 38 40 3C 
5254   2DCE 44 28 10 28 		.db   044H,028H,010H,028H,044H,01CH,0A0H,0A0H
5254   2DD2 44 1C A0 A0 
5255   2DD6 90 7C 44 64 		.db   090H,07CH,044H,064H,054H,04CH,044H,000H
5255   2DDA 54 4C 44 00 
5256   2DDE 08 36 41 41 		.db   008H,036H,041H,041H,000H,000H,077H,000H
5256   2DE2 00 00 77 00 
5257   2DE6 00 41 41 36 		.db   000H,041H,041H,036H,008H,000H,002H,001H
5257   2DEA 08 00 02 01 
5258   2DEE 02 04 02 00 		.db   002H,004H,002H,000H,000H,000H,000H,000H
5258   2DF2 00 00 00 00 
5259   2DF6             
5260   2DF6             ; ======================================================
5261   2DF6             ; LCD char generator shape table (80H-FFH)
5262   2DF6             ; ======================================================
5263   2DF6             lcdgraphics: 	; 78F1H
5264   2DF6 66 77 49 49 		.db   0066H,077H,049H,049H,077H,066H,0FCH,086H
5264   2DFA 77 66 FC 86 
5265   2DFE D7 EE FC 00 		.db   00D7H,0EEH,0FCH,000H,07FH,063H,014H,008H
5265   2E02 7F 63 14 08 
5266   2E06 14 00 78 76 		.db   014H,000H,078H,076H,062H,04AH,00EH,000H
5266   2E0A 62 4A 0E 00 
5267   2E0E EE 44 FF FF 		.db   0EEH,044H,0FFH,0FFH,044H,0EEH,00CH,04CH
5267   2E12 44 EE 0C 4C 
5268   2E16 7F 4C 0C 00 		.db   07FH,04CH,00CH,000H,07CH,056H,07FH,056H
5268   2E1A 7C 56 7F 56 
5269   2E1E 7C 00 7D 77 		.db   07CH,000H,07DH,077H,047H,077H,07FH,000H
5269   2E22 47 77 7F 00 
5270   2E26 00 00 7D 00 		.db   000H,000H,07DH,000H,000H,000H,010H,020H
5270   2E2A 00 00 10 20 
5271   2E2E 1C 02 02 02 		.db   01CH,002H,002H,002H,054H,034H,01CH,016H
5271   2E32 54 34 1C 16 
5272   2E36 15 00 41 63 		.db   015H,000H,041H,063H,055H,049H,063H,000H
5272   2E3A 55 49 63 00 
5273   2E3E 24 12 12 24 		.db   024H,012H,012H,024H,012H,000H,044H,044H
5273   2E42 12 00 44 44 
5274   2E46 5F 44 44 00 		.db   05FH,044H,044H,000H,000H,040H,03EH,001H
5274   2E4A 00 40 3E 01 
5275   2E4E 00 00 00 08 		.db   000H,000H,000H,008H,01CH,03EH,000H,000H
5275   2E52 1C 3E 00 00 
5276   2E56 98 F4 12 12 		.db   098H,0F4H,012H,012H,0F4H,098H,0F8H,094H
5276   2E5A F4 98 F8 94 
5277   2E5E 12 12 94 F8 		.db   012H,012H,094H,0F8H,014H,022H,07FH,022H
5277   2E62 14 22 7F 22 
5278   2E66 14 00 A0 56 		.db   014H,000H,0A0H,056H,03DH,056H,0A0H,000H
5278   2E6A 3D 56 A0 00 
5279   2E6E 4C 2A 1D 2A 		.db   04CH,02AH,01DH,02AH,048H,000H,038H,028H
5279   2E72 48 00 38 28 
5280   2E76 39 05 03 0F 		.db   039H,005H,003H,00FH,000H,016H,03DH,016H
5280   2E7A 00 16 3D 16 
5281   2E7E 00 00 42 25 		.db   000H,000H,042H,025H,015H,028H,054H,022H
5281   2E82 15 28 54 22 
5282   2E86 04 02 3F 02 		.db   004H,002H,03FH,002H,004H,000H,010H,020H
5282   2E8A 04 00 10 20 
5283   2E8E 7E 20 10 00 		.db   07EH,020H,010H,000H,008H,008H,02AH,01CH
5283   2E92 08 08 2A 1C 
5284   2E96 08 00 08 1C 		.db   008H,000H,008H,01CH,02AH,008H,008H,000H
5284   2E9A 2A 08 08 00 
5285   2E9E 1C 57 61 57 		.db   01CH,057H,061H,057H,01CH,000H,008H,014H
5285   2EA2 1C 00 08 14 
5286   2EA6 22 14 08 00 		.db   022H,014H,008H,000H,01EH,022H,044H,022H
5286   2EAA 1E 22 44 22 
5287   2EAE 1E 00 1C 12 		.db   01EH,000H,01CH,012H,071H,012H,01CH,000H
5287   2EB2 71 12 1C 00 
5288   2EB6 00 04 02 01 		.db   000H,004H,002H,001H,000H,000H,020H,055H
5288   2EBA 00 00 20 55 
5289   2EBE 56 54 78 00 		.db   056H,054H,078H,000H,00EH,051H,031H,011H
5289   2EC2 0E 51 31 11 
5290   2EC6 0A 00 64 7F 		.db   00AH,000H,064H,07FH,045H,045H,020H,000H
5290   2ECA 45 45 20 00 
5291   2ECE 00 01 02 04 		.db   000H,001H,002H,004H,000H,000H,07FH,010H
5291   2ED2 00 00 7F 10 
5292   2ED6 10 0F 10 00 		.db   010H,00FH,010H,000H,000H,002H,005H,002H
5292   2EDA 00 02 05 02 
5293   2EDE 00 00 04 0C 		.db   000H,000H,004H,00CH,01CH,00CH,004H,000H
5293   2EE2 1C 0C 04 00 
5294   2EE6 00 04 7F 04 		.db   000H,004H,07FH,004H,000H,000H,018H,0A7H
5294   2EEA 00 00 18 A7 
5295   2EEE A5 E5 18 00 		.db   0A5H,0E5H,018H,000H,07FH,041H,065H,051H
5295   2EF2 7F 41 65 51 
5296   2EF6 7F 00 7F 41 		.db   07FH,000H,07FH,041H,05DH,049H,07FH,000H
5296   2EFA 5D 49 7F 00 
5297   2EFE 17 08 34 22 		.db   017H,008H,034H,022H,071H,000H,055H,03FH
5297   2F02 71 00 55 3F 
5298   2F06 10 68 44 E2 		.db   010H,068H,044H,0E2H,017H,008H,004H,06AH
5298   2F0A 17 08 04 6A 
5299   2F0E 59 00 06 09 		.db   059H,000H,006H,009H,07FH,001H,07FH,001H
5299   2F12 7F 01 7F 01 
5300   2F16 29 2A 7C 2A 		.db   029H,02AH,07CH,02AH,029H,000H,070H,029H
5300   2F1A 29 00 70 29 
5301   2F1E 24 29 70 00 		.db   024H,029H,070H,000H,038H,045H,044H,045H
5301   2F22 38 45 44 45 
5302   2F26 38 00 3C 41 		.db   038H,000H,03CH,041H,040H,041H,03CH,000H
5302   2F2A 40 41 3C 00 
5303   2F2E 1C 22 7F 22 		.db   01CH,022H,07FH,022H,014H,000H,008H,004H
5303   2F32 14 00 08 04 
5304   2F36 04 08 04 00 		.db   004H,008H,004H,000H,020H,055H,054H,055H
5304   2F3A 20 55 54 55 
5305   2F3E 78 00 30 4A 		.db   078H,000H,030H,04AH,048H,04AH,030H,000H
5305   2F42 48 4A 30 00 
5306   2F46 3C 41 40 21 		.db   03CH,041H,040H,021H,07CH,000H,040H,07FH
5306   2F4A 7C 00 40 7F 
5307   2F4E 49 49 3E 00 		.db   049H,049H,03EH,000H,071H,011H,067H,011H
5307   2F52 71 11 67 11 
5308   2F56 71 00 38 54 		.db   071H,000H,038H,054H,056H,055H,018H,000H
5308   2F5A 56 55 18 00 
5309   2F5E 3C 41 42 20 		.db   03CH,041H,042H,020H,07CH,000H,038H,055H
5309   2F62 7C 00 38 55 
5310   2F66 56 54 18 00 		.db   056H,054H,018H,000H,000H,004H,000H,004H
5310   2F6A 00 04 00 04 
5311   2F6E 00 00 48 7E 		.db   000H,000H,048H,07EH,049H,001H,002H,000H
5311   2F72 49 01 02 00 
5312   2F76 40 AA A9 AA 		.db   040H,0AAH,0A9H,0AAH,0F0H,000H,070H,0AAH
5312   2F7A F0 00 70 AA 
5313   2F7E A9 AA 30 00 		.db   0A9H,0AAH,030H,000H,000H,002H,0E9H,002H
5313   2F82 00 02 E9 02 
5314   2F86 00 00 30 4A 		.db   000H,000H,030H,04AH,49H,04AH,030H,000H
5314   2F8A 49 4A 30 00 
5315   2F8E 38 42 41 22 		.db   038H,042H,041H,022H,078H,000H,008H,004H
5315   2F92 78 00 08 04 
5316   2F96 02 04 08 00 		.db   002H,004H,008H,000H,038H,055H,054H,055H
5316   2F9A 38 55 54 55 
5317   2F9E 18 00 00 02 		.db   018H,000H,000H,002H,068H,002H,000H,000H
5317   2FA2 68 02 00 00 
5318   2FA6 20 54 56 55 		.db   020H,054H,056H,055H,07CH,000H,000H,000H
5318   2FAA 7C 00 00 00 
5319   2FAE 6A 01 00 00 		.db   06AH,001H,000H,000H,030H,048H,04AH,049H
5319   2FB2 30 48 4A 49 
5320   2FB6 30 00 3C 40 		.db   030H,000H,03CH,040H,042H,021H,07CH,000H
5320   2FBA 42 21 7C 00 
5321   2FBE 0C 50 52 51 		.db   00CH,050H,052H,051H,03CH,000H,07AH,011H
5321   2FC2 3C 00 7A 11 
5322   2FC6 09 0A 71 00 		.db   009H,00AH,071H,000H,042H,0A9H,0A9H,0AAH
5322   2FCA 42 A9 A9 AA 
5323   2FCE F1 00 32 49 		.db   0F1H,000H,032H,049H,049H,04AH,031H,000H
5323   2FD2 49 4A 31 00 
5324   2FD6 E0 52 49 52 		.db   0E0H,052H,049H,052H,0E0H,000H,0F8H,0AAH
5324   2FDA E0 00 F8 AA 
5325   2FDE A9 AA 88 00 		.db   0A9H,0AAH,088H,000H,000H,08AH,0F9H,08AH
5325   2FE2 00 8A F9 8A 
5326   2FE6 00 00 70 8A 		.db   000H,000H,070H,08AH,089H,08AH,070H,000H
5326   2FEA 89 8A 70 00 
5327   2FEE 78 82 81 82 		.db   078H,082H,081H,082H,078H,000H,000H,045H
5327   2FF2 78 00 00 45 
5328   2FF6 7C 45 00 00 		.db   07CH,045H,000H,000H,07CH,055H,054H,055H
5328   2FFA 7C 55 54 55 
5329   2FFE 44 00 7C 54 		.db   044H,000H,07CH,054H,056H,055H,044H,000H
5329   3002 56 55 44 00 
5330   3006 E0 50 4A 51 		.db   0E0H,050H,04AH,051H,0E0H,000H,000H,088H
5330   300A E0 00 00 88 
5331   300E FA 89 00 00 		.db   0FAH,089H,000H,000H,070H,088H,08AH,089H
5331   3012 70 88 8A 89 
5332   3016 70 00 3C 40 		.db   070H,000H,03CH,040H,042H,041H,03CH,000H
5332   301A 42 41 3C 00 
5333   301E 0C 10 62 11 		.db   00CH,010H,062H,011H,00CH,000H,03CH,041H
5333   3022 0C 00 3C 41 
5334   3026 42 40 3C 00 		.db   042H,040H,03CH,000H,07CH,055H,056H,054H
5334   302A 7C 55 56 54 
5335   302E 44 00 E0 51 		.db   044H,000H,0E0H,051H,04AH,050H,0E0H,000H
5335   3032 4A 50 E0 00 
5336   3036 00 00 00 00 		.db   000H,000H,000H,000H,000H,000H,00FH,00FH
5336   303A 00 00 0F 0F 
5337   303E 0F 00 00 00 		.db   00FH,000H,000H,000H,000H,000H,000H,00FH
5337   3042 00 00 00 0F 
5338   3046 0F 0F F0 F0 		.db   00FH,00FH,0F0H,0F0H,0F0H,000H,000H,000H
5338   304A F0 00 00 00 
5339   304E 00 00 00 F0 		.db   000H,000H,000H,0F0H,0F0H,0F0H,00FH,00FH
5339   3052 F0 F0 0F 0F 
5340   3056 0F F0 F0 F0 		.db   00FH,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,00FH
5340   305A F0 F0 F0 0F 
5341   305E 0F 0F 0F 0F 		.db   00FH,00FH,00FH,00FH,00FH,00FH,00FH,00FH
5341   3062 0F 0F 0F 0F 
5342   3066 F0 F0 F0 F0 		.db   0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0FFH,0FFH
5342   306A F0 F0 FF FF 
5343   306E FF 00 00 00 		.db   0FFH,000H,000H,000H,000H,000H,000H,0FFH
5343   3072 00 00 00 FF 
5344   3076 FF FF FF FF 		.db   0FFH,0FFH,0FFH,0FFH,0FFH,00FH,00FH,00FH
5344   307A FF 0F 0F 0F 
5345   307E 0F 0F 0F FF 		.db   00FH,00FH,00FH,0FFH,0FFH,0FFH,0FFH,0FFH
5345   3082 FF FF FF FF 
5346   3086 FF F0 F0 F0 		.db   0FFH,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0FFH
5346   308A F0 F0 F0 FF 
5347   308E FF FF FF FF 		.db   0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
5347   3092 FF FF FF FF 
5348   3096 00 00 F8 08 		.db   000H,000H,0F8H,008H,008H,008H,008H,008H
5348   309A 08 08 08 08 
5349   309E 08 08 08 08 		.db   008H,008H,008H,008H,008H,008H,0F8H,000H
5349   30A2 08 08 F8 00 
5350   30A6 00 00 08 08 		.db   000H,000H,008H,008H,0F8H,008H,008H,008H
5350   30AA F8 08 08 08 
5351   30AE 00 00 FF 08 		.db   000H,000H,0FFH,008H,008H,008H,000H,000H
5351   30B2 08 08 00 00 
5352   30B6 FF 00 00 00 		.db   0FFH,000H,000H,000H,000H,000H,00FH,008H
5352   30BA 00 00 0F 08 
5353   30BE 08 08 08 08 		.db   008H,008H,008H,008H,00FH,000H,000H,000H
5353   30C2 0F 00 00 00 
5354   30C6 08 08 0F 08 		.db   008H,008H,00FH,008H,008H,008H,008H,008H
5354   30CA 08 08 08 08 
5355   30CE FF 00 00 00 		.db   0FFH,000H,000H,000H,008H,008H,0FFH,008H
5355   30D2 08 08 FF 08 
5356   30D6 08 08 3F 1F 		.db   008H,008H,03FH,01FH,00FH,007H,003H,001H
5356   30DA 0F 07 03 01 
5357   30DE 80 C0 E0 F0 		.db   080H,0C0H,0E0H,0F0H,0F8H,0FCH,001H,003H
5357   30E2 F8 FC 01 03 
5358   30E6 07 0F 1F 3F 		.db   007H,00FH,01FH,03FH,0FCH,0F8H,0F0H,0E0H
5358   30EA FC F8 F0 E0 
5359   30EE C0 80 55 AA 		.db   0C0H,080H,055H,0AAH,055H,0AAH,055H,0AAH
5359   30F2 55 AA 55 AA 
5360   30F6             
5361   30F6             ; ======================================================
5362   30F6             ; Keyboard conversion matrix
5363   30F6             ; ======================================================
5364   30F6             kbdbascii:  ;7BF1H
5365   30F6 7A 78 63 76 		.text "zxcvbnml"
5365   30FA 62 6E 6D 6C 
5366   30FE 61 73 64 66 		.text "asdfghjk"
5366   3102 67 68 6A 6B 
5367   3106 71 77 65 72 		.text "qwertyui"
5367   310A 74 79 75 69 
5368   310E 6F 70 5B 3B 		.text "op[;',./"
5368   3112 27 2C 2E 2F 
5369   3116 31 32 33 34 		.text "12345678"
5369   311A 35 36 37 38 
5370   311E 39 30 2D 3D 		.text "90-="
5371   3122             ;		.db   07AH,078H,063H,076H,062H,06EH,06DH,06CH
5372   3122             ;		.db   061H,073H,064H,066H,067H,068H,06AH,06BH
5373   3122             ;		.db   071H,077H,065H,072H,074H,079H,075H,069H
5374   3122             ;		.db   06FH,070H,05BH,03BH,027H,02CH,02EH,02FH
5375   3122             ;		.db   031H,032H,033H,034H,035H,036H,037H,038H
5376   3122             ;		.db   039H,030H,02DH,03DH
5377   3122             		
5378   3122             ; Shifted ASCII values
5379   3122             kbdasciishifted:  ;7C1DH
5380   3122 5A 58 43 56 		.text "ZXCVBNML"
5380   3126 42 4E 4D 4C 
5381   312A 41 53 44 46 		.text "ASDFGHJK"
5381   312E 47 48 4A 4B 
5382   3132 51 57 45 52 		.text "QWERTYUI"
5382   3136 54 59 55 49 
5383   313A 4F 50 5D 3A 		.text "OP]:\"<>?"
5383   313E 22 3C 3E 3F 
5384   3142 21 40 23 24 		.text "!@#$%^&*"
5384   3146 25 5E 26 2A 
5385   314A 28 29 5F 2B 		.text "()_+"		
5386   314E             ;		.db   05AH,058H,043H,056H
5387   314E             ;		.db   042H,04EH,04DH,04CH,041H,053H,044H,046H
5388   314E             ;		.db   047H,048H,04AH,04BH,051H,057H,045H,052H
5389   314E             ;		.db   054H,059H,055H,049H,04FH,050H,05DH,03AH
5390   314E             ;		.db   022H,03CH,03EH,03FH,021H,040H,023H,024H
5391   314E             ;		.db   025H,05EH,026H,02AH,028H,029H,05FH,02BH
5392   314E             
5393   314E             ; GRPH values
5394   314E             kbdgraph: 	;7C49H
5395   314E 00 83 84 00 		.db   000H,083H,084H,000H,095H,096H,081H,09AH
5395   3152 95 96 81 9A 
5396   3156 85 8B 00 82 		.db   085H,08BH,000H,082H,000H,086H,000H,09BH
5396   315A 00 86 00 9B 
5397   315E 93 94 8F 89 		.db   093H,094H,08FH,089H,087H,090H,091H,08EH
5397   3162 87 90 91 8E 
5398   3166 98 80 60 92 		.db   098H,080H,060H,092H,08CH,099H,097H,08AH
5398   316A 8C 99 97 8A 
5399   316E 88 9C 9D 9E 		.db   088H,09CH,09DH,09EH,09FH,0B4H,0B0H,0A3H
5399   3172 9F B4 B0 A3 
5400   3176 7B 7D 5C 8D 		.db   07BH,07DH,05CH,08DH
5401   317A             		
5402   317A             ; Shift GRPH values
5403   317A             kbdgraphshifted: ;7C75H
5404   317A E0 EF FF 00 		.db   0E0H,0EFH,0FFH,000H
5405   317E 00 00 F6 F9 		.db   000H,000H,0F6H,0F9H,0EBH,0ECH,0EDH,0EEH
5405   3182 EB EC ED EE 
5406   3186 FD FB F4 FA 		.db   0FDH,0FBH,0F4H,0FAH,0E7H,0E8H,0E9H,0EAH
5406   318A E7 E8 E9 EA 
5407   318E FC FE F0 F3 		.db   0FCH,0FEH,0F0H,0F3H,0F2H,0F1H,07EH,0F5H
5407   3192 F2 F1 7E F5 
5408   3196 00 F8 F7 00 		.db   000H,0F8H,0F7H,000H,0E1H,0E2H,0E3H,0E4H
5408   319A E1 E2 E3 E4 
5409   319E E5 E6 00 00 		.db   0E5H,0E6H,000H,000H,000H,000H,07CH,000H
5409   31A2 00 00 7C 00 
5410   31A6             		
5411   31A6             ; CODE values
5412   31A6             kbdcode:  ;7CA1H
5413   31A6 CE A1 A2 BD 		.db   0CEH,0A1H,0A2H,0BDH,000H,0CDH,000H,0CAH
5413   31AA 00 CD 00 CA 
5414   31AE B6 A9 BB 00 		.db   0B6H,0A9H,0BBH,000H,000H,000H,0CBH,0C9H
5414   31B2 00 00 CB C9 
5415   31B6 C8 00 C6 00 		.db   0C8H,000H,0C6H,000H,000H,0CCH,0B8H,0C7H
5415   31BA 00 CC B8 C7 
5416   31BE B7 AC B5 AD 		.db   0B7H,0ACH,0B5H,0ADH,0A0H,0BCH,0CFH,0AEH
5416   31C2 A0 BC CF AE 
5417   31C6 C0 00 C1 00 		.db   0C0H,000H,0C1H,000H,000H,000H,0C4H,0C2H
5417   31CA 00 00 C4 C2 
5418   31CE C3 AF C5 BE 		.db   0C3H,0AFH,0C5H,0BEH
5419   31D2             
5420   31D2             ; Shift CODE values
5421   31D2             kbdcodeshifted: ;7CCDH
5422   31D2 00 DF AB DE 		.db   000H,0DFH,0ABH,0DEH
5423   31D6 00 00 A5 DA 		.db   000H,000H,0A5H,0DAH,0B1H,0B9H,0D7H,0BFH
5423   31DA B1 B9 D7 BF 
5424   31DE 00 00 DB D9 		.db   000H,000H,0DBH,0D9H,0D8H,000H,0D6H,0AAH
5424   31E2 D8 00 D6 AA 
5425   31E6 BA DC B3 D5 		.db   0BAH,0DCH,0B3H,0D5H,0B2H,000H,000H,000H
5425   31EA B2 00 00 00 
5426   31EE A4 DD 00 00 		.db   0A4H,0DDH,000H,000H,0D0H,000H,0D1H,000H
5426   31F2 D0 00 D1 00 
5427   31F6 00 00 D4 D2 		.db   000H,000H,0D4H,0D2H,0D3H,0A6H,0A7H,0A8H
5427   31FA D3 A6 A7 A8 
5428   31FE             
5429   31FE             ; NUM LOCK values
5430   31FE             kbdnum: ;7CF9H
5431   31FE 6D 30 6A 31 		.db   06DH,030H,06AH,031H,06BH,032H,06CH,033H
5431   3202 6B 32 6C 33 
5432   3206 75 34 69 35 		.db   075H,034H,069H,035H,06FH,036H
5432   320A 6F 36 
5433   320C             
5434   320C             ; Special Key values (arrow, TAB, fKeys, etc.)
5435   320C             kbdspecial: ;7D07H
5436   320C 01 06       		.db   001H,006H
5437   320E 14 02 20 7F 		.db   014H,002H,020H,07FH,009H,01BH,08BH,088H
5437   3212 09 1B 8B 88 
5438   3216 8A 0D 80 81 		.db   08AH,00DH,080H,081H,082H,083H,084H,085H
5438   321A 82 83 84 85 
5439   321E 86 87       		.db   086H,087H
5440   3220             		
5441   3220             ; Shift special key values
5442   3220             kbdspecialshift: ;7D18H
5443   3220 1D 1C 1E 1F 		.db   01DH,01CH,01EH,01FH,020H,008H
5443   3224 20 08 
5444   3226 09 1B 8B 88 		.db   009H,01BH,08BH,088H,089H,00DH,080H,081H
5444   322A 89 0D 80 81 
5445   322E 82 83 84 85 		.db   082H,083H,084H,085H,086H,087H,051H,052H
5445   3232 86 87 51 52 
5446   3236 57 5A       		.db   057H,05AH	
5447   3238             
5448   3238             ; ======================================================
5449   3238             ; External ROM detect image loaded at F605H
5450   3238             ; ======================================================
5451   3238             ;036FH  DB   3EH,01H,D3H,E8H,21H,40H,00H,11H  ; F605H - MVI A,01H;  OUT E8H; LXI H,0040H;  LXI D,FAA4H
5452   3238             ;0377H  DB   A4H,FAH,7EH,12H,23H,13H,7DH,D6H  ; F60DH - MVI A,M;    STAX D;  INX H; INX D; MOV A,L; SUI 48H
5453   3238             ;037FH  DB   48H,C2H,0FH,F6H,D3H,E8H,2AH,A4H  ; F515H - JNZ F60FH;  OUT E8H; LHLD FAA4H;   
5454   3238             ;0387H  DB   FAH,11H,54H,43H,C3H,18H,00H,F3H  ; F61DH - LXI D,4354H; JMP 0018H;     DI;
5455   3238             ;038FH  DB   3EH,01H,D3H,E8H,C7H,00H,01H,00H  ; F625H - MVI A,01H;  OUT E8H; RST 0
5456   3238             
5457   3238             ; ======================================================
5458   3238             ; RAM3 OPTROM Test Code 
5459   3238             ; ======================================================
5460   3238             optram3load:
5461   3238 3E 09       	.db 03EH,009H       ;MVI A,01H
5462   323A D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5463   323C 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5464   323F 11 4B 91    	.db 011H,04BH,091H  ;LXI D,optram3open ; FAA4H       
5465   3242 7E          	.db 07EH            ;MOV A,M
5466   3243 12          	.db 012H            ;STAX D
5467   3244 23          	.db 023H            ;INX H
5468   3245 13          	.db 013H       	    ;INX D
5469   3246 7D          	.db 07DH            ;MOV A,L
5470   3247 D6 48       	.db 0D6H,48H        ;SUI 48H
5471   3249 C2 0A 91    	.db 0C2H,00AH,091H  ;JNZ optram3loop
5472   324C             	
5473   324C                                    ;Calculate Checksum over complete OPTROM
5474   324C 21 00 00    	.db 021H,000H,000H ;LXI H, 0  ; Start of ROM
5475   324F 01 00 00    	.db 001H,000H,000H ;LXI B, 0  ; Counter
5476   3252 11 00 00    	.db 011H,000H,000H ;LXI D, 0  ; storage
5477   3255                         ;optram3checksum:
5478   3255 4E          	.db 04EH           ;MOV C,M   ; Get byte
5479   3256 EB          	.db 0EBH           ;XCHG      ; Swap HL and DE
5480   3257 09          	.db 009H           ;DAD B     ; Add to form 16bit sum
5481   3258 EB          	.db 0EBH           ;XCHG      ; Swap HL and DE
5482   3259 23          	.db 023H           ;INX  H    ; Point to next byte
5483   325A 7C          	.db 07CH           ;MOV A,H   ; Test count for 0: 4
5484   325B DE 80       	.db 0DEH,080H      ;SBI 080H  ; Check for count to 080H
5485   325D B5          	.db 0B5H		   ;ORA L     ; Test lower byte: 4
5486   325E C2 1D 91    	.db 0C2H,01DH,091H ;JNZ optram3checksum  ; If ~0 continue 
5487   3261 EB          	.db 0EBH           ;XCHG
5488   3262 22 53 91    	.db 022H,053H,091H ;SHLD checksum3 ; Store the checksum 
5489   3265 3E 08       	.db 03EH,008H      ;MVI A,008H
5490   3267 D3 E8       	.db 0D3H,0E8H      ;OUT 0E8H;  ; Return to main ROM	
5491   3269                      ;Calculate Checksum over complete ROM 0-07FFFH
5492   3269 21 00 00    	.db 021H,00H,00H  ;LXI H, 0  ; Start of ROM
5493   326C 01 00 00    	.db 001H,00H,00H  ;LXI B, 0  ; Counter
5494   326F 11 00 00    	.db 011H,00H,00H  ;LXI D, 0  ; storage
5495   3272             					;optram3tchecksum:
5496   3272 4E          	.db 04EH          ;MOV C,M   ; Get byte
5497   3273 EB          	.db 0EBH          ;XCHG      ; Swap HL and DE
5498   3274 09          	.db 009H          ;DAD B     ; Add to form 16bit sum
5499   3275 EB          	.db 0EBH          ;XCHG      ; Swap HL and DE
5500   3276 23          	.db 023H          ;INX  H    ; Point to next byte
5501   3277 7C          	.db 07CH          ;MOV A,H   ; Test count for 0: 4
5502   3278 DE 80       	.db 0DEH,080H     ;SBI 080H  ;
5503   327A B5          	.db 0B5H          ;ORA L     ; Test lower byte: 4
5504   327B C2 3A 91    	.db 0C2H,03AH,091H;JNZ optram3tchecksum  ; If ~0 continue 			
5505   327E EB          	.db 0EBH          ;XCHG
5506   327F 22 55 91    	.db 022H,055H,091H;SHLD checksum3t
5507   3282 C9          	.db 0C9H          ;RET
5508   3283 00 00 00 00 	.db 000H,000H,000H,000H,000H,000H,000H,000H
5508   3287 00 00 00 00 
5509   328B 00 00       	.dw 0000H
5510   328D 00 00       	.dw 0000H
5511   328F             
5512   328F             ;getrex3
5513   328F 3E 09       	.db 03EH,09H        ;MVI A,09H
5514   3291 D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5515   3293             ;getrex3loop:
5516   3293 21 04 00    	.db 021H,004H,000H  ;LXI H,0004H
5517   3296 11 70 91    	.db 011H,070H,091H  ;LXI D,rexstore3 ;        
5518   3299 7E          	.db 07EH            ;MOV A,M
5519   329A 12          	.db 012H            ;STAX D
5520   329B 23          	.db 023H            ;INX H
5521   329C 13          	.db 013H       		;INX D
5522   329D 7D          	.db 07DH            ;MOV A,L
5523   329E D6 08       	.db 0D6H,008H       ;SUI 8H
5524   32A0 C2 61 91    	.db 0C2H,061H,091H  ;JNZ getrex3loop             		
5525   32A3 3E 08       	.db 03EH,008H       ;MVI A,008H
5526   32A5 D3 E8       	.db 0D3H,0E8H       ;OUT 0E8H;  ; Return to main ROM	
5527   32A7 C9          	.db 0C9H            ;RET
5528   32A8             ;rexstore3:
5529   32A8 00 00 00 00 	.db 00H,00H,00H,00H
5530   32AC             		
5531   32AC             ; ======================================================
5532   32AC             ; RAM2 OPTROM Test Code 
5533   32AC             ; ======================================================
5534   32AC             optram2load:
5535   32AC 3E 09       	.db 03EH,009H       ;MVI A,01H
5536   32AE D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5537   32B0 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5538   32B3 11 4B B1    	.db 011H,04BH,0B1H  ;LXI D,optram2open ; FAA4H       
5539   32B6 7E          	.db 07EH            ;MOV A,M
5540   32B7 12          	.db 012H            ;STAX D
5541   32B8 23          	.db 023H            ;INX H
5542   32B9 13          	.db 013H       	    ;INX D
5543   32BA 7D          	.db 07DH            ;MOV A,L
5544   32BB D6 48       	.db 0D6H,48H        ;SUI 48H
5545   32BD C2 0A B1    	.db 0C2H,0AH,0B1H   ;JNZ optram2loop
5546   32C0             	
5547   32C0                                     ;Calculate Checksum over complete OPTROM
5548   32C0 21 00 00    	.db 021H,000H,000H ;LXI H, 0  ; Start of ROM
5549   32C3 01 00 00    	.db 001H,000H,000H ;LXI B, 0  ; Counter
5550   32C6 11 00 00    	.db 011H,000H,000H ;LXI D, 0  ; storage
5551   32C9                         ;optram2checksum:
5552   32C9 4E          	.db 04EH           ;MOV C,M   ; Get byte
5553   32CA EB          	.db 0EBH           ;XCHG      ; Swap HL and DE
5554   32CB 09          	.db 009H           ;DAD B     ; Add to form 16bit sum
5555   32CC EB          	.db 0EBH           ;XCHG      ; Swap HL and DE
5556   32CD 23          	.db 023H           ;INX  H    ; Point to next byte
5557   32CE 7C          	.db 07CH           ;MOV A,H   ; Test count for 0: 4
5558   32CF DE 80       	.db 0DEH,080H      ;SBI 080H  ; Check for count to 080H
5559   32D1 B5          	.db 0B5H		   ;ORA L     ; Test lower byte: 4
5560   32D2 C2 1D B1    	.db 0C2H,01DH,0B1H ;JNZ optram2checksum  ; If ~0 continue 
5561   32D5 EB          	.db 0EBH           ;XCHG
5562   32D6 22 53 B1    	.db 022H,053H,0B1H ;SHLD checksum2 ; Store the checksum 
5563   32D9 3E 08       	.db 03EH,008H      ;MVI A,008H
5564   32DB D3 E8       	.db 0D3H,0E8H      ;OUT 0E8H;  ; Return to main ROM	
5565   32DD                      ;Calculate Checksum over complete ROM 0-07FFFH
5566   32DD 21 00 00    	.db 021H,00H,00H  ;LXI H, 0  ; Start of ROM
5567   32E0 01 00 00    	.db 001H,00H,00H  ;LXI B, 0  ; Counter
5568   32E3 11 00 00    	.db 011H,00H,00H  ;LXI D, 0  ; storage
5569   32E6             					;optram2tchecksum:
5570   32E6 4E          	.db 04EH          ;MOV C,M   ; Get byte
5571   32E7 EB          	.db 0EBH          ;XCHG      ; Swap HL and DE
5572   32E8 09          	.db 009H          ;DAD B     ; Add to form 16bit sum
5573   32E9 EB          	.db 0EBH          ;XCHG      ; Swap HL and DE
5574   32EA 23          	.db 023H          ;INX  H    ; Point to next byte
5575   32EB 7C          	.db 07CH          ;MOV A,H   ; Test count for 0: 4
5576   32EC DE 80       	.db 0DEH,080H     ;SBI 080H  ;
5577   32EE B5          	.db 0B5H          ;ORA L     ; Test lower byte: 4
5578   32EF C2 3A B1    	.db 0C2H,03AH,0B1H;JNZ optram2tchecksum  ; If ~0 continue 			
5579   32F2 EB          	.db 0EBH          ;XCHG
5580   32F3 22 55 B1    	.db 022H,055H,0B1H;SHLD checksum2t
5581   32F6 C9          	.db 0C9H          ;RET
5582   32F7 00 00 00 00 	.db 000H,000H,000H,000H,000H,000H,000H,000H
5582   32FB 00 00 00 00 
5583   32FF 00 00       	.dw 0000H
5584   3301 00 00       	.dw 0000H
5585   3303             	
5586   3303             ;getrex2
5587   3303 3E 09       	.db 03EH,09H        ;MVI A,09H
5588   3305 D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5589   3307             ;getrex2loop:
5590   3307 21 04 00    	.db 021H,004H,000H  ;LXI H,0004H
5591   330A 11 70 B1    	.db 011H,070H,0B1H  ;LXI D,rexstore2 ;        
5592   330D 7E          	.db 07EH            ;MOV A,M
5593   330E 12          	.db 012H            ;STAX D
5594   330F 23          	.db 023H            ;INX H
5595   3310 13          	.db 013H       		;INX D
5596   3311 7D          	.db 07DH            ;MOV A,L
5597   3312 D6 08       	.db 0D6H,08H        ;SUI 8H
5598   3314 C2 61 B1    	.db 0C2H,61H,0B1H  ;JNZ getre2loop             		
5599   3317 3E 08       	.db 03EH,008H      ;MVI A,008H
5600   3319 D3 E8       	.db 0D3H,0E8H      ;OUT 0E8H;  ; Return to main ROM	
5601   331B C9          	.db 0C9H          ;RET
5602   331C             ;rexstore2:
5603   331C 00 00 00 00 	.db 00H,00H,00H,00H
5604   3320             	
5605   3320             ; ======================================================
5606   3320             ; RAM1 OPTROM Test Code 
5607   3320             ; ======================================================
5608   3320             optram1load:
5609   3320 3E 09       	.db 03EH,009H       ;MVI A,01H
5610   3322 D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5611   3324 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5612   3327 11 4B D1    	.db 011H,04BH,0D1H  ;LXI D,optram1open ; FAA4H       
5613   332A 7E          	.db 07EH            ;MOV A,M
5614   332B 12          	.db 012H            ;STAX D
5615   332C 23          	.db 023H            ;INX H
5616   332D 13          	.db 013H       		;INX D
5617   332E 7D          	.db 07DH            ;MOV A,L
5618   332F D6 48       	.db 0D6H,48H        ;SUI 48H
5619   3331 C2 0A D1    	.db 0C2H,0AH,0D1H   ;JNZ optram1loop
5620   3334             	
5621   3334                                    ;Calculate Checksum over complete OPTROM
5622   3334 21 00 00    	.db 021H,000H,000H ;LXI H, 0  ; Start of ROM
5623   3337 01 00 00    	.db 001H,000H,000H ;LXI B, 0  ; Counter
5624   333A 11 00 00    	.db 011H,000H,000H ;LXI D, 0  ; storage
5625   333D                         ;optram1checksum:
5626   333D 4E          	.db 04EH           ;MOV C,M   ; Get byte
5627   333E EB          	.db 0EBH           ;XCHG      ; Swap HL and DE
5628   333F 09          	.db 009H           ;DAD B     ; Add to form 16bit sum
5629   3340 EB          	.db 0EBH           ;XCHG      ; Swap HL and DE
5630   3341 23          	.db 023H           ;INX  H    ; Point to next byte
5631   3342 7C          	.db 07CH           ;MOV A,H   ; Test count for 0: 4
5632   3343 DE 80       	.db 0DEH,080H      ;SBI 080H  ; Check for count to 080H
5633   3345 B5          	.db 0B5H		   ;ORA L     ; Test lower byte: 4
5634   3346 C2 1D D1    	.db 0C2H,01DH,0D1H ;JNZ optram1checksum  ; If ~0 continue 
5635   3349 EB          	.db 0EBH           ;XCHG
5636   334A 22 53 D1    	.db 022H,053H,0D1H ;SHLD checksum1 ; Store the checksum 
5637   334D 3E 08       	.db 03EH,008H      ;MVI A,008H
5638   334F D3 E8       	.db 0D3H,0E8H      ;OUT 0E8H;  ; Return to main ROM	
5639   3351                      ;Calculate Checksum over complete ROM 0-07FFFH
5640   3351 21 00 00    	.db 021H,00H,00H  ;LXI H, 0  ; Start of ROM
5641   3354 01 00 00    	.db 001H,00H,00H  ;LXI B, 0  ; Counter
5642   3357 11 00 00    	.db 011H,00H,00H  ;LXI D, 0  ; storage
5643   335A             					;optram1tchecksum:
5644   335A 4E          	.db 04EH          ;MOV C,M   ; Get byte
5645   335B EB          	.db 0EBH          ;XCHG      ; Swap HL and DE
5646   335C 09          	.db 009H          ;DAD B     ; Add to form 16bit sum
5647   335D EB          	.db 0EBH          ;XCHG      ; Swap HL and DE
5648   335E 23          	.db 023H          ;INX  H    ; Point to next byte
5649   335F 7C          	.db 07CH          ;MOV A,H   ; Test count for 0: 4
5650   3360 DE 80       	.db 0DEH,080H     ;SBI 080H  ;
5651   3362 B5          	.db 0B5H          ;ORA L     ; Test lower byte: 4
5652   3363 C2 3A D1    	.db 0C2H,03AH,0D1H;JNZ optram1tchecksum  ; If ~0 continue 			
5653   3366 EB          	.db 0EBH          ;XCHG
5654   3367 22 55 D1    	.db 022H,055H,0D1H;SHLD checksum1t
5655   336A C9          	.db 0C9H          ;RET
5656   336B 00 00 00 00 	.db 000H,000H,000H,000H,000H,000H,000H,000H
5656   336F 00 00 00 00 
5657   3373 00 00       	.dw 0000H
5658   3375 00 00       	.dw 0000H
5659   3377             
5660   3377             ;getrex1
5661   3377 3E 09       	.db 03EH,09H        ;MVI A,09H
5662   3379 D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5663   337B             ;getrex1loop:
5664   337B 21 04 00    	.db 021H,004H,000H  ;LXI H,0004H
5665   337E 11 70 D1    	.db 011H,070H,0D1H  ;LXI D,rexstore1 ;        
5666   3381 7E          	.db 07EH            ;MOV A,M
5667   3382 12          	.db 012H            ;STAX D
5668   3383 23          	.db 023H            ;INX H
5669   3384 13          	.db 013H       		;INX D
5670   3385 7D          	.db 07DH            ;MOV A,L
5671   3386 D6 08       	.db 0D6H,08H        ;SUI 8H
5672   3388 C2 61 D1    	.db 0C2H,61H,0D1H  ;JNZ getrex1loop             		
5673   338B 3E 08       	.db 03EH,008H      ;MVI A,008H
5674   338D D3 E8       	.db 0D3H,0E8H      ;OUT 0E8H;  ; Return to main ROM	
5675   338F C9          	.db 0C9H          ;RET
5676   3390             ;rexstore1:
5677   3390 00 00 00 00 	.db 00H,00H,00H,00H
5678   3394             	
5679   3394             ; ======================================================
5680   3394             ; RAM0 OPTROM Test Code 
5681   3394             ; ======================================================
5682   3394             optram0load:
5683   3394 3E 09       	.db 03EH,09H        ;MVI A,09H
5684   3396 D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5685   3398 21 40 00    	.db 021H,040H,000H  ;LXI H,0040H
5686   339B 11 4B F1    	.db 011H,04BH,0F1H  ;LXI D,optram0open ; FAA4H       
5687   339E 7E          	.db 07EH            ;MOV A,M
5688   339F 12          	.db 012H            ;STAX D
5689   33A0 23          	.db 023H            ;INX H
5690   33A1 13          	.db 013H       		;INX D
5691   33A2 7D          	.db 07DH            ;MOV A,L
5692   33A3 D6 48       	.db 0D6H,48H        ;SUI 48H
5693   33A5 C2 0A F1    	.db 0C2H,0AH,0F1H  ;JNZ optram0loop             		
5694   33A8                                    ;Calculate Checksum over complete OPTROM
5695   33A8 21 00 00    	.db 021H,000H,000H ;LXI H, 0  ; Start of ROM
5696   33AB 01 00 00    	.db 001H,000H,000H ;LXI B, 0  ; Counter
5697   33AE 11 00 00    	.db 011H,000H,000H ;LXI D, 0  ; storage
5698   33B1                         ;optram0checksum:
5699   33B1 4E          	.db 04EH           ;MOV C,M   ; Get byte
5700   33B2 EB          	.db 0EBH           ;XCHG      ; Swap HL and DE
5701   33B3 09          	.db 009H           ;DAD B     ; Add to form 16bit sum
5702   33B4 EB          	.db 0EBH           ;XCHG      ; Swap HL and DE
5703   33B5 23          	.db 023H           ;INX  H    ; Point to next byte
5704   33B6 7C          	.db 07CH           ;MOV A,H   ; Test count for 0: 4
5705   33B7 DE 80       	.db 0DEH,080H      ;SBI 080H  ; Check for count to 080H
5706   33B9 B5          	.db 0B5H		   ;ORA L     ; Test lower byte: 4
5707   33BA C2 1D F1    	.db 0C2H,01DH,0F1H ;JNZ optram0checksum  ; If ~0 continue 
5708   33BD EB          	.db 0EBH           ;XCHG
5709   33BE 22 53 F1    	.db 022H,053H,0F1H ;SHLD checksum0 ; Store the checksum 
5710   33C1 3E 08       	.db 03EH,008H      ;MVI A,008H
5711   33C3 D3 E8       	.db 0D3H,0E8H      ;OUT 0E8H;  ; Return to main ROM	
5712   33C5                      ;Calculate Checksum over complete ROM 0-07FFFH
5713   33C5 21 00 00    	.db 021H,00H,00H  ;LXI H, 0  ; Start of ROM
5714   33C8 01 00 00    	.db 001H,00H,00H  ;LXI B, 0  ; Counter
5715   33CB 11 00 00    	.db 011H,00H,00H  ;LXI D, 0  ; storage
5716   33CE             					;optram0tchecksum:
5717   33CE 4E          	.db 04EH          ;MOV C,M   ; Get byte
5718   33CF EB          	.db 0EBH          ;XCHG      ; Swap HL and DE
5719   33D0 09          	.db 009H          ;DAD B     ; Add to form 16bit sum
5720   33D1 EB          	.db 0EBH          ;XCHG      ; Swap HL and DE
5721   33D2 23          	.db 023H          ;INX  H    ; Point to next byte
5722   33D3 7C          	.db 07CH          ;MOV A,H   ; Test count for 0: 4
5723   33D4 DE 80       	.db 0DEH,080H     ;SBI 080H  ;
5724   33D6 B5          	.db 0B5H          ;ORA L     ; Test lower byte: 4
5725   33D7 C2 3A F1    	.db 0C2H,03AH,0F1H;JNZ optram0tchecksum  ; If ~0 continue 			
5726   33DA EB          	.db 0EBH          ;XCHG
5727   33DB 22 55 F1    	.db 022H,055H,0F1H;SHLD checksum0t
5728   33DE C9          	.db 0C9H          ;RET
5729   33DF 00 00 00 00 	.db 000H,000H,000H,000H,000H,000H,000H,000H
5729   33E3 00 00 00 00 
5730   33E7 00 00       	.dw 0000H
5731   33E9 00 00       	.dw 0000H
5732   33EB             	
5733   33EB             ;getrex0
5734   33EB 3E 09       	.db 03EH,09H        ;MVI A,09H
5735   33ED D3 E8       	.db 0D3H,0E8H       ;OUT E8H
5736   33EF             ;getrex0loop:
5737   33EF 21 04 00    	.db 021H,004H,000H  ;LXI H,0004H
5738   33F2 11 70 F1    	.db 011H,070H,0F1H  ;LXI D,rexstore0 ;        
5739   33F5 7E          	.db 07EH            ;MOV A,M
5740   33F6 12          	.db 012H            ;STAX D
5741   33F7 23          	.db 023H            ;INX H
5742   33F8 13          	.db 013H       		;INX D
5743   33F9 7D          	.db 07DH            ;MOV A,L
5744   33FA D6 08       	.db 0D6H,08H        ;SUI 8H
5745   33FC C2 61 F1    	.db 0C2H,061H,0F1H  ;JNZ getrex0loop             		
5746   33FF 3E 08       	.db 03EH,008H      ;MVI A,008H
5747   3401 D3 E8       	.db 0D3H,0E8H      ;OUT 0E8H;  ; Return to main ROM	
5748   3403 C9          	.db 0C9H          ;RET
5749   3404             ;rexstore0:
5750   3404 00 00 00 00 	.db 00H,00H,00H,00H
5751   3408             
5752   3408             ; ======================================================
5753   3408             ; Activate DUMP OPTROM Debug Code 
5754   3408             ; Easter egg code to dump ROM to serial port.
5755   3408             ; Call in the RAM check routines.
5756   3408             ; ======================================================
5757   3408             dumpromrun:
5758   3408 21 3C 34    		LXI H,dumpromload
5759   340B 11 00 F2    		LXI D,dumprom		
5760   340E 06 40       		MVI B,sizerom
5761   3410 CD EB 24    		CALL movemem    ; B bytes to (DE) from (HL)
5762   3413 CD 87 25    		CALL clrscreen
5763   3416 21 1E 29    		LXI H,dumpromstr
5764   3419 CD 35 25    		CALL putstr
5765   341C             		
5766   341C CD 76 29    		CALL initRS    ; Init RS232 PORT
5767   341F             		
5768   341F 21 B7 29    		LXI H,romdumpstart
5769   3422 CD 97 29    		CALL putstrRS
5770   3425             	
5771   3425 CD 00 F2    		CALL dumprom
5772   3428             
5773   3428 21 CA 29    		LXI H,romdumpend
5774   342B CD 97 29    		CALL putstrRS
5775   342E             		
5776   342E 3E C0        		MVI A,0C0H     ; Set Cursor to back to start
5777   3430 CD 2A 25    		CALL putins
5778   3433             		
5779   3433 21 2F 29    		LXI H,dumpromstrend
5780   3436 CD 35 25    		CALL putstr
5781   3439             dumpromfin:
5782   3439 C3 39 34    		JMP dumpromfin
5783   343C             			
5784   343C             ; ======================================================
5785   343C             ; DUMP OPTROM Debug Code for RAM
5786   343C             ; ======================================================
5787   343C             dumpromload:
5788   343C             ;dumprom:
5789   343C 3E 09       	.db 03EH,009H        ;MVI A,09H;  ; Switch to OPTROM
5790   343E D3 E8       	.db 0D3H,0E8H        ;OUT 0E8H; 	
5791   3440                         		
5792   3440 00 00 00    	.db 000H,000H,000H   ;NOP
5793   3443                          		
5794   3443             ;Calculate Checksum over complete OPTROM 0-07FFFH
5795   3443 21 00 00    	.db 021H,000H,000H   ;LXI H, 0  ; Start of ROM
5796   3446             ;dumpromloop:
5797   3446 7E          	.db 07EH          	 ;MOV A,M   ; Get byte
5798   3447 CD 30 F2    	.db 0CDH,030H,0F2H   ;CALL putchserport
5799   344A 23          	.db 023H          	 ;INX  H    ; Point to next byte
5800   344B 7C          	.db 07CH          	 ;MOV A,H   ; Test count for 0: 4
5801   344C DE 80       	.db 0DEH,080H        ;SBI 080H  ;
5802   344E B5          	.db 0B5H             ;ORA L     ; Test lower byte: 4
5803   344F C2 0A F2    	.db 0C2H,00AH,0F2H   ;JNZ dumpromloop  ; If ~0 continue 
5804   3452                          
5805   3452 3E 08       	.db 03EH,008H       		 ;MVI A,08H
5806   3454 D3 E8       	.db 0D3H,0E8H        ;OUT 0E8H;  ; Return to main ROM	
5807   3456 C9          	.db 0C9H          	 ;RET
5808   3457             ;initserport:
5809   3457             ; Configure the serial port, switch to RS232
5810   3457 3E 24       	.db 03EH,024H        ;MVI A,024H    ; PIO B configuration (RTS hi, DTR hi, SPKR=1, Serial=RS232, Keyscan col 9 enable)
5811   3459 D3 B2       	.db 0D3H,0B2H        ;OUT PIOB      ; Set PIO chip port B configuration	
5812   345B                          
5813   345B             ; Set baud rate 19200 using PIO Timer	
5814   345B 3E 08       	.db 03EH,008H        ;MVI A,008H
5815   345D D3 B4       	.db 0D3H,0B4H        ;OUT PIOT1     ; BCH Timer 0
5816   345F 3E 40       	.db 03EH,040H        ;MVI A,040H
5817   3461 D3 B5       	.db 0D3H,0B5H        ;OUT PIOT2	  ; BDH Timer 1
5818   3463 3E C3       	.db 03EH,0C3H        ;MVI A,0C3H
5819   3465 D3 B0       	.db 0D3H,0B0H        ;OUT PIOCR	  ; B8H Control Reg
5820   3467                          		
5821   3467             ; Configure UART Chip
5822   3467             ; B11100: 8bits + No Parity + 1 stop
5823   3467 3E 1C       	.db 03EH,01CH        ;MVI A,01CH
5824   3469 D3 D8       	.db 0D3H,0D8H        ;OUT UARTmode  ; D8H
5825   346B C9          	.db 0C9H          	 ;RET
5826   346C                       		
5827   346C             ; Put Char in A to serial port
5828   346C             ;putchserport:
5829   346C F5          	.db 0F5H             ;PUSH PSW       ; Save A
5830   346D             ;putchserportwait:
5831   346D DB D8       	.db 0DBH,0D8H        ;IN UARTmode    ; D8H	
5832   346F E6 10       	.db 0E6H,010H        ;ANI 010H       ; TX Buffer empty - High buffer empty
5833   3471 CA 31 F2    	.db 0CAH,031H,0F2H   ;JZ putchserportwait ; Wait for TX buffer to empty		
5834   3474 F1          	.db 0F1H             ;POP PSW        ; Restore A
5835   3475 D3 C8       	.db 0D3H,0C8H        ;OUT UARTsend   ; C8H
5836   3477 C9          	.db 0C9H             ;RET	
5837   3478             
5838   3478             ; ======================================================
5839   3478             ; The code below will appear in RAM it is here to generate
5840   3478             ; the HEX code for the ROM to load into RAM when running. 
5841   3478             ; ======================================================		
5842   3478             ; ======================================================
5843   3478             ; RAM3 OPTROM Test Code 
5844   3478             ; ======================================================		
5845   9100             		.org ram3+1100H
5846   9100             optram3:
5847   9100 3E 09       		MVI A,09H;  
5848   9102 D3 E8       		OUT 0E8H; 
5849   9104 21 40 00    		LXI H,0040H;  
5850   9107 11 4B 91    		LXI D,optram3open ; FAA4H
5851   910A             optram3loop:		
5852   910A 7E          		MOV A,M;   
5853   910B 12          		STAX D;  
5854   910C 23          		INX H; 
5855   910D 13          		INX D; 
5856   910E 7D          		MOV A,L; 
5857   910F D6 48       		SUI 48H
5858   9111 C2 0A 91    		JNZ optram3loop   ; F60FH; 
5859   9114             	
5860   9114             ;Calculate Checksum over complete OPTROM 0-07FFFH
5861   9114 21 00 00    		LXI H, 0  ; Start of ROM
5862   9117 01 00 00    		LXI B, 0  ; Counter
5863   911A 11 00 00    		LXI D, 0  ; storage
5864   911D             optram3checksum:
5865   911D 4E          		MOV C,M   ; Get byte
5866   911E EB          		XCHG      ; Swap HL and DE
5867   911F 09          		DAD B     ; Add to form 16bit sum
5868   9120 EB          		XCHG      ; Swap HL and DE
5869   9121 23          		INX  H    ; Point to next byte
5870   9122 7C          		MOV A,H   ; Test count for 0: 4
5871   9123 DE 80       		SBI 080H  ;
5872   9125 B5          		ORA L     ; Test lower byte: 4
5873   9126 C2 1D 91            JNZ optram3checksum  ; If ~0 continue 
5874   9129             		
5875   9129 EB                  XCHG
5876   912A 22 53 91            SHLD checksum3      ; Store the checksum 
5877   912D 3E 08       		MVI A,08H
5878   912F D3 E8       		OUT 0E8H;  ; Return to main ROM	
5879   9131             		
5880   9131             ;Calculate Checksum over complete ROM 0-07FFFH
5881   9131 21 00 00    		LXI H, 0  ; Start of ROM
5882   9134 01 00 00    		LXI B, 0  ; Counter
5883   9137 11 00 00    		LXI D, 0  ; storage
5884   913A             optram3tchecksum:
5885   913A 4E          		MOV C,M   ; Get byte
5886   913B EB          		XCHG      ; Swap HL and DE
5887   913C 09          		DAD B     ; Add to form 16bit sum
5888   913D EB          		XCHG      ; Swap HL and DE
5889   913E 23          		INX  H    ; Point to next byte
5890   913F 7C          		MOV A,H   ; Test count for 0: 4
5891   9140 DE 80       		SBI 080H  ;
5892   9142 B5          		ORA L     ; Test lower byte: 4
5893   9143 C2 3A 91            JNZ optram3tchecksum  ; If ~0 continue 			
5894   9146 EB          		XCHG
5895   9147 22 55 91    		SHLD checksum3t	
5896   914A C9          		RET
5897   914B             optram3open:
5898   914B 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
5898   914F 00 00 00 00 
5899   9153             checksum3:
5900   9153 00 00       		.dw 0000H  
5901   9155             checksum3t:
5902   9155 00 00       		.dw 0000H 
5903   9157             
5904   9157             getrex3:
5905   9157 3E 09       		MVI A,09H;  
5906   9159 D3 E8       		OUT 0E8H; 
5907   915B 21 04 00    		LXI H,0004H;  
5908   915E 11 70 91    		LXI D,rexstore3 ;
5909   9161             getrex3loop:		
5910   9161 7E          		MOV A,M;   
5911   9162 12          		STAX D;  
5912   9163 23          		INX H; 
5913   9164 13          		INX D; 
5914   9165 7D          		MOV A,L; 
5915   9166 D6 08       		SUI 08H
5916   9168 C2 61 91    		JNZ getrex3loop   ;
5917   916B 3E 09       		MVI A,09H;  
5918   916D D3 E8       		OUT 0E8H; 		
5919   916F C9          		RET				
5920   9170             rexstore3:
5921   9170 00 00 00 00 		.db 00H,00H,00H,00H
5922   9174             		
5923   9174             ; ======================================================
5924   9174             ; RAM2 OPTROM Test Code 
5925   9174             ; ======================================================
5926   B100             		.org ram2+1100H
5927   B100             optram2:
5928   B100 3E 09       		MVI A,09H;  
5929   B102 D3 E8       		OUT 0E8H; 
5930   B104 21 40 00    		LXI H,0040H;  
5931   B107 11 4B B1    		LXI D,optram2open ; FAA4H
5932   B10A             optram2loop:		
5933   B10A 7E          		MOV A,M;   
5934   B10B 12          		STAX D;  
5935   B10C 23          		INX H; 
5936   B10D 13          		INX D; 
5937   B10E 7D          		MOV A,L; 
5938   B10F D6 48       		SUI 048H
5939   B111 C2 0A B1    		JNZ optram2loop   ; F60FH;  
5940   B114             		
5941   B114             ;Calculate Checksum over complete OPTROM 0-07FFFH
5942   B114 21 00 00    		LXI H, 0  ; Start of ROM
5943   B117 01 00 00    		LXI B, 0  ; Counter
5944   B11A 11 00 00    		LXI D, 0  ; storage
5945   B11D             optram2checksum:
5946   B11D 4E          		MOV C,M   ; Get byte
5947   B11E EB          		XCHG      ; Swap HL and DE
5948   B11F 09          		DAD B     ; Add to form 16bit sum
5949   B120 EB          		XCHG      ; Swap HL and DE
5950   B121 23          		INX  H    ; Point to next byte
5951   B122 7C          		MOV A,H   ; Test count for 0: 4
5952   B123 DE 80       		SBI 080H  ;
5953   B125 B5          		ORA L     ; Test lower byte: 4
5954   B126             ;		MOV A,L
5955   B126             ;		CPI 0
5956   B126 C2 1D B1            JNZ optram2checksum  ; If ~0 continue 
5957   B129             		
5958   B129 EB                  XCHG
5959   B12A 22 53 D1            SHLD checksum1       ; Store the checksum 
5960   B12D 3E 08       		MVI A,08H
5961   B12F D3 E8       		OUT 0E8H;  ; Return to main ROM	
5962   B131             		
5963   B131             ;Calculate Checksum over complete ROM 0-07FFFH
5964   B131 21 00 00    		LXI H, 0  ; Start of ROM
5965   B134 01 00 00    		LXI B, 0  ; Counter
5966   B137 11 00 00    		LXI D, 0  ; storage
5967   B13A             optram2tchecksum:
5968   B13A 4E          		MOV C,M   ; Get byte
5969   B13B EB          		XCHG      ; Swap HL and DE
5970   B13C 09          		DAD B     ; Add to form 16bit sum
5971   B13D EB          		XCHG      ; Swap HL and DE
5972   B13E 23          		INX  H    ; Point to next byte
5973   B13F 7C          		MOV A,H   ; Test count for 0: 4
5974   B140 DE 80       		SBI 080H  ;
5975   B142 B5          		ORA L     ; Test lower byte: 4
5976   B143             ;		MOV A,L
5977   B143             ;		CPI 0
5978   B143 C2 3A B1            JNZ optram2tchecksum  ; If ~0 continue 			
5979   B146 EB          		XCHG
5980   B147 22 55 B1    		SHLD checksum2t
5981   B14A             	
5982   B14A C9          		RET
5983   B14B             optram2open:
5984   B14B 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
5984   B14F 00 00 00 00 
5985   B153             checksum2:
5986   B153 00 00       		.dw 0000H  
5987   B155             checksum2t:
5988   B155 00 00       		.dw 0000H 
5989   B157             
5990   B157             getrex2:
5991   B157 3E 09       		MVI A,09H;  
5992   B159 D3 E8       		OUT 0E8H; 
5993   B15B 21 04 00    		LXI H,0004H;  
5994   B15E 11 70 B1    		LXI D,rexstore2 ;
5995   B161             getrex2loop:		
5996   B161 7E          		MOV A,M;   
5997   B162 12          		STAX D;  
5998   B163 23          		INX H; 
5999   B164 13          		INX D; 
6000   B165 7D          		MOV A,L; 
6001   B166 D6 08       		SUI 08H
6002   B168 C2 61 B1    		JNZ getrex2loop   ;
6003   B16B 3E 09       		MVI A,09H;  
6004   B16D D3 E8       		OUT 0E8H; 		
6005   B16F C9          		RET				
6006   B170             rexstore2:
6007   B170 00 00 00 00 		.db 00H,00H,00H,00H
6008   B174             		
6009   B174             ; ======================================================
6010   B174             ; RAM1 OPTROM Test Code 
6011   B174             ; ======================================================
6012   D100             		.org ram1+1100H
6013   D100             optram1:
6014   D100 3E 09       		MVI A,09H;  
6015   D102 D3 E8       		OUT 0E8H; 
6016   D104 21 40 00    		LXI H,0040H;  
6017   D107 11 4B D1    		LXI D,optram1open ; FAA4H
6018   D10A             optram1loop:		
6019   D10A 7E          		MOV A,M;   
6020   D10B 12          		STAX D;  
6021   D10C 23          		INX H; 
6022   D10D 13          		INX D; 
6023   D10E 7D          		MOV A,L; 
6024   D10F D6 48       		SUI 048H
6025   D111 C2 0A D1    		JNZ optram1loop   ; F60FH;
6026   D114             		
6027   D114             ;Calculate Checksum over complete OPTROM 0-07FFFH
6028   D114 21 00 00    		LXI H, 0  ; Start of ROM
6029   D117 01 00 00    		LXI B, 0  ; Counter
6030   D11A 11 00 00    		LXI D, 0  ; storage
6031   D11D             optram1checksum:
6032   D11D 4E          		MOV C,M   ; Get byte
6033   D11E EB          		XCHG      ; Swap HL and DE
6034   D11F 09          		DAD B     ; Add to form 16bit sum
6035   D120 EB          		XCHG      ; Swap HL and DE
6036   D121 23          		INX  H    ; Point to next byte
6037   D122 7C          		MOV A,H   ; Test count for 0: 4
6038   D123 DE 80       		SBI 080H  ;
6039   D125 B5          		ORA L     ; Test lower byte: 4
6040   D126             ;		MOV A,L
6041   D126             ;		CPI 0
6042   D126 C2 1D F1            JNZ optram0checksum  ; If ~0 continue 
6043   D129             		
6044   D129 EB                  XCHG
6045   D12A 22 53 D1            SHLD checksum1       ; Store the checksum 
6046   D12D 3E 08       		MVI A,08H
6047   D12F D3 E8       		OUT 0E8H;  ; Return to main ROM	
6048   D131             		
6049   D131             ;Calculate Checksum over complete ROM 0-07FFFH
6050   D131 21 00 00    		LXI H, 0  ; Start of ROM
6051   D134 01 00 00    		LXI B, 0  ; Counter
6052   D137 11 00 00    		LXI D, 0  ; storage
6053   D13A             optram1tchecksum:
6054   D13A 4E          		MOV C,M   ; Get byte
6055   D13B EB          		XCHG      ; Swap HL and DE
6056   D13C 09          		DAD B     ; Add to form 16bit sum
6057   D13D EB          		XCHG      ; Swap HL and DE
6058   D13E 23          		INX  H    ; Point to next byte
6059   D13F 7C          		MOV A,H   ; Test count for 0: 4
6060   D140 DE 80       		SBI 080H  ;
6061   D142 B5          		ORA L     ; Test lower byte: 4
6062   D143             ;		MOV A,L
6063   D143             ;		CPI 0
6064   D143 C2 3A D1            JNZ optram1tchecksum  ; If ~0 continue 			
6065   D146 EB          		XCHG
6066   D147 22 55 D1    		SHLD checksum1t
6067   D14A             	
6068   D14A C9          		RET
6069   D14B             optram1open:
6070   D14B 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
6070   D14F 00 00 00 00 
6071   D153             checksum1:
6072   D153 00 00       		.dw 0000H  
6073   D155             checksum1t:
6074   D155 00 00       		.dw 0000H 
6075   D157             
6076   D157             getrex1:
6077   D157 3E 09       		MVI A,09H;  
6078   D159 D3 E8       		OUT 0E8H; 
6079   D15B 21 04 00    		LXI H,0004H;  
6080   D15E 11 70 D1    		LXI D,rexstore1 ;
6081   D161             getrex1loop:		
6082   D161 7E          		MOV A,M;   
6083   D162 12          		STAX D;  
6084   D163 23          		INX H; 
6085   D164 13          		INX D; 
6086   D165 7D          		MOV A,L; 
6087   D166 D6 08       		SUI 08H
6088   D168 C2 61 D1    		JNZ getrex1loop   ;
6089   D16B 3E 09       		MVI A,09H;  
6090   D16D D3 E8       		OUT 0E8H; 		
6091   D16F C9          		RET				
6092   D170             rexstore1:
6093   D170 00 00 00 00 		.db 00H,00H,00H,00H
6094   D174             						
6095   D174             ; ======================================================
6096   D174             ; RAM0 OPTROM Test Code 
6097   D174             ; ======================================================
6098   F100             		.org ram0+1100H
6099   F100             optram0:
6100   F100 3E 09       		MVI A,09H;  
6101   F102 D3 E8       		OUT 0E8H; 
6102   F104 21 40 00    		LXI H,0040H;  
6103   F107 11 4B F1    		LXI D,optram0open ; FAA4H
6104   F10A             optram0loop:		
6105   F10A 7E          		MOV A,M;   
6106   F10B 12          		STAX D;  
6107   F10C 23          		INX H; 
6108   F10D 13          		INX D; 
6109   F10E 7D          		MOV A,L; 
6110   F10F D6 48       		SUI 048H
6111   F111 C2 0A F1    		JNZ optram0loop   ; F60FH; 
6112   F114             		
6113   F114             ;Calculate Checksum over complete OPTROM 0-07FFFH
6114   F114 21 00 00    		LXI H, 0  ; Start of ROM
6115   F117 01 00 00    		LXI B, 0  ; Counter
6116   F11A 11 00 00    		LXI D, 0  ; storage
6117   F11D             optram0checksum:
6118   F11D 4E          		MOV C,M   ; Get byte
6119   F11E EB          		XCHG      ; Swap HL and DE
6120   F11F 09          		DAD B     ; Add to form 16bit sum
6121   F120 EB          		XCHG      ; Swap HL and DE
6122   F121 23          		INX  H    ; Point to next byte
6123   F122 7C          		MOV A,H   ; Test count for 0: 4
6124   F123 DE 80       		SBI 080H  ;
6125   F125 B5          		ORA L     ; Test lower byte: 4
6126   F126             ;		MOV A,L
6127   F126             ;		CPI 0
6128   F126 C2 1D F1            JNZ optram0checksum  ; If ~0 continue 
6129   F129             		
6130   F129 EB                  XCHG
6131   F12A 22 53 F1            SHLD checksum0       ; Store the checksum 
6132   F12D 3E 08       		MVI A,08H
6133   F12F D3 E8       		OUT 0E8H;  ; Return to main ROM	
6134   F131             		
6135   F131             ;Calculate Checksum over complete ROM 0-07FFFH
6136   F131 21 00 00    		LXI H, 0  ; Start of ROM
6137   F134 01 00 00    		LXI B, 0  ; Counter
6138   F137 11 00 00    		LXI D, 0  ; storage
6139   F13A             optram0tchecksum:
6140   F13A 4E          		MOV C,M   ; Get byte
6141   F13B EB          		XCHG      ; Swap HL and DE
6142   F13C 09          		DAD B     ; Add to form 16bit sum
6143   F13D EB          		XCHG      ; Swap HL and DE
6144   F13E 23          		INX  H    ; Point to next byte
6145   F13F 7C          		MOV A,H   ; Test count for 0: 4
6146   F140 DE 80       		SBI 080H  ;
6147   F142 B5          		ORA L     ; Test lower byte: 4
6148   F143             ;		MOV A,L
6149   F143             ;		CPI 0
6150   F143 C2 3A F1            JNZ optram0tchecksum  ; If ~0 continue 			
6151   F146 EB          		XCHG
6152   F147 22 55 F1    		SHLD checksum0t
6153   F14A C9          		RET
6154   F14B             optram0open:
6155   F14B 00 00 00 00 		.db 000H,000H,000H,000H,000H,000H,000H,000H
6155   F14F 00 00 00 00 
6156   F153             checksum0:
6157   F153 00 00       		.dw 0000H  
6158   F155             checksum0t:
6159   F155 00 00       		.dw 0000H 
6160   F157             				
6161   F157             getrex0:
6162   F157 3E 09       		MVI A,09H;  
6163   F159 D3 E8       		OUT 0E8H; 
6164   F15B 21 04 00    		LXI H,0004H;  
6165   F15E 11 70 F1    		LXI D,rexstore0 ;
6166   F161             getrex0loop:		
6167   F161 7E          		MOV A,M;   
6168   F162 12          		STAX D;  
6169   F163 23          		INX H; 
6170   F164 13          		INX D; 
6171   F165 7D          		MOV A,L; 
6172   F166 D6 08       		SUI 08H
6173   F168 C2 61 F1    		JNZ getrex0loop   ;
6174   F16B 3E 09       		MVI A,09H;  
6175   F16D D3 E8       		OUT 0E8H; 		
6176   F16F C9          		RET				
6177   F170             rexstore0:
6178   F170 00 00 00 00 		.db 00H,00H,00H,00H
6179   F174             size    .equ ((rexstore0 + 1) - optram0) + 3
6180   F174             
6181   F174             ; ======================================================
6182   F174             ; Useful to have to dump OPTROMS
6183   F174             ; ======================================================
6184   F174             ; DUMP OPTROM Test Code 
6185   F174             ; ======================================================
6186   F174             ; ======================================================
6187   F200             		.org ram0+1200H
6188   F200             dumprom:
6189   F200 3E 09       		MVI A,09H;  ; Switch to OPTROM
6190   F202 D3 E8       		OUT 0E8H; 	
6191   F204             		
6192   F204             		;CALL initserport ;Init the serial port
6193   F204 00          		NOP
6194   F205 00          		NOP
6195   F206 00          		NOP
6196   F207             ;Calculate Checksum over complete OPTROM 0-07FFFH
6197   F207 21 00 00    		LXI H, 0  ; Start of ROM
6198   F20A             dumpromloop:
6199   F20A 7E          		MOV A,M   ; Get byte
6200   F20B CD 30 F2    		CALL putchserport
6201   F20E 23          		INX  H    ; Point to next byte
6202   F20F 7C          		MOV A,H   ; Test count for 0: 4
6203   F210 DE 80       		SBI 080H  ;
6204   F212 B5          		ORA L     ; Test lower byte: 4
6205   F213 C2 0A F2            JNZ dumpromloop  ; If ~0 continue 
6206   F216             
6207   F216 3E 08       		MVI A,08H
6208   F218 D3 E8       		OUT 0E8H;  ; Return to main ROM	
6209   F21A C9          		RET
6210   F21B             		
6211   F21B             ; ==========================================================
6212   F21B             ; Init serial port
6213   F21B             ; ==========================================================
6214   F21B             initserport:
6215   F21B             ; Configure the serial port, switch to RS232
6216   F21B 3E 24       		MVI A,024H    ; PIO B configuration (RTS low, DTR low, SPKR=1, Serial=RS232, Keyscan col 9 enable)
6217   F21D D3 B2       		OUT PIOB      ; Set PIO chip port B configuration	
6218   F21F             
6219   F21F             ; Set baud rate 19200 using PIO Timer	
6220   F21F 3E 08       		MVI A,008H
6221   F221 D3 B4       		OUT PIOT1     ; BCH Timer 0
6222   F223 3E 40       		MVI A,040H
6223   F225 D3 B5       		OUT PIOT2	  ; BDH Timer 1
6224   F227 3E C3       		MVI A,0C3H
6225   F229 D3 B0       		OUT PIOCR	  ; B8H Control Reg
6226   F22B             		
6227   F22B             ; Configure UART Chip
6228   F22B             ; B11100: 8bits + No Parity + 1 stop
6229   F22B 3E 1C       		MVI A,01CH
6230   F22D D3 D8       		OUT UARTmode  ; D8H
6231   F22F C9          		RET
6232   F230             		
6233   F230             ; ==========================================================
6234   F230             ; Put Char in A to serial port
6235   F230             ; ==========================================================
6236   F230             putchserport:
6237   F230 F5          		PUSH PSW       ; Save A
6238   F231             putchserportwait:
6239   F231 DB D8       		IN UARTmode    ; D8H	
6240   F233 E6 10       		ANI 010H       ; TX Buffer empty - High buffer empty
6241   F235 CA 31 F2    		JZ putchserportwait ; Wait for TX buffer to empty		
6242   F238 F1          		POP PSW        ; Restore A
6243   F239 D3 C8       		OUT UARTsend   ; C8H
6244   F23B C9          		RET	
6245   F23C             			
6246   F23C             dumpromend:
6247   F23C             sizerom .equ ((dumpromend + 1) - dumprom) + 3
6248   F23C             
6249   F23C             		.endtasm: Number of errors = 0
